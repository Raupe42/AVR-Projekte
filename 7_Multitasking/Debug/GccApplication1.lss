
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000648  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800100  00800100  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000208  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000120  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ba  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00000d58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b3  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000017b  00000000  00000000  00000fdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  0000115a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a6 30       	cpi	r26, 0x06	; 6
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  88:	0c 94 22 03 	jmp	0x644	; 0x644 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <taster_gedrueckt>:
#define T1		1
#define T2		0


uint8_t taster_gedrueckt(uint8_t nr)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	if ( PINB & (1<<nr) )
  9c:	83 e2       	ldi	r24, 0x23	; 35
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	80 81       	ld	r24, Z
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	22 2f       	mov	r18, r18
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <taster_gedrueckt+0x24>
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	2a 95       	dec	r18
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <taster_gedrueckt+0x20>
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	99 27       	eor	r25, r25
  bc:	89 2b       	or	r24, r25
  be:	11 f0       	breq	.+4      	; 0xc4 <taster_gedrueckt+0x34>
	{
		return 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <taster_gedrueckt+0x36>
	}else
	{
		return 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
  c6:	0f 90       	pop	r0
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <gruenphase>:

void gruenphase(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<ROT);
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	25 e2       	ldi	r18, 0x25	; 37
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	2b 7f       	andi	r18, 0xFB	; 251
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	PORTB = PORTB & ~(1<<GELB);
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	25 e2       	ldi	r18, 0x25	; 37
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	27 7f       	andi	r18, 0xF7	; 247
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<GRUEN);
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	25 e2       	ldi	r18, 0x25	; 37
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	20 61       	ori	r18, 0x10	; 16
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
}
 10c:	00 00       	nop
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <gelbphase>:

void gelbphase(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<GRUEN);
 11c:	85 e2       	ldi	r24, 0x25	; 37
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	25 e2       	ldi	r18, 0x25	; 37
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	2f 7e       	andi	r18, 0xEF	; 239
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<GELB);
 12e:	85 e2       	ldi	r24, 0x25	; 37
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	25 e2       	ldi	r18, 0x25	; 37
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	28 60       	ori	r18, 0x08	; 8
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
}
 140:	00 00       	nop
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <rotphase>:

void rotphase(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<GELB);
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	25 e2       	ldi	r18, 0x25	; 37
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	27 7f       	andi	r18, 0xF7	; 247
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<ROT);
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	25 e2       	ldi	r18, 0x25	; 37
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	24 60       	ori	r18, 0x04	; 4
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <rotgelbphase>:

void rotgelbphase(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB | (1<<GELB);
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	25 e2       	ldi	r18, 0x25	; 37
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	28 60       	ori	r18, 0x08	; 8
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
}
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:

uint32_t t=0;
int16_t alarm=0;

int main(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	2e 97       	sbiw	r28, 0x0e	; 14
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
	// Datenrichtung:,
	DDRB = (1<<ROT) | (1<<GELB) | (1<<GRUEN);
 1b2:	84 e2       	ldi	r24, 0x24	; 36
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	2c e1       	ldi	r18, 0x1C	; 28
 1b8:	fc 01       	movw	r30, r24
 1ba:	20 83       	st	Z, r18
	DDRB = DDRB &~(1<<T1) &~(1<<T1);
 1bc:	84 e2       	ldi	r24, 0x24	; 36
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	24 e2       	ldi	r18, 0x24	; 36
 1c2:	30 e0       	ldi	r19, 0x00	; 0
 1c4:	f9 01       	movw	r30, r18
 1c6:	20 81       	ld	r18, Z
 1c8:	2d 7f       	andi	r18, 0xFD	; 253
 1ca:	fc 01       	movw	r30, r24
 1cc:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<T1) | (1<<T2);
 1ce:	85 e2       	ldi	r24, 0x25	; 37
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	25 e2       	ldi	r18, 0x25	; 37
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	20 81       	ld	r18, Z
 1da:	23 60       	ori	r18, 0x03	; 3
 1dc:	fc 01       	movw	r30, r24
 1de:	20 83       	st	Z, r18
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	a0 e8       	ldi	r26, 0x80	; 128
 1e6:	bf e3       	ldi	r27, 0x3F	; 63
 1e8:	89 83       	std	Y+1, r24	; 0x01
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	ab 83       	std	Y+3, r26	; 0x03
 1ee:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 1f0:	20 e0       	ldi	r18, 0x00	; 0
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	4a e7       	ldi	r20, 0x7A	; 122
 1f6:	55 e4       	ldi	r21, 0x45	; 69
 1f8:	69 81       	ldd	r22, Y+1	; 0x01
 1fa:	7a 81       	ldd	r23, Y+2	; 0x02
 1fc:	8b 81       	ldd	r24, Y+3	; 0x03
 1fe:	9c 81       	ldd	r25, Y+4	; 0x04
 200:	0e 94 8d 02 	call	0x51a	; 0x51a <__mulsf3>
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	8d 83       	std	Y+5, r24	; 0x05
 20a:	9e 83       	std	Y+6, r25	; 0x06
 20c:	af 83       	std	Y+7, r26	; 0x07
 20e:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e8       	ldi	r20, 0x80	; 128
 216:	5f e3       	ldi	r21, 0x3F	; 63
 218:	6d 81       	ldd	r22, Y+5	; 0x05
 21a:	7e 81       	ldd	r23, Y+6	; 0x06
 21c:	8f 81       	ldd	r24, Y+7	; 0x07
 21e:	98 85       	ldd	r25, Y+8	; 0x08
 220:	0e 94 07 02 	call	0x40e	; 0x40e <__cmpsf2>
 224:	88 23       	and	r24, r24
 226:	2c f4       	brge	.+10     	; 0x232 <main+0x94>
		__ticks = 1;
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	9a 87       	std	Y+10, r25	; 0x0a
 22e:	89 87       	std	Y+9, r24	; 0x09
 230:	3f c0       	rjmp	.+126    	; 0x2b0 <main+0x112>
	else if (__tmp > 65535)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	3f ef       	ldi	r19, 0xFF	; 255
 236:	4f e7       	ldi	r20, 0x7F	; 127
 238:	57 e4       	ldi	r21, 0x47	; 71
 23a:	6d 81       	ldd	r22, Y+5	; 0x05
 23c:	7e 81       	ldd	r23, Y+6	; 0x06
 23e:	8f 81       	ldd	r24, Y+7	; 0x07
 240:	98 85       	ldd	r25, Y+8	; 0x08
 242:	0e 94 88 02 	call	0x510	; 0x510 <__gesf2>
 246:	18 16       	cp	r1, r24
 248:	4c f5       	brge	.+82     	; 0x29c <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	40 e2       	ldi	r20, 0x20	; 32
 250:	51 e4       	ldi	r21, 0x41	; 65
 252:	69 81       	ldd	r22, Y+1	; 0x01
 254:	7a 81       	ldd	r23, Y+2	; 0x02
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	9c 81       	ldd	r25, Y+4	; 0x04
 25a:	0e 94 8d 02 	call	0x51a	; 0x51a <__mulsf3>
 25e:	dc 01       	movw	r26, r24
 260:	cb 01       	movw	r24, r22
 262:	bc 01       	movw	r22, r24
 264:	cd 01       	movw	r24, r26
 266:	0e 94 0c 02 	call	0x418	; 0x418 <__fixunssfsi>
 26a:	dc 01       	movw	r26, r24
 26c:	cb 01       	movw	r24, r22
 26e:	9a 87       	std	Y+10, r25	; 0x0a
 270:	89 87       	std	Y+9, r24	; 0x09
 272:	0f c0       	rjmp	.+30     	; 0x292 <main+0xf4>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	9c 87       	std	Y+12, r25	; 0x0c
 27a:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 27c:	8b 85       	ldd	r24, Y+11	; 0x0b
 27e:	9c 85       	ldd	r25, Y+12	; 0x0c
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	f1 f7       	brne	.-4      	; 0x280 <main+0xe2>
 284:	9c 87       	std	Y+12, r25	; 0x0c
 286:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 288:	89 85       	ldd	r24, Y+9	; 0x09
 28a:	9a 85       	ldd	r25, Y+10	; 0x0a
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	9a 87       	std	Y+10, r25	; 0x0a
 290:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 292:	89 85       	ldd	r24, Y+9	; 0x09
 294:	9a 85       	ldd	r25, Y+10	; 0x0a
 296:	89 2b       	or	r24, r25
 298:	69 f7       	brne	.-38     	; 0x274 <main+0xd6>
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 29c:	6d 81       	ldd	r22, Y+5	; 0x05
 29e:	7e 81       	ldd	r23, Y+6	; 0x06
 2a0:	8f 81       	ldd	r24, Y+7	; 0x07
 2a2:	98 85       	ldd	r25, Y+8	; 0x08
 2a4:	0e 94 0c 02 	call	0x418	; 0x418 <__fixunssfsi>
 2a8:	dc 01       	movw	r26, r24
 2aa:	cb 01       	movw	r24, r22
 2ac:	9a 87       	std	Y+10, r25	; 0x0a
 2ae:	89 87       	std	Y+9, r24	; 0x09
 2b0:	89 85       	ldd	r24, Y+9	; 0x09
 2b2:	9a 85       	ldd	r25, Y+10	; 0x0a
 2b4:	9e 87       	std	Y+14, r25	; 0x0e
 2b6:	8d 87       	std	Y+13, r24	; 0x0d
 2b8:	8d 85       	ldd	r24, Y+13	; 0x0d
 2ba:	9e 85       	ldd	r25, Y+14	; 0x0e
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <main+0x11e>
 2c0:	9e 87       	std	Y+14, r25	; 0x0e
 2c2:	8d 87       	std	Y+13, r24	; 0x0d

    while (1) 
    {
		_delay_ms(1);
		t++;
 2c4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2cc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2d0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	a1 1d       	adc	r26, r1
 2d8:	b1 1d       	adc	r27, r1
 2da:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2e2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 2e6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>

		if(alarm == 0)
 2ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarm>
 2ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <alarm+0x1>
 2f2:	89 2b       	or	r24, r25
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <main+0x15a>
 2f6:	5d c0       	rjmp	.+186    	; 0x3b2 <main+0x214>
		{
			if (taster_gedrueckt(T1))
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 48 00 	call	0x90	; 0x90 <taster_gedrueckt>
 2fe:	88 23       	and	r24, r24
 300:	31 f0       	breq	.+12     	; 0x30e <main+0x170>
				alarm = 1;
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <alarm+0x1>
 30a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarm>
			if ( t == 1 )		rotphase();
 30e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 312:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 316:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 31a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 31e:	01 97       	sbiw	r24, 0x01	; 1
 320:	a1 05       	cpc	r26, r1
 322:	b1 05       	cpc	r27, r1
 324:	11 f4       	brne	.+4      	; 0x32a <main+0x18c>
 326:	0e 94 a4 00 	call	0x148	; 0x148 <rotphase>
			if ( t == 2000 )	rotgelbphase();
 32a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 32e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 332:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 336:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 33a:	80 3d       	cpi	r24, 0xD0	; 208
 33c:	97 40       	sbci	r25, 0x07	; 7
 33e:	a1 05       	cpc	r26, r1
 340:	b1 05       	cpc	r27, r1
 342:	11 f4       	brne	.+4      	; 0x348 <main+0x1aa>
 344:	0e 94 be 00 	call	0x17c	; 0x17c <rotgelbphase>
			if ( t == 2500 )	gruenphase();
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 350:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 354:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 358:	84 3c       	cpi	r24, 0xC4	; 196
 35a:	99 40       	sbci	r25, 0x09	; 9
 35c:	a1 05       	cpc	r26, r1
 35e:	b1 05       	cpc	r27, r1
 360:	11 f4       	brne	.+4      	; 0x366 <main+0x1c8>
 362:	0e 94 67 00 	call	0xce	; 0xce <gruenphase>
			if ( t == 3500 )	gelbphase();
 366:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 36a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 36e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 372:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 376:	8c 3a       	cpi	r24, 0xAC	; 172
 378:	9d 40       	sbci	r25, 0x0D	; 13
 37a:	a1 05       	cpc	r26, r1
 37c:	b1 05       	cpc	r27, r1
 37e:	11 f4       	brne	.+4      	; 0x384 <main+0x1e6>
 380:	0e 94 8a 00 	call	0x114	; 0x114 <gelbphase>
			if ( t == 4000 )	t=0;
 384:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 388:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 38c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 390:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 394:	80 3a       	cpi	r24, 0xA0	; 160
 396:	9f 40       	sbci	r25, 0x0F	; 15
 398:	a1 05       	cpc	r26, r1
 39a:	b1 05       	cpc	r27, r1
 39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0x202>
 39e:	20 cf       	rjmp	.-448    	; 0x1e0 <main+0x42>
 3a0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 3a4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 3a8:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 3ac:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 3b0:	17 cf       	rjmp	.-466    	; 0x1e0 <main+0x42>
		}
		else
		{
			PORTB = PORTB & ~(1<<GRUEN);
 3b2:	85 e2       	ldi	r24, 0x25	; 37
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	25 e2       	ldi	r18, 0x25	; 37
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	f9 01       	movw	r30, r18
 3bc:	20 81       	ld	r18, Z
 3be:	2f 7e       	andi	r18, 0xEF	; 239
 3c0:	fc 01       	movw	r30, r24
 3c2:	20 83       	st	Z, r18
			PORTB = PORTB & ~(1<<GELB);
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	25 e2       	ldi	r18, 0x25	; 37
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	f9 01       	movw	r30, r18
 3ce:	20 81       	ld	r18, Z
 3d0:	27 7f       	andi	r18, 0xF7	; 247
 3d2:	fc 01       	movw	r30, r24
 3d4:	20 83       	st	Z, r18
			PORTB = PORTB | (1<<ROT);
 3d6:	85 e2       	ldi	r24, 0x25	; 37
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	25 e2       	ldi	r18, 0x25	; 37
 3dc:	30 e0       	ldi	r19, 0x00	; 0
 3de:	f9 01       	movw	r30, r18
 3e0:	20 81       	ld	r18, Z
 3e2:	24 60       	ori	r18, 0x04	; 4
 3e4:	fc 01       	movw	r30, r24
 3e6:	20 83       	st	Z, r18
			if (taster_gedrueckt(T2)){
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 48 00 	call	0x90	; 0x90 <taster_gedrueckt>
 3ee:	88 23       	and	r24, r24
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <main+0x256>
 3f2:	f6 ce       	rjmp	.-532    	; 0x1e0 <main+0x42>
				alarm = 0;
 3f4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <alarm+0x1>
 3f8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alarm>
				t=0;
 3fc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 400:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 404:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 408:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
			}
		}
    }
 40c:	e9 ce       	rjmp	.-558    	; 0x1e0 <main+0x42>

0000040e <__cmpsf2>:
 40e:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_cmp>
 412:	08 f4       	brcc	.+2      	; 0x416 <__cmpsf2+0x8>
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	08 95       	ret

00000418 <__fixunssfsi>:
 418:	0e 94 67 02 	call	0x4ce	; 0x4ce <__fp_splitA>
 41c:	88 f0       	brcs	.+34     	; 0x440 <__fixunssfsi+0x28>
 41e:	9f 57       	subi	r25, 0x7F	; 127
 420:	98 f0       	brcs	.+38     	; 0x448 <__fixunssfsi+0x30>
 422:	b9 2f       	mov	r27, r25
 424:	99 27       	eor	r25, r25
 426:	b7 51       	subi	r27, 0x17	; 23
 428:	b0 f0       	brcs	.+44     	; 0x456 <__fixunssfsi+0x3e>
 42a:	e1 f0       	breq	.+56     	; 0x464 <__fixunssfsi+0x4c>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	88 1f       	adc	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	1a f0       	brmi	.+6      	; 0x43c <__fixunssfsi+0x24>
 436:	ba 95       	dec	r27
 438:	c9 f7       	brne	.-14     	; 0x42c <__fixunssfsi+0x14>
 43a:	14 c0       	rjmp	.+40     	; 0x464 <__fixunssfsi+0x4c>
 43c:	b1 30       	cpi	r27, 0x01	; 1
 43e:	91 f0       	breq	.+36     	; 0x464 <__fixunssfsi+0x4c>
 440:	0e 94 81 02 	call	0x502	; 0x502 <__fp_zero>
 444:	b1 e0       	ldi	r27, 0x01	; 1
 446:	08 95       	ret
 448:	0c 94 81 02 	jmp	0x502	; 0x502 <__fp_zero>
 44c:	67 2f       	mov	r22, r23
 44e:	78 2f       	mov	r23, r24
 450:	88 27       	eor	r24, r24
 452:	b8 5f       	subi	r27, 0xF8	; 248
 454:	39 f0       	breq	.+14     	; 0x464 <__fixunssfsi+0x4c>
 456:	b9 3f       	cpi	r27, 0xF9	; 249
 458:	cc f3       	brlt	.-14     	; 0x44c <__fixunssfsi+0x34>
 45a:	86 95       	lsr	r24
 45c:	77 95       	ror	r23
 45e:	67 95       	ror	r22
 460:	b3 95       	inc	r27
 462:	d9 f7       	brne	.-10     	; 0x45a <__fixunssfsi+0x42>
 464:	3e f4       	brtc	.+14     	; 0x474 <__fixunssfsi+0x5c>
 466:	90 95       	com	r25
 468:	80 95       	com	r24
 46a:	70 95       	com	r23
 46c:	61 95       	neg	r22
 46e:	7f 4f       	sbci	r23, 0xFF	; 255
 470:	8f 4f       	sbci	r24, 0xFF	; 255
 472:	9f 4f       	sbci	r25, 0xFF	; 255
 474:	08 95       	ret

00000476 <__fp_cmp>:
 476:	99 0f       	add	r25, r25
 478:	00 08       	sbc	r0, r0
 47a:	55 0f       	add	r21, r21
 47c:	aa 0b       	sbc	r26, r26
 47e:	e0 e8       	ldi	r30, 0x80	; 128
 480:	fe ef       	ldi	r31, 0xFE	; 254
 482:	16 16       	cp	r1, r22
 484:	17 06       	cpc	r1, r23
 486:	e8 07       	cpc	r30, r24
 488:	f9 07       	cpc	r31, r25
 48a:	c0 f0       	brcs	.+48     	; 0x4bc <__fp_cmp+0x46>
 48c:	12 16       	cp	r1, r18
 48e:	13 06       	cpc	r1, r19
 490:	e4 07       	cpc	r30, r20
 492:	f5 07       	cpc	r31, r21
 494:	98 f0       	brcs	.+38     	; 0x4bc <__fp_cmp+0x46>
 496:	62 1b       	sub	r22, r18
 498:	73 0b       	sbc	r23, r19
 49a:	84 0b       	sbc	r24, r20
 49c:	95 0b       	sbc	r25, r21
 49e:	39 f4       	brne	.+14     	; 0x4ae <__fp_cmp+0x38>
 4a0:	0a 26       	eor	r0, r26
 4a2:	61 f0       	breq	.+24     	; 0x4bc <__fp_cmp+0x46>
 4a4:	23 2b       	or	r18, r19
 4a6:	24 2b       	or	r18, r20
 4a8:	25 2b       	or	r18, r21
 4aa:	21 f4       	brne	.+8      	; 0x4b4 <__fp_cmp+0x3e>
 4ac:	08 95       	ret
 4ae:	0a 26       	eor	r0, r26
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <__fp_cmp+0x3e>
 4b2:	a1 40       	sbci	r26, 0x01	; 1
 4b4:	a6 95       	lsr	r26
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	81 1d       	adc	r24, r1
 4ba:	81 1d       	adc	r24, r1
 4bc:	08 95       	ret

000004be <__fp_split3>:
 4be:	57 fd       	sbrc	r21, 7
 4c0:	90 58       	subi	r25, 0x80	; 128
 4c2:	44 0f       	add	r20, r20
 4c4:	55 1f       	adc	r21, r21
 4c6:	59 f0       	breq	.+22     	; 0x4de <__fp_splitA+0x10>
 4c8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ca:	71 f0       	breq	.+28     	; 0x4e8 <__fp_splitA+0x1a>
 4cc:	47 95       	ror	r20

000004ce <__fp_splitA>:
 4ce:	88 0f       	add	r24, r24
 4d0:	97 fb       	bst	r25, 7
 4d2:	99 1f       	adc	r25, r25
 4d4:	61 f0       	breq	.+24     	; 0x4ee <__fp_splitA+0x20>
 4d6:	9f 3f       	cpi	r25, 0xFF	; 255
 4d8:	79 f0       	breq	.+30     	; 0x4f8 <__fp_splitA+0x2a>
 4da:	87 95       	ror	r24
 4dc:	08 95       	ret
 4de:	12 16       	cp	r1, r18
 4e0:	13 06       	cpc	r1, r19
 4e2:	14 06       	cpc	r1, r20
 4e4:	55 1f       	adc	r21, r21
 4e6:	f2 cf       	rjmp	.-28     	; 0x4cc <__fp_split3+0xe>
 4e8:	46 95       	lsr	r20
 4ea:	f1 df       	rcall	.-30     	; 0x4ce <__fp_splitA>
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <__fp_splitA+0x30>
 4ee:	16 16       	cp	r1, r22
 4f0:	17 06       	cpc	r1, r23
 4f2:	18 06       	cpc	r1, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	f1 cf       	rjmp	.-30     	; 0x4da <__fp_splitA+0xc>
 4f8:	86 95       	lsr	r24
 4fa:	71 05       	cpc	r23, r1
 4fc:	61 05       	cpc	r22, r1
 4fe:	08 94       	sec
 500:	08 95       	ret

00000502 <__fp_zero>:
 502:	e8 94       	clt

00000504 <__fp_szero>:
 504:	bb 27       	eor	r27, r27
 506:	66 27       	eor	r22, r22
 508:	77 27       	eor	r23, r23
 50a:	cb 01       	movw	r24, r22
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__gesf2>:
 510:	0e 94 3b 02 	call	0x476	; 0x476 <__fp_cmp>
 514:	08 f4       	brcc	.+2      	; 0x518 <__gesf2+0x8>
 516:	8f ef       	ldi	r24, 0xFF	; 255
 518:	08 95       	ret

0000051a <__mulsf3>:
 51a:	0e 94 a0 02 	call	0x540	; 0x540 <__mulsf3x>
 51e:	0c 94 11 03 	jmp	0x622	; 0x622 <__fp_round>
 522:	0e 94 03 03 	call	0x606	; 0x606 <__fp_pscA>
 526:	38 f0       	brcs	.+14     	; 0x536 <__mulsf3+0x1c>
 528:	0e 94 0a 03 	call	0x614	; 0x614 <__fp_pscB>
 52c:	20 f0       	brcs	.+8      	; 0x536 <__mulsf3+0x1c>
 52e:	95 23       	and	r25, r21
 530:	11 f0       	breq	.+4      	; 0x536 <__mulsf3+0x1c>
 532:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_inf>
 536:	0c 94 00 03 	jmp	0x600	; 0x600 <__fp_nan>
 53a:	11 24       	eor	r1, r1
 53c:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_szero>

00000540 <__mulsf3x>:
 540:	0e 94 5f 02 	call	0x4be	; 0x4be <__fp_split3>
 544:	70 f3       	brcs	.-36     	; 0x522 <__mulsf3+0x8>

00000546 <__mulsf3_pse>:
 546:	95 9f       	mul	r25, r21
 548:	c1 f3       	breq	.-16     	; 0x53a <__mulsf3+0x20>
 54a:	95 0f       	add	r25, r21
 54c:	50 e0       	ldi	r21, 0x00	; 0
 54e:	55 1f       	adc	r21, r21
 550:	62 9f       	mul	r22, r18
 552:	f0 01       	movw	r30, r0
 554:	72 9f       	mul	r23, r18
 556:	bb 27       	eor	r27, r27
 558:	f0 0d       	add	r31, r0
 55a:	b1 1d       	adc	r27, r1
 55c:	63 9f       	mul	r22, r19
 55e:	aa 27       	eor	r26, r26
 560:	f0 0d       	add	r31, r0
 562:	b1 1d       	adc	r27, r1
 564:	aa 1f       	adc	r26, r26
 566:	64 9f       	mul	r22, r20
 568:	66 27       	eor	r22, r22
 56a:	b0 0d       	add	r27, r0
 56c:	a1 1d       	adc	r26, r1
 56e:	66 1f       	adc	r22, r22
 570:	82 9f       	mul	r24, r18
 572:	22 27       	eor	r18, r18
 574:	b0 0d       	add	r27, r0
 576:	a1 1d       	adc	r26, r1
 578:	62 1f       	adc	r22, r18
 57a:	73 9f       	mul	r23, r19
 57c:	b0 0d       	add	r27, r0
 57e:	a1 1d       	adc	r26, r1
 580:	62 1f       	adc	r22, r18
 582:	83 9f       	mul	r24, r19
 584:	a0 0d       	add	r26, r0
 586:	61 1d       	adc	r22, r1
 588:	22 1f       	adc	r18, r18
 58a:	74 9f       	mul	r23, r20
 58c:	33 27       	eor	r19, r19
 58e:	a0 0d       	add	r26, r0
 590:	61 1d       	adc	r22, r1
 592:	23 1f       	adc	r18, r19
 594:	84 9f       	mul	r24, r20
 596:	60 0d       	add	r22, r0
 598:	21 1d       	adc	r18, r1
 59a:	82 2f       	mov	r24, r18
 59c:	76 2f       	mov	r23, r22
 59e:	6a 2f       	mov	r22, r26
 5a0:	11 24       	eor	r1, r1
 5a2:	9f 57       	subi	r25, 0x7F	; 127
 5a4:	50 40       	sbci	r21, 0x00	; 0
 5a6:	9a f0       	brmi	.+38     	; 0x5ce <__mulsf3_pse+0x88>
 5a8:	f1 f0       	breq	.+60     	; 0x5e6 <__mulsf3_pse+0xa0>
 5aa:	88 23       	and	r24, r24
 5ac:	4a f0       	brmi	.+18     	; 0x5c0 <__mulsf3_pse+0x7a>
 5ae:	ee 0f       	add	r30, r30
 5b0:	ff 1f       	adc	r31, r31
 5b2:	bb 1f       	adc	r27, r27
 5b4:	66 1f       	adc	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	91 50       	subi	r25, 0x01	; 1
 5bc:	50 40       	sbci	r21, 0x00	; 0
 5be:	a9 f7       	brne	.-22     	; 0x5aa <__mulsf3_pse+0x64>
 5c0:	9e 3f       	cpi	r25, 0xFE	; 254
 5c2:	51 05       	cpc	r21, r1
 5c4:	80 f0       	brcs	.+32     	; 0x5e6 <__mulsf3_pse+0xa0>
 5c6:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <__fp_inf>
 5ca:	0c 94 82 02 	jmp	0x504	; 0x504 <__fp_szero>
 5ce:	5f 3f       	cpi	r21, 0xFF	; 255
 5d0:	e4 f3       	brlt	.-8      	; 0x5ca <__mulsf3_pse+0x84>
 5d2:	98 3e       	cpi	r25, 0xE8	; 232
 5d4:	d4 f3       	brlt	.-12     	; 0x5ca <__mulsf3_pse+0x84>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b7 95       	ror	r27
 5de:	f7 95       	ror	r31
 5e0:	e7 95       	ror	r30
 5e2:	9f 5f       	subi	r25, 0xFF	; 255
 5e4:	c1 f7       	brne	.-16     	; 0x5d6 <__mulsf3_pse+0x90>
 5e6:	fe 2b       	or	r31, r30
 5e8:	88 0f       	add	r24, r24
 5ea:	91 1d       	adc	r25, r1
 5ec:	96 95       	lsr	r25
 5ee:	87 95       	ror	r24
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret

000005f4 <__fp_inf>:
 5f4:	97 f9       	bld	r25, 7
 5f6:	9f 67       	ori	r25, 0x7F	; 127
 5f8:	80 e8       	ldi	r24, 0x80	; 128
 5fa:	70 e0       	ldi	r23, 0x00	; 0
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	08 95       	ret

00000600 <__fp_nan>:
 600:	9f ef       	ldi	r25, 0xFF	; 255
 602:	80 ec       	ldi	r24, 0xC0	; 192
 604:	08 95       	ret

00000606 <__fp_pscA>:
 606:	00 24       	eor	r0, r0
 608:	0a 94       	dec	r0
 60a:	16 16       	cp	r1, r22
 60c:	17 06       	cpc	r1, r23
 60e:	18 06       	cpc	r1, r24
 610:	09 06       	cpc	r0, r25
 612:	08 95       	ret

00000614 <__fp_pscB>:
 614:	00 24       	eor	r0, r0
 616:	0a 94       	dec	r0
 618:	12 16       	cp	r1, r18
 61a:	13 06       	cpc	r1, r19
 61c:	14 06       	cpc	r1, r20
 61e:	05 06       	cpc	r0, r21
 620:	08 95       	ret

00000622 <__fp_round>:
 622:	09 2e       	mov	r0, r25
 624:	03 94       	inc	r0
 626:	00 0c       	add	r0, r0
 628:	11 f4       	brne	.+4      	; 0x62e <__fp_round+0xc>
 62a:	88 23       	and	r24, r24
 62c:	52 f0       	brmi	.+20     	; 0x642 <__fp_round+0x20>
 62e:	bb 0f       	add	r27, r27
 630:	40 f4       	brcc	.+16     	; 0x642 <__fp_round+0x20>
 632:	bf 2b       	or	r27, r31
 634:	11 f4       	brne	.+4      	; 0x63a <__fp_round+0x18>
 636:	60 ff       	sbrs	r22, 0
 638:	04 c0       	rjmp	.+8      	; 0x642 <__fp_round+0x20>
 63a:	6f 5f       	subi	r22, 0xFF	; 255
 63c:	7f 4f       	sbci	r23, 0xFF	; 255
 63e:	8f 4f       	sbci	r24, 0xFF	; 255
 640:	9f 4f       	sbci	r25, 0xFF	; 255
 642:	08 95       	ret

00000644 <_exit>:
 644:	f8 94       	cli

00000646 <__stop_program>:
 646:	ff cf       	rjmp	.-2      	; 0x646 <__stop_program>
