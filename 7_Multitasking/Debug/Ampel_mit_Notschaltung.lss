
Ampel_mit_Notschaltung.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  00000376  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000376  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000143  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000b8  00000000  00000000  00000573  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001f3  00000000  00000000  0000062b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00000820  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017a  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000016f  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00000bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a5 30       	cpi	r26, 0x05	; 5
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  88:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <taster_gedrueckt>:
#define T1		1
#define T2		0


uint8_t taster_gedrueckt(uint8_t nr)
{
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	1f 92       	push	r1
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	89 83       	std	Y+1, r24	; 0x01
	if ( PINB & (1<<nr) )
  9c:	83 e2       	ldi	r24, 0x23	; 35
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	fc 01       	movw	r30, r24
  a2:	80 81       	ld	r24, Z
  a4:	88 2f       	mov	r24, r24
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	29 81       	ldd	r18, Y+1	; 0x01
  aa:	22 2f       	mov	r18, r18
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <taster_gedrueckt+0x24>
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	2a 95       	dec	r18
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <taster_gedrueckt+0x20>
  b8:	81 70       	andi	r24, 0x01	; 1
  ba:	99 27       	eor	r25, r25
  bc:	89 2b       	or	r24, r25
  be:	11 f0       	breq	.+4      	; 0xc4 <taster_gedrueckt+0x34>
	{
		return 0;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <taster_gedrueckt+0x36>
	}else
	{
		return 1;
  c4:	81 e0       	ldi	r24, 0x01	; 1
	}
}
  c6:	0f 90       	pop	r0
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <gruenphase>:

void gruenphase(void)
{
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<ROT);
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	25 e2       	ldi	r18, 0x25	; 37
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	f9 01       	movw	r30, r18
  e0:	20 81       	ld	r18, Z
  e2:	2b 7f       	andi	r18, 0xFB	; 251
  e4:	fc 01       	movw	r30, r24
  e6:	20 83       	st	Z, r18
	PORTB = PORTB & ~(1<<GELB);
  e8:	85 e2       	ldi	r24, 0x25	; 37
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	25 e2       	ldi	r18, 0x25	; 37
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	20 81       	ld	r18, Z
  f4:	27 7f       	andi	r18, 0xF7	; 247
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<GRUEN);
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	25 e2       	ldi	r18, 0x25	; 37
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	20 61       	ori	r18, 0x10	; 16
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
}
 10c:	00 00       	nop
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <gelbphase>:

void gelbphase(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<GRUEN);
 11c:	85 e2       	ldi	r24, 0x25	; 37
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	25 e2       	ldi	r18, 0x25	; 37
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	f9 01       	movw	r30, r18
 126:	20 81       	ld	r18, Z
 128:	2f 7e       	andi	r18, 0xEF	; 239
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<GELB);
 12e:	85 e2       	ldi	r24, 0x25	; 37
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	25 e2       	ldi	r18, 0x25	; 37
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	f9 01       	movw	r30, r18
 138:	20 81       	ld	r18, Z
 13a:	28 60       	ori	r18, 0x08	; 8
 13c:	fc 01       	movw	r30, r24
 13e:	20 83       	st	Z, r18
}
 140:	00 00       	nop
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <rotphase>:

void rotphase(void)
{
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	cd b7       	in	r28, 0x3d	; 61
 14e:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB & ~(1<<GELB);
 150:	85 e2       	ldi	r24, 0x25	; 37
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	25 e2       	ldi	r18, 0x25	; 37
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	27 7f       	andi	r18, 0xF7	; 247
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
	PORTB = PORTB | (1<<ROT);
 162:	85 e2       	ldi	r24, 0x25	; 37
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	25 e2       	ldi	r18, 0x25	; 37
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	f9 01       	movw	r30, r18
 16c:	20 81       	ld	r18, Z
 16e:	24 60       	ori	r18, 0x04	; 4
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
}
 174:	00 00       	nop
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <rotgelbphase>:

void rotgelbphase(void)
{
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	PORTB = PORTB | (1<<GELB);
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	25 e2       	ldi	r18, 0x25	; 37
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	28 60       	ori	r18, 0x08	; 8
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
}
 196:	00 00       	nop
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:

uint32_t t=0;
int8_t alarm=0;

int main(void)
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
	// Datenrichtung:,
	DDRB = (1<<ROT) | (1<<GELB) | (1<<GRUEN);
 1a6:	84 e2       	ldi	r24, 0x24	; 36
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2c e1       	ldi	r18, 0x1C	; 28
 1ac:	fc 01       	movw	r30, r24
 1ae:	20 83       	st	Z, r18
//	DDRB = DDRB &~(1<<T1) &~(1<<T2);// auch wenn hier schon nullen sind
	PORTB = PORTB | (1<<T1) | (1<<T2);
 1b0:	85 e2       	ldi	r24, 0x25	; 37
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	25 e2       	ldi	r18, 0x25	; 37
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	23 60       	ori	r18, 0x03	; 3
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18

    while (1) 
    {
		//_delay_ms(1);
		t++;
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ca:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 1ce:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	a1 1d       	adc	r26, r1
 1d6:	b1 1d       	adc	r27, r1
 1d8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1dc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1e0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 1e4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>

		if(alarm == 0)
 1e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <alarm>
 1ec:	88 23       	and	r24, r24
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <main+0x54>
 1f0:	5a c0       	rjmp	.+180    	; 0x2a6 <main+0x108>
		{	if ( t == 1 )		rotphase();
 1f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1fa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 1fe:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	a1 05       	cpc	r26, r1
 206:	b1 05       	cpc	r27, r1
 208:	11 f4       	brne	.+4      	; 0x20e <main+0x70>
 20a:	0e 94 a4 00 	call	0x148	; 0x148 <rotphase>
			if ( t == 2000 )	rotgelbphase();
 20e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 212:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 216:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 21a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 21e:	80 3d       	cpi	r24, 0xD0	; 208
 220:	97 40       	sbci	r25, 0x07	; 7
 222:	a1 05       	cpc	r26, r1
 224:	b1 05       	cpc	r27, r1
 226:	11 f4       	brne	.+4      	; 0x22c <main+0x8e>
 228:	0e 94 be 00 	call	0x17c	; 0x17c <rotgelbphase>
			if ( t == 2500 )	gruenphase();
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 230:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 234:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 238:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 23c:	84 3c       	cpi	r24, 0xC4	; 196
 23e:	99 40       	sbci	r25, 0x09	; 9
 240:	a1 05       	cpc	r26, r1
 242:	b1 05       	cpc	r27, r1
 244:	11 f4       	brne	.+4      	; 0x24a <main+0xac>
 246:	0e 94 67 00 	call	0xce	; 0xce <gruenphase>
			if ( t == 3500 )	gelbphase();
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 252:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 256:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 25a:	8c 3a       	cpi	r24, 0xAC	; 172
 25c:	9d 40       	sbci	r25, 0x0D	; 13
 25e:	a1 05       	cpc	r26, r1
 260:	b1 05       	cpc	r27, r1
 262:	11 f4       	brne	.+4      	; 0x268 <main+0xca>
 264:	0e 94 8a 00 	call	0x114	; 0x114 <gelbphase>
			if ( t == 4000 )	t=0;
 268:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 26c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 270:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 274:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 278:	80 3a       	cpi	r24, 0xA0	; 160
 27a:	9f 40       	sbci	r25, 0x0F	; 15
 27c:	a1 05       	cpc	r26, r1
 27e:	b1 05       	cpc	r27, r1
 280:	41 f4       	brne	.+16     	; 0x292 <main+0xf4>
 282:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 286:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 28a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 28e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
			if (taster_gedrueckt(T1))
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 48 00 	call	0x90	; 0x90 <taster_gedrueckt>
 298:	88 23       	and	r24, r24
 29a:	09 f4       	brne	.+2      	; 0x29e <main+0x100>
 29c:	92 cf       	rjmp	.-220    	; 0x1c2 <main+0x24>
				alarm = 1;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <alarm>
 2a4:	8e cf       	rjmp	.-228    	; 0x1c2 <main+0x24>
		}
		else
		{
			PORTB = PORTB & ~(1<<GRUEN);
 2a6:	85 e2       	ldi	r24, 0x25	; 37
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	25 e2       	ldi	r18, 0x25	; 37
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	2f 7e       	andi	r18, 0xEF	; 239
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
			PORTB = PORTB & ~(1<<GELB);
 2b8:	85 e2       	ldi	r24, 0x25	; 37
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	25 e2       	ldi	r18, 0x25	; 37
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	27 7f       	andi	r18, 0xF7	; 247
 2c6:	fc 01       	movw	r30, r24
 2c8:	20 83       	st	Z, r18
			PORTB = PORTB | (1<<ROT);
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	25 e2       	ldi	r18, 0x25	; 37
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	f9 01       	movw	r30, r18
 2d4:	20 81       	ld	r18, Z
 2d6:	24 60       	ori	r18, 0x04	; 4
 2d8:	fc 01       	movw	r30, r24
 2da:	20 83       	st	Z, r18
			if (taster_gedrueckt(T2)){
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 48 00 	call	0x90	; 0x90 <taster_gedrueckt>
 2e2:	88 23       	and	r24, r24
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <main+0x14a>
 2e6:	6d cf       	rjmp	.-294    	; 0x1c2 <main+0x24>
				alarm = 0;
 2e8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <alarm>
				t=0;
 2ec:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2f0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2f4:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 2f8:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
			}
		}
    }
 2fc:	62 cf       	rjmp	.-316    	; 0x1c2 <main+0x24>

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
