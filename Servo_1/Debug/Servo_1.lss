
Servo_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800100  00800100  0000038c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000748  00000000  00000000  0000043c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000664  00000000  00000000  00000b84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002ea  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000104  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039a  00000000  00000000  000015d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000204  00000000  00000000  00001972  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001b76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 30       	cpi	r26, 0x07	; 7
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  88:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
volatile uint32_t t_ms = 0;
uint16_t einInUs;
volatile uint8_t mode = 0;

ISR (TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	4f 93       	push	r20
  a2:	5f 93       	push	r21
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
  a8:	ef 93       	push	r30
  aa:	ff 93       	push	r31
  ac:	cf 93       	push	r28
  ae:	df 93       	push	r29
  b0:	00 d0       	rcall	.+0      	; 0xb2 <__vector_11+0x22>
  b2:	00 d0       	rcall	.+0      	; 0xb4 <__vector_11+0x24>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	uint16_t einT, ausT;
	einT = einInUs;
  b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <einInUs>
  bc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <einInUs+0x1>
  c0:	9a 83       	std	Y+2, r25	; 0x02
  c2:	89 83       	std	Y+1, r24	; 0x01
	ausT = 20000 - einInUs;
  c4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <einInUs>
  c8:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <einInUs+0x1>
  cc:	20 e2       	ldi	r18, 0x20	; 32
  ce:	3e e4       	ldi	r19, 0x4E	; 78
  d0:	a9 01       	movw	r20, r18
  d2:	48 1b       	sub	r20, r24
  d4:	59 0b       	sbc	r21, r25
  d6:	ca 01       	movw	r24, r20
  d8:	9c 83       	std	Y+4, r25	; 0x04
  da:	8b 83       	std	Y+3, r24	; 0x03
/*
Mit Timer 1 stehen 16 bit max OCR Value zur Verfügung
Bei Vorteiler 64: 250 tiks je ms
*/	
	switch (mode)
  dc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <mode>
  e0:	88 2f       	mov	r24, r24
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	19 f0       	breq	.+6      	; 0xee <__vector_11+0x5e>
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	c9 f0       	breq	.+50     	; 0x11e <__vector_11+0x8e>
	S1_PORT &= ~(1<<S1_BIT);
	break;
	default: ;
	}
	//OCR1A --;
}
  ec:	2f c0       	rjmp	.+94     	; 0x14c <__vector_11+0xbc>
Bei Vorteiler 64: 250 tiks je ms
*/	
	switch (mode)
	{
	case 0:	//Ein-Zeit
	OCR1A = einT / 4;
  ee:	88 e8       	ldi	r24, 0x88	; 136
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	29 81       	ldd	r18, Y+1	; 0x01
  f4:	3a 81       	ldd	r19, Y+2	; 0x02
  f6:	36 95       	lsr	r19
  f8:	27 95       	ror	r18
  fa:	36 95       	lsr	r19
  fc:	27 95       	ror	r18
  fe:	fc 01       	movw	r30, r24
 100:	31 83       	std	Z+1, r19	; 0x01
 102:	20 83       	st	Z, r18
	mode = 1;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <mode>
	S1_PORT |= (1<<S1_BIT);
 10a:	8b e2       	ldi	r24, 0x2B	; 43
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2b e2       	ldi	r18, 0x2B	; 43
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	20 64       	ori	r18, 0x40	; 64
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	break;
 11c:	17 c0       	rjmp	.+46     	; 0x14c <__vector_11+0xbc>
	case 1:
	OCR1A = ausT / 4;
 11e:	88 e8       	ldi	r24, 0x88	; 136
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	2b 81       	ldd	r18, Y+3	; 0x03
 124:	3c 81       	ldd	r19, Y+4	; 0x04
 126:	36 95       	lsr	r19
 128:	27 95       	ror	r18
 12a:	36 95       	lsr	r19
 12c:	27 95       	ror	r18
 12e:	fc 01       	movw	r30, r24
 130:	31 83       	std	Z+1, r19	; 0x01
 132:	20 83       	st	Z, r18
	mode = 0;
 134:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mode>
	S1_PORT &= ~(1<<S1_BIT);
 138:	8b e2       	ldi	r24, 0x2B	; 43
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2b e2       	ldi	r18, 0x2B	; 43
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	2f 7b       	andi	r18, 0xBF	; 191
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	break;
 14a:	00 00       	nop
	default: ;
	}
	//OCR1A --;
}
 14c:	00 00       	nop
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	ff 91       	pop	r31
 15c:	ef 91       	pop	r30
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	5f 91       	pop	r21
 164:	4f 91       	pop	r20
 166:	3f 91       	pop	r19
 168:	2f 91       	pop	r18
 16a:	0f 90       	pop	r0
 16c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 170:	0f 90       	pop	r0
 172:	1f 90       	pop	r1
 174:	18 95       	reti

00000176 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 17e:	0f 92       	push	r0
 180:	11 24       	eor	r1, r1
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	cd b7       	in	r28, 0x3d	; 61
 190:	de b7       	in	r29, 0x3e	; 62
	t_ms++;
 192:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 196:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 19a:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 19e:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	a1 1d       	adc	r26, r1
 1a6:	b1 1d       	adc	r27, r1
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1ac:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1b0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 1b4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
}
 1b8:	00 00       	nop
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	bf 91       	pop	r27
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <initTimer1>:

void initTimer1 ()
{
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= PS64; // 250 tiks je ms // erster Versuch
 1da:	81 e8       	ldi	r24, 0x81	; 129
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	21 e8       	ldi	r18, 0x81	; 129
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	f9 01       	movw	r30, r18
 1e4:	20 81       	ld	r18, Z
 1e6:	23 60       	ori	r18, 0x03	; 3
 1e8:	fc 01       	movw	r30, r24
 1ea:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12); //Aktiviere CTC Modus
 1ec:	81 e8       	ldi	r24, 0x81	; 129
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	21 e8       	ldi	r18, 0x81	; 129
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	f9 01       	movw	r30, r18
 1f6:	20 81       	ld	r18, Z
 1f8:	28 60       	ori	r18, 0x08	; 8
 1fa:	fc 01       	movw	r30, r24
 1fc:	20 83       	st	Z, r18
	OCR1A = 249; //Erste Ladewert -> ein Aufruf je ms
 1fe:	88 e8       	ldi	r24, 0x88	; 136
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	29 ef       	ldi	r18, 0xF9	; 249
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	31 83       	std	Z+1, r19	; 0x01
 20a:	20 83       	st	Z, r18
	TIMSK1 |= (1<<OCIE1A); //Interrupt des OCR aktiv
 20c:	8f e6       	ldi	r24, 0x6F	; 111
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	2f e6       	ldi	r18, 0x6F	; 111
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	f9 01       	movw	r30, r18
 216:	20 81       	ld	r18, Z
 218:	22 60       	ori	r18, 0x02	; 2
 21a:	fc 01       	movw	r30, r24
 21c:	20 83       	st	Z, r18

}
 21e:	00 00       	nop
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <initTimer0>:

void initTimer0 ()
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
	TCCR0B |= PS64; // 250 tiks je ms // erster Versuch
 22e:	85 e4       	ldi	r24, 0x45	; 69
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	25 e4       	ldi	r18, 0x45	; 69
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	f9 01       	movw	r30, r18
 238:	20 81       	ld	r18, Z
 23a:	23 60       	ori	r18, 0x03	; 3
 23c:	fc 01       	movw	r30, r24
 23e:	20 83       	st	Z, r18
	TCCR0A |= (1 << WGM01); //Aktiviere CTC Modus
 240:	84 e4       	ldi	r24, 0x44	; 68
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	24 e4       	ldi	r18, 0x44	; 68
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	f9 01       	movw	r30, r18
 24a:	20 81       	ld	r18, Z
 24c:	22 60       	ori	r18, 0x02	; 2
 24e:	fc 01       	movw	r30, r24
 250:	20 83       	st	Z, r18
	OCR0A = 249; //Erste Ladewert -> ein Aufruf je ms
 252:	87 e4       	ldi	r24, 0x47	; 71
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	29 ef       	ldi	r18, 0xF9	; 249
 258:	fc 01       	movw	r30, r24
 25a:	20 83       	st	Z, r18
	TIMSK0 |= (1<<OCIE0A); //Interrupt des OCR aktiv
 25c:	8e e6       	ldi	r24, 0x6E	; 110
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	2e e6       	ldi	r18, 0x6E	; 110
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	f9 01       	movw	r30, r18
 266:	20 81       	ld	r18, Z
 268:	22 60       	ori	r18, 0x02	; 2
 26a:	fc 01       	movw	r30, r24
 26c:	20 83       	st	Z, r18
	
}
 26e:	00 00       	nop
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <main>:

int main (void)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	cd b7       	in	r28, 0x3d	; 61
 27c:	de b7       	in	r29, 0x3e	; 62
	initTimer0();
 27e:	0e 94 13 01 	call	0x226	; 0x226 <initTimer0>
	initTimer1 ();
 282:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <initTimer1>
	S1_DDR = S1_DDR | (1<<S1_BIT);
 286:	8a e2       	ldi	r24, 0x2A	; 42
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	2a e2       	ldi	r18, 0x2A	; 42
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	f9 01       	movw	r30, r18
 290:	20 81       	ld	r18, Z
 292:	20 64       	ori	r18, 0x40	; 64
 294:	fc 01       	movw	r30, r24
 296:	20 83       	st	Z, r18
	sei();
 298:	78 94       	sei
			_delay_ms( 18 );			// 18ms aus
		}
		// Dies ergibt eine Folge von 50 Pulsen, 
		// f=50Hz, Pulsbreite 2ms, Gesamtdauer: 1s
	*/
	if (t_ms < 1000)
 29a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 29e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2a2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2a6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2aa:	88 3e       	cpi	r24, 0xE8	; 232
 2ac:	93 40       	sbci	r25, 0x03	; 3
 2ae:	a1 05       	cpc	r26, r1
 2b0:	b1 05       	cpc	r27, r1
 2b2:	38 f4       	brcc	.+14     	; 0x2c2 <main+0x4c>
	{
		einInUs = 1000;
 2b4:	88 ee       	ldi	r24, 0xE8	; 232
 2b6:	93 e0       	ldi	r25, 0x03	; 3
 2b8:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <einInUs+0x1>
 2bc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <einInUs>
 2c0:	13 c0       	rjmp	.+38     	; 0x2e8 <main+0x72>
	}
	else if (t_ms < 2000)
 2c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2c6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2ca:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2ce:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2d2:	80 3d       	cpi	r24, 0xD0	; 208
 2d4:	97 40       	sbci	r25, 0x07	; 7
 2d6:	a1 05       	cpc	r26, r1
 2d8:	b1 05       	cpc	r27, r1
 2da:	30 f4       	brcc	.+12     	; 0x2e8 <main+0x72>
		einInUs = 2000;
 2dc:	80 ed       	ldi	r24, 0xD0	; 208
 2de:	97 e0       	ldi	r25, 0x07	; 7
 2e0:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <einInUs+0x1>
 2e4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <einInUs>
	if (t_ms > 2000)
 2e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ec:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2f0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <_edata+0x2>
 2f4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <_edata+0x3>
 2f8:	81 3d       	cpi	r24, 0xD1	; 209
 2fa:	97 40       	sbci	r25, 0x07	; 7
 2fc:	a1 05       	cpc	r26, r1
 2fe:	b1 05       	cpc	r27, r1
 300:	60 f2       	brcs	.-104    	; 0x29a <main+0x24>
		t_ms = 0;	
 302:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 306:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 30a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 30e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
	// Das Servo ist eine Sekunde lang auf Linksanschlag,
	// dann eine Sekunde auf Rechtsanschlag.

	}
 312:	c3 cf       	rjmp	.-122    	; 0x29a <main+0x24>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
