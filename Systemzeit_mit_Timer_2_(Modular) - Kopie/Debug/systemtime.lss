
systemtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000314  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000344  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000073a  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000066e  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000027f  00000000  00000000  00001164  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  000013e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003a1  00000000  00000000  000014e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000224  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001aa9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 3c 01 	call	0x278	; 0x278 <main>
  88:	0c 94 4e 01 	jmp	0x29c	; 0x29c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:

volatile uint64_t t2_soft;		// Z‰hlt 0.5us-Ticks


ISR( TIMER2_OVF_vect )
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	t2_soft += 256;
  c4:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <_edata>
  c8:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <_edata+0x1>
  cc:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <_edata+0x2>
  d0:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <_edata+0x3>
  d4:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <_edata+0x4>
  d8:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <_edata+0x5>
  dc:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
  e0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
  e4:	2a 2d       	mov	r18, r10
  e6:	3b 2d       	mov	r19, r11
  e8:	4c 2d       	mov	r20, r12
  ea:	5d 2d       	mov	r21, r13
  ec:	6e 2d       	mov	r22, r14
  ee:	7f 2d       	mov	r23, r15
  f0:	80 2f       	mov	r24, r16
  f2:	91 2f       	mov	r25, r17
  f4:	3f 5f       	subi	r19, 0xFF	; 255
  f6:	4f 4f       	sbci	r20, 0xFF	; 255
  f8:	5f 4f       	sbci	r21, 0xFF	; 255
  fa:	6f 4f       	sbci	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	8f 4f       	sbci	r24, 0xFF	; 255
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	a2 2e       	mov	r10, r18
 104:	b3 2e       	mov	r11, r19
 106:	c4 2e       	mov	r12, r20
 108:	d5 2e       	mov	r13, r21
 10a:	e6 2e       	mov	r14, r22
 10c:	f7 2e       	mov	r15, r23
 10e:	08 2f       	mov	r16, r24
 110:	19 2f       	mov	r17, r25
 112:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <_edata>
 116:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <_edata+0x1>
 11a:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <_edata+0x2>
 11e:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <_edata+0x3>
 122:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_edata+0x4>
 126:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_edata+0x5>
 12a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <_edata+0x6>
 12e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <_edata+0x7>
}
 132:	00 00       	nop
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
 154:	bf 90       	pop	r11
 156:	af 90       	pop	r10
 158:	0f 90       	pop	r0
 15a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <t2_init>:


void t2_init( void )
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	t2_soft = 0;
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 170:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 174:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 178:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 17c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
 180:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>
 184:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>
 188:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>
	TCCR2B = 1<<CS21;		// mode 0, prescaler 8
 18c:	81 eb       	ldi	r24, 0xB1	; 177
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	TIMSK2 |= 1<<TOIE2;		// enable overflow interrupt
 196:	80 e7       	ldi	r24, 0x70	; 112
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	20 e7       	ldi	r18, 0x70	; 112
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	21 60       	ori	r18, 0x01	; 1
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
}
 1a8:	00 00       	nop
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <get_ticks>:


u32 get_ticks( void )        // read T2 as 32 bit timer
{
 1b0:	ef 92       	push	r14
 1b2:	ff 92       	push	r15
 1b4:	0f 93       	push	r16
 1b6:	1f 93       	push	r17
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <get_ticks+0xe>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <get_ticks+0x10>
 1c0:	1f 92       	push	r1
 1c2:	cd b7       	in	r28, 0x3d	; 61
 1c4:	de b7       	in	r29, 0x3e	; 62
	u32 val;
	u8 tifr;

	cli();					// CLI heiﬂt Clear I-Bit, Interrupts global sperren
 1c6:	f8 94       	cli
							// darf nur wahnsinnig kurz gesperrt werden.
	val = t2_soft + TCNT2;	// val enth‰lt den Zeitstempel
 1c8:	82 eb       	ldi	r24, 0xB2	; 178
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	fc 01       	movw	r30, r24
 1ce:	80 81       	ld	r24, Z
 1d0:	e8 2e       	mov	r14, r24
 1d2:	f1 2c       	mov	r15, r1
 1d4:	00 e0       	ldi	r16, 0x00	; 0
 1d6:	10 e0       	ldi	r17, 0x00	; 0
 1d8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 1dc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 1e0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
 1e4:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
 1e8:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_edata+0x4>
 1ec:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_edata+0x5>
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 1f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_edata+0x7>
 1f8:	da 01       	movw	r26, r20
 1fa:	c9 01       	movw	r24, r18
 1fc:	8e 0d       	add	r24, r14
 1fe:	9f 1d       	adc	r25, r15
 200:	a0 1f       	adc	r26, r16
 202:	b1 1f       	adc	r27, r17
 204:	89 83       	std	Y+1, r24	; 0x01
 206:	9a 83       	std	Y+2, r25	; 0x02
 208:	ab 83       	std	Y+3, r26	; 0x03
 20a:	bc 83       	std	Y+4, r27	; 0x04
	tifr = TIFR2;			// read interrupt flags
 20c:	87 e3       	ldi	r24, 0x37	; 55
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	fc 01       	movw	r30, r24
 212:	80 81       	ld	r24, Z
 214:	8d 83       	std	Y+5, r24	; 0x05
	sei();					// Interrupts wieder an
 216:	78 94       	sei
	if( (tifr & (1<<TOV2) ) && !(val & 0x80) ) // overflow prior reading TCNT2 ?
 218:	8d 81       	ldd	r24, Y+5	; 0x05
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	81 70       	andi	r24, 0x01	; 1
 220:	99 27       	eor	r25, r25
 222:	89 2b       	or	r24, r25
 224:	b9 f0       	breq	.+46     	; 0x254 <get_ticks+0xa4>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	9a 81       	ldd	r25, Y+2	; 0x02
 22a:	ab 81       	ldd	r26, Y+3	; 0x03
 22c:	bc 81       	ldd	r27, Y+4	; 0x04
 22e:	80 78       	andi	r24, 0x80	; 128
 230:	99 27       	eor	r25, r25
 232:	aa 27       	eor	r26, r26
 234:	bb 27       	eor	r27, r27
 236:	89 2b       	or	r24, r25
 238:	8a 2b       	or	r24, r26
 23a:	8b 2b       	or	r24, r27
 23c:	59 f4       	brne	.+22     	; 0x254 <get_ticks+0xa4>
		val += 256;         // then add overflow
 23e:	89 81       	ldd	r24, Y+1	; 0x01
 240:	9a 81       	ldd	r25, Y+2	; 0x02
 242:	ab 81       	ldd	r26, Y+3	; 0x03
 244:	bc 81       	ldd	r27, Y+4	; 0x04
 246:	9f 5f       	subi	r25, 0xFF	; 255
 248:	af 4f       	sbci	r26, 0xFF	; 255
 24a:	bf 4f       	sbci	r27, 0xFF	; 255
 24c:	89 83       	std	Y+1, r24	; 0x01
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	ab 83       	std	Y+3, r26	; 0x03
 252:	bc 83       	std	Y+4, r27	; 0x04

	return val;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	ab 81       	ldd	r26, Y+3	; 0x03
 25a:	bc 81       	ldd	r27, Y+4	; 0x04
}
 25c:	bc 01       	movw	r22, r24
 25e:	cd 01       	movw	r24, r26
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <main>:


int main( void )
{
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	00 d0       	rcall	.+0      	; 0x27e <main+0x6>
 27e:	00 d0       	rcall	.+0      	; 0x280 <main+0x8>
 280:	cd b7       	in	r28, 0x3d	; 61
 282:	de b7       	in	r29, 0x3e	; 62
	u32 timerticks;

	t2_init();
 284:	0e 94 b2 00 	call	0x164	; 0x164 <t2_init>
	sei();
 288:	78 94       	sei

	for(;;){
		timerticks = get_ticks();
 28a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <get_ticks>
 28e:	dc 01       	movw	r26, r24
 290:	cb 01       	movw	r24, r22
 292:	89 83       	std	Y+1, r24	; 0x01
 294:	9a 83       	std	Y+2, r25	; 0x02
 296:	ab 83       	std	Y+3, r26	; 0x03
 298:	bc 83       	std	Y+4, r27	; 0x04
	}
 29a:	f7 cf       	rjmp	.-18     	; 0x28a <main+0x12>

0000029c <_exit>:
 29c:	f8 94       	cli

0000029e <__stop_program>:
 29e:	ff cf       	rjmp	.-2      	; 0x29e <__stop_program>
