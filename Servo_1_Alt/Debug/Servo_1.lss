
Servo_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000820  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006b6  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d3  00000000  00000000  000010ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001390  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a5  00000000  00000000  000013b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000140  00000000  00000000  00001759  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#define S1_DDR		DDRB
#define S1_BIT		4

int main (void)
{
	S1_DDR = S1_DDR | (1<<S1_BIT);
  80:	84 b1       	in	r24, 0x04	; 4
  82:	80 61       	ori	r24, 0x10	; 16
  84:	84 b9       	out	0x04, r24	; 4

	while( 1 ) {
	//basis 20ms
		for(uint16_t i = 0; i<50; i++)	//20 * 50 = 1 s 
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	17 c0       	rjmp	.+46     	; 0xba <main+0x3a>
		{	S1_PORT |= (1<<S1_BIT);
  8c:	85 b1       	in	r24, 0x05	; 5
  8e:	80 61       	ori	r24, 0x10	; 16
  90:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	8f e9       	ldi	r24, 0x9F	; 159
  94:	9f e0       	ldi	r25, 0x0F	; 15
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x16>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
			_delay_us( 1000 );	//	0°
			S1_PORT &= ~(1<<S1_BIT);
  9e:	85 b1       	in	r24, 0x05	; 5
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	9f e7       	ldi	r25, 0x7F	; 127
  a6:	4d ee       	ldi	r20, 0xED	; 237
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	91 50       	subi	r25, 0x01	; 1
  ac:	40 40       	sbci	r20, 0x00	; 0
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
{
	S1_DDR = S1_DDR | (1<<S1_BIT);

	while( 1 ) {
	//basis 20ms
		for(uint16_t i = 0; i<50; i++)	//20 * 50 = 1 s 
  b6:	2f 5f       	subi	r18, 0xFF	; 255
  b8:	3f 4f       	sbci	r19, 0xFF	; 255
  ba:	22 33       	cpi	r18, 0x32	; 50
  bc:	31 05       	cpc	r19, r1
  be:	30 f3       	brcs	.-52     	; 0x8c <main+0xc>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	17 c0       	rjmp	.+46     	; 0xf4 <main+0x74>
			S1_PORT &= ~(1<<S1_BIT);
			_delay_ms( 19 );
		}

		for(uint16_t i = 0; i<50; i++)	//10%
		{	S1_PORT |= (1<<S1_BIT);
  c6:	85 b1       	in	r24, 0x05	; 5
  c8:	80 61       	ori	r24, 0x10	; 16
  ca:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f e6       	ldi	r24, 0x6F	; 111
  ce:	97 e1       	ldi	r25, 0x17	; 23
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <main+0x50>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x56>
  d6:	00 00       	nop
			_delay_us( 1500 );		//180°
			S1_PORT &= ~(1<<S1_BIT);
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8f 7e       	andi	r24, 0xEF	; 239
  dc:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	9f e3       	ldi	r25, 0x3F	; 63
  e0:	47 ee       	ldi	r20, 0xE7	; 231
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	91 50       	subi	r25, 0x01	; 1
  e6:	40 40       	sbci	r20, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x64>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x6e>
  ee:	00 00       	nop
			_delay_us( 1000 );	//	0°
			S1_PORT &= ~(1<<S1_BIT);
			_delay_ms( 19 );
		}

		for(uint16_t i = 0; i<50; i++)	//10%
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	22 33       	cpi	r18, 0x32	; 50
  f6:	31 05       	cpc	r19, r1
  f8:	30 f3       	brcs	.-52     	; 0xc6 <main+0x46>
  fa:	c5 cf       	rjmp	.-118    	; 0x86 <main+0x6>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
