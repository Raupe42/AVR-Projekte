
LCD_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00002b94  00002c28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080012e  0080012e  00002c56  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002c56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002cb4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00002cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100d  00000000  00000000  00002d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079f  00000000  00000000  00003d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000091c  00000000  00000000  00004518  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  00004e34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  000050cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005e6  00000000  00000000  00005534  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00005b1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__ctors_end>
       4:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       8:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
       c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      10:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      14:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      18:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      1c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      20:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      24:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_9>
      28:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      2c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      30:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      34:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      38:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      3c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      40:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      44:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      48:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      4c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      50:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      58:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      5c:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      60:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>
      64:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6e 61       	ori	r22, 0x1E	; 30
      6a:	6e 00       	.word	0x006e	; ????

0000006c <__c.2332>:
      6c:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      7c:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
      8c:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
      9c:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
      ac:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
      bc:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
      cc:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
      dc:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
      ec:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
      fc:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     10c:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     11c:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     12c:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     13c:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     14c:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     15c:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

0000016a <__ctors_end>:
     16a:	11 24       	eor	r1, r1
     16c:	1f be       	out	0x3f, r1	; 63
     16e:	cf ef       	ldi	r28, 0xFF	; 255
     170:	d8 e0       	ldi	r29, 0x08	; 8
     172:	de bf       	out	0x3e, r29	; 62
     174:	cd bf       	out	0x3d, r28	; 61

00000176 <__do_copy_data>:
     176:	11 e0       	ldi	r17, 0x01	; 1
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b1 e0       	ldi	r27, 0x01	; 1
     17c:	e4 e9       	ldi	r30, 0x94	; 148
     17e:	fb e2       	ldi	r31, 0x2B	; 43
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x10>
     182:	05 90       	lpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	ae 32       	cpi	r26, 0x2E	; 46
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0xc>

0000018c <__do_clear_bss>:
     18c:	21 e0       	ldi	r18, 0x01	; 1
     18e:	ae e2       	ldi	r26, 0x2E	; 46
     190:	b1 e0       	ldi	r27, 0x01	; 1
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	a6 33       	cpi	r26, 0x36	; 54
     198:	b2 07       	cpc	r27, r18
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 42 0c 	call	0x1884	; 0x1884 <main>
     1a0:	0c 94 c8 15 	jmp	0x2b90	; 0x2b90 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a8 <RS>:

//------------   Low-Level-Routinen ---------------------------------

// RS-Signal kontrollieren:
void RS(uint8_t x)
{	if( x ) PORT_RS |= (1<<RS_);	// Daten-Register wählen
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	1f 92       	push	r1
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	89 83       	std	Y+1, r24	; 0x01
     1b4:	89 81       	ldd	r24, Y+1	; 0x01
     1b6:	88 23       	and	r24, r24
     1b8:	51 f0       	breq	.+20     	; 0x1ce <RS+0x26>
     1ba:	85 e2       	ldi	r24, 0x25	; 37
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	25 e2       	ldi	r18, 0x25	; 37
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	f9 01       	movw	r30, r18
     1c4:	20 81       	ld	r18, Z
     1c6:	20 61       	ori	r18, 0x10	; 16
     1c8:	fc 01       	movw	r30, r24
     1ca:	20 83       	st	Z, r18
	else	PORT_RS &= ~(1<<RS_);	// Befehls-Register wählen
}
     1cc:	09 c0       	rjmp	.+18     	; 0x1e0 <RS+0x38>
//------------   Low-Level-Routinen ---------------------------------

// RS-Signal kontrollieren:
void RS(uint8_t x)
{	if( x ) PORT_RS |= (1<<RS_);	// Daten-Register wählen
	else	PORT_RS &= ~(1<<RS_);	// Befehls-Register wählen
     1ce:	85 e2       	ldi	r24, 0x25	; 37
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	25 e2       	ldi	r18, 0x25	; 37
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	f9 01       	movw	r30, r18
     1d8:	20 81       	ld	r18, Z
     1da:	2f 7e       	andi	r18, 0xEF	; 239
     1dc:	fc 01       	movw	r30, r24
     1de:	20 83       	st	Z, r18
}
     1e0:	00 00       	nop
     1e2:	0f 90       	pop	r0
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	08 95       	ret

000001ea <E_Pulse>:

// Enable-Puls erzeugen:
void E_Pulse(void)
{	PORT_E |= (1<<E_);
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	cd b7       	in	r28, 0x3d	; 61
     1f0:	de b7       	in	r29, 0x3e	; 62
     1f2:	a0 97       	sbiw	r28, 0x20	; 32
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	f8 94       	cli
     1f8:	de bf       	out	0x3e, r29	; 62
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	cd bf       	out	0x3d, r28	; 61
     1fe:	85 e2       	ldi	r24, 0x25	; 37
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	25 e2       	ldi	r18, 0x25	; 37
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	f9 01       	movw	r30, r18
     208:	20 81       	ld	r18, Z
     20a:	28 60       	ori	r18, 0x08	; 8
     20c:	fc 01       	movw	r30, r24
     20e:	20 83       	st	Z, r18
     210:	80 e0       	ldi	r24, 0x00	; 0
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	a0 e8       	ldi	r26, 0x80	; 128
     216:	bf e3       	ldi	r27, 0x3F	; 63
     218:	89 83       	std	Y+1, r24	; 0x01
     21a:	9a 83       	std	Y+2, r25	; 0x02
     21c:	ab 83       	std	Y+3, r26	; 0x03
     21e:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     220:	2b ea       	ldi	r18, 0xAB	; 171
     222:	3a ea       	ldi	r19, 0xAA	; 170
     224:	4a ea       	ldi	r20, 0xAA	; 170
     226:	50 e4       	ldi	r21, 0x40	; 64
     228:	69 81       	ldd	r22, Y+1	; 0x01
     22a:	7a 81       	ldd	r23, Y+2	; 0x02
     22c:	8b 81       	ldd	r24, Y+3	; 0x03
     22e:	9c 81       	ldd	r25, Y+4	; 0x04
     230:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	8d 83       	std	Y+5, r24	; 0x05
     23a:	9e 83       	std	Y+6, r25	; 0x06
     23c:	af 83       	std	Y+7, r26	; 0x07
     23e:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e8       	ldi	r20, 0x80	; 128
     246:	50 e4       	ldi	r21, 0x40	; 64
     248:	69 81       	ldd	r22, Y+1	; 0x01
     24a:	7a 81       	ldd	r23, Y+2	; 0x02
     24c:	8b 81       	ldd	r24, Y+3	; 0x03
     24e:	9c 81       	ldd	r25, Y+4	; 0x04
     250:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     254:	dc 01       	movw	r26, r24
     256:	cb 01       	movw	r24, r22
     258:	89 87       	std	Y+9, r24	; 0x09
     25a:	9a 87       	std	Y+10, r25	; 0x0a
     25c:	ab 87       	std	Y+11, r26	; 0x0b
     25e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e8       	ldi	r20, 0x80	; 128
     266:	5f e3       	ldi	r21, 0x3F	; 63
     268:	6d 81       	ldd	r22, Y+5	; 0x05
     26a:	7e 81       	ldd	r23, Y+6	; 0x06
     26c:	8f 81       	ldd	r24, Y+7	; 0x07
     26e:	98 85       	ldd	r25, Y+8	; 0x08
     270:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     274:	88 23       	and	r24, r24
     276:	1c f4       	brge	.+6      	; 0x27e <E_Pulse+0x94>
		__ticks = 1;
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	8d 87       	std	Y+13, r24	; 0x0d
     27c:	b2 c0       	rjmp	.+356    	; 0x3e2 <E_Pulse+0x1f8>
	else if (__tmp2 > 65535)
     27e:	20 e0       	ldi	r18, 0x00	; 0
     280:	3f ef       	ldi	r19, 0xFF	; 255
     282:	4f e7       	ldi	r20, 0x7F	; 127
     284:	57 e4       	ldi	r21, 0x47	; 71
     286:	69 85       	ldd	r22, Y+9	; 0x09
     288:	7a 85       	ldd	r23, Y+10	; 0x0a
     28a:	8b 85       	ldd	r24, Y+11	; 0x0b
     28c:	9c 85       	ldd	r25, Y+12	; 0x0c
     28e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     292:	18 16       	cp	r1, r24
     294:	0c f0       	brlt	.+2      	; 0x298 <E_Pulse+0xae>
     296:	7b c0       	rjmp	.+246    	; 0x38e <E_Pulse+0x1a4>
	{
		_delay_ms(__us / 1000.0);
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	4a e7       	ldi	r20, 0x7A	; 122
     29e:	54 e4       	ldi	r21, 0x44	; 68
     2a0:	69 81       	ldd	r22, Y+1	; 0x01
     2a2:	7a 81       	ldd	r23, Y+2	; 0x02
     2a4:	8b 81       	ldd	r24, Y+3	; 0x03
     2a6:	9c 81       	ldd	r25, Y+4	; 0x04
     2a8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
     2ac:	dc 01       	movw	r26, r24
     2ae:	cb 01       	movw	r24, r22
     2b0:	8e 87       	std	Y+14, r24	; 0x0e
     2b2:	9f 87       	std	Y+15, r25	; 0x0f
     2b4:	a8 8b       	std	Y+16, r26	; 0x10
     2b6:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	4a e7       	ldi	r20, 0x7A	; 122
     2be:	55 e4       	ldi	r21, 0x45	; 69
     2c0:	6e 85       	ldd	r22, Y+14	; 0x0e
     2c2:	7f 85       	ldd	r23, Y+15	; 0x0f
     2c4:	88 89       	ldd	r24, Y+16	; 0x10
     2c6:	99 89       	ldd	r25, Y+17	; 0x11
     2c8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     2cc:	dc 01       	movw	r26, r24
     2ce:	cb 01       	movw	r24, r22
     2d0:	8a 8b       	std	Y+18, r24	; 0x12
     2d2:	9b 8b       	std	Y+19, r25	; 0x13
     2d4:	ac 8b       	std	Y+20, r26	; 0x14
     2d6:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     2d8:	20 e0       	ldi	r18, 0x00	; 0
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	40 e8       	ldi	r20, 0x80	; 128
     2de:	5f e3       	ldi	r21, 0x3F	; 63
     2e0:	6a 89       	ldd	r22, Y+18	; 0x12
     2e2:	7b 89       	ldd	r23, Y+19	; 0x13
     2e4:	8c 89       	ldd	r24, Y+20	; 0x14
     2e6:	9d 89       	ldd	r25, Y+21	; 0x15
     2e8:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     2ec:	88 23       	and	r24, r24
     2ee:	2c f4       	brge	.+10     	; 0x2fa <E_Pulse+0x110>
		__ticks = 1;
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	9f 8b       	std	Y+23, r25	; 0x17
     2f6:	8e 8b       	std	Y+22, r24	; 0x16
     2f8:	3f c0       	rjmp	.+126    	; 0x378 <E_Pulse+0x18e>
	else if (__tmp > 65535)
     2fa:	20 e0       	ldi	r18, 0x00	; 0
     2fc:	3f ef       	ldi	r19, 0xFF	; 255
     2fe:	4f e7       	ldi	r20, 0x7F	; 127
     300:	57 e4       	ldi	r21, 0x47	; 71
     302:	6a 89       	ldd	r22, Y+18	; 0x12
     304:	7b 89       	ldd	r23, Y+19	; 0x13
     306:	8c 89       	ldd	r24, Y+20	; 0x14
     308:	9d 89       	ldd	r25, Y+21	; 0x15
     30a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     30e:	18 16       	cp	r1, r24
     310:	4c f5       	brge	.+82     	; 0x364 <E_Pulse+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     312:	20 e0       	ldi	r18, 0x00	; 0
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	40 e2       	ldi	r20, 0x20	; 32
     318:	51 e4       	ldi	r21, 0x41	; 65
     31a:	6e 85       	ldd	r22, Y+14	; 0x0e
     31c:	7f 85       	ldd	r23, Y+15	; 0x0f
     31e:	88 89       	ldd	r24, Y+16	; 0x10
     320:	99 89       	ldd	r25, Y+17	; 0x11
     322:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     326:	dc 01       	movw	r26, r24
     328:	cb 01       	movw	r24, r22
     32a:	bc 01       	movw	r22, r24
     32c:	cd 01       	movw	r24, r26
     32e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	9f 8b       	std	Y+23, r25	; 0x17
     338:	8e 8b       	std	Y+22, r24	; 0x16
     33a:	0f c0       	rjmp	.+30     	; 0x35a <E_Pulse+0x170>
     33c:	80 e9       	ldi	r24, 0x90	; 144
     33e:	91 e0       	ldi	r25, 0x01	; 1
     340:	99 8f       	std	Y+25, r25	; 0x19
     342:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     344:	88 8d       	ldd	r24, Y+24	; 0x18
     346:	99 8d       	ldd	r25, Y+25	; 0x19
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	f1 f7       	brne	.-4      	; 0x348 <E_Pulse+0x15e>
     34c:	99 8f       	std	Y+25, r25	; 0x19
     34e:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     350:	8e 89       	ldd	r24, Y+22	; 0x16
     352:	9f 89       	ldd	r25, Y+23	; 0x17
     354:	01 97       	sbiw	r24, 0x01	; 1
     356:	9f 8b       	std	Y+23, r25	; 0x17
     358:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     35a:	8e 89       	ldd	r24, Y+22	; 0x16
     35c:	9f 89       	ldd	r25, Y+23	; 0x17
     35e:	89 2b       	or	r24, r25
     360:	69 f7       	brne	.-38     	; 0x33c <E_Pulse+0x152>
     362:	3f c0       	rjmp	.+126    	; 0x3e2 <E_Pulse+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     364:	6a 89       	ldd	r22, Y+18	; 0x12
     366:	7b 89       	ldd	r23, Y+19	; 0x13
     368:	8c 89       	ldd	r24, Y+20	; 0x14
     36a:	9d 89       	ldd	r25, Y+21	; 0x15
     36c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     370:	dc 01       	movw	r26, r24
     372:	cb 01       	movw	r24, r22
     374:	9f 8b       	std	Y+23, r25	; 0x17
     376:	8e 8b       	std	Y+22, r24	; 0x16
     378:	8e 89       	ldd	r24, Y+22	; 0x16
     37a:	9f 89       	ldd	r25, Y+23	; 0x17
     37c:	9b 8f       	std	Y+27, r25	; 0x1b
     37e:	8a 8f       	std	Y+26, r24	; 0x1a
     380:	8a 8d       	ldd	r24, Y+26	; 0x1a
     382:	9b 8d       	ldd	r25, Y+27	; 0x1b
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <E_Pulse+0x19a>
     388:	9b 8f       	std	Y+27, r25	; 0x1b
     38a:	8a 8f       	std	Y+26, r24	; 0x1a
     38c:	2a c0       	rjmp	.+84     	; 0x3e2 <E_Pulse+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	4f e7       	ldi	r20, 0x7F	; 127
     394:	53 e4       	ldi	r21, 0x43	; 67
     396:	6d 81       	ldd	r22, Y+5	; 0x05
     398:	7e 81       	ldd	r23, Y+6	; 0x06
     39a:	8f 81       	ldd	r24, Y+7	; 0x07
     39c:	98 85       	ldd	r25, Y+8	; 0x08
     39e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	ac f4       	brge	.+42     	; 0x3d0 <E_Pulse+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     3a6:	69 85       	ldd	r22, Y+9	; 0x09
     3a8:	7a 85       	ldd	r23, Y+10	; 0x0a
     3aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     3ac:	9c 85       	ldd	r25, Y+12	; 0x0c
     3ae:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     3b2:	dc 01       	movw	r26, r24
     3b4:	cb 01       	movw	r24, r22
     3b6:	9d 8f       	std	Y+29, r25	; 0x1d
     3b8:	8c 8f       	std	Y+28, r24	; 0x1c
     3ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
     3bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
     3be:	9f 8f       	std	Y+31, r25	; 0x1f
     3c0:	8e 8f       	std	Y+30, r24	; 0x1e
     3c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     3c6:	01 97       	sbiw	r24, 0x01	; 1
     3c8:	f1 f7       	brne	.-4      	; 0x3c6 <E_Pulse+0x1dc>
     3ca:	9f 8f       	std	Y+31, r25	; 0x1f
     3cc:	8e 8f       	std	Y+30, r24	; 0x1e
     3ce:	0f c0       	rjmp	.+30     	; 0x3ee <E_Pulse+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     3d0:	6d 81       	ldd	r22, Y+5	; 0x05
     3d2:	7e 81       	ldd	r23, Y+6	; 0x06
     3d4:	8f 81       	ldd	r24, Y+7	; 0x07
     3d6:	98 85       	ldd	r25, Y+8	; 0x08
     3d8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     3dc:	dc 01       	movw	r26, r24
     3de:	cb 01       	movw	r24, r22
     3e0:	8d 87       	std	Y+13, r24	; 0x0d
     3e2:	8d 85       	ldd	r24, Y+13	; 0x0d
     3e4:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     3e6:	88 a1       	ldd	r24, Y+32	; 0x20
     3e8:	8a 95       	dec	r24
     3ea:	f1 f7       	brne	.-4      	; 0x3e8 <E_Pulse+0x1fe>
     3ec:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us( 1 );			// 1us
	PORT_E &= ~(1<<E_);		// Übernahme mit fallender Flanke
     3ee:	85 e2       	ldi	r24, 0x25	; 37
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	25 e2       	ldi	r18, 0x25	; 37
     3f4:	30 e0       	ldi	r19, 0x00	; 0
     3f6:	f9 01       	movw	r30, r18
     3f8:	20 81       	ld	r18, Z
     3fa:	27 7f       	andi	r18, 0xF7	; 247
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
}
     400:	00 00       	nop
     402:	a0 96       	adiw	r28, 0x20	; 32
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	de bf       	out	0x3e, r29	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	cd bf       	out	0x3d, r28	; 61
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <lcd_nibble>:

// Halb-Byte übertragen
static void lcd_nibble( uint8_t d )
{	// Das obere Nibble von d wird auf den 4-Bit-Bus abgebildet:
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
	if(d & (1<<4)) PORT_DAT |= (1<<D4_); else PORT_DAT &= ~(1<<D4_);
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	80 71       	andi	r24, 0x10	; 16
     428:	99 27       	eor	r25, r25
     42a:	89 2b       	or	r24, r25
     42c:	51 f0       	breq	.+20     	; 0x442 <lcd_nibble+0x2e>
     42e:	8b e2       	ldi	r24, 0x2B	; 43
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	2b e2       	ldi	r18, 0x2B	; 43
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	f9 01       	movw	r30, r18
     438:	20 81       	ld	r18, Z
     43a:	20 62       	ori	r18, 0x20	; 32
     43c:	fc 01       	movw	r30, r24
     43e:	20 83       	st	Z, r18
     440:	09 c0       	rjmp	.+18     	; 0x454 <lcd_nibble+0x40>
     442:	8b e2       	ldi	r24, 0x2B	; 43
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	2b e2       	ldi	r18, 0x2B	; 43
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	f9 01       	movw	r30, r18
     44c:	20 81       	ld	r18, Z
     44e:	2f 7d       	andi	r18, 0xDF	; 223
     450:	fc 01       	movw	r30, r24
     452:	20 83       	st	Z, r18
	if(d & (1<<5)) PORT_DAT |= (1<<D5_); else PORT_DAT &= ~(1<<D5_);
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	80 72       	andi	r24, 0x20	; 32
     45c:	99 27       	eor	r25, r25
     45e:	89 2b       	or	r24, r25
     460:	51 f0       	breq	.+20     	; 0x476 <lcd_nibble+0x62>
     462:	8b e2       	ldi	r24, 0x2B	; 43
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	2b e2       	ldi	r18, 0x2B	; 43
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	20 61       	ori	r18, 0x10	; 16
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
     474:	09 c0       	rjmp	.+18     	; 0x488 <lcd_nibble+0x74>
     476:	8b e2       	ldi	r24, 0x2B	; 43
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	2b e2       	ldi	r18, 0x2B	; 43
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	f9 01       	movw	r30, r18
     480:	20 81       	ld	r18, Z
     482:	2f 7e       	andi	r18, 0xEF	; 239
     484:	fc 01       	movw	r30, r24
     486:	20 83       	st	Z, r18
	if(d & (1<<6)) PORT_DAT |= (1<<D6_); else PORT_DAT &= ~(1<<D6_);
     488:	89 81       	ldd	r24, Y+1	; 0x01
     48a:	88 2f       	mov	r24, r24
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	80 74       	andi	r24, 0x40	; 64
     490:	99 27       	eor	r25, r25
     492:	89 2b       	or	r24, r25
     494:	51 f0       	breq	.+20     	; 0x4aa <lcd_nibble+0x96>
     496:	8b e2       	ldi	r24, 0x2B	; 43
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	2b e2       	ldi	r18, 0x2B	; 43
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	f9 01       	movw	r30, r18
     4a0:	20 81       	ld	r18, Z
     4a2:	28 60       	ori	r18, 0x08	; 8
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
     4a8:	09 c0       	rjmp	.+18     	; 0x4bc <lcd_nibble+0xa8>
     4aa:	8b e2       	ldi	r24, 0x2B	; 43
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	2b e2       	ldi	r18, 0x2B	; 43
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	f9 01       	movw	r30, r18
     4b4:	20 81       	ld	r18, Z
     4b6:	27 7f       	andi	r18, 0xF7	; 247
     4b8:	fc 01       	movw	r30, r24
     4ba:	20 83       	st	Z, r18
	if(d & (1<<7)) PORT_DAT |= (1<<D7_); else PORT_DAT &= ~(1<<D7_);
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	88 23       	and	r24, r24
     4c0:	54 f4       	brge	.+20     	; 0x4d6 <lcd_nibble+0xc2>
     4c2:	8b e2       	ldi	r24, 0x2B	; 43
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	2b e2       	ldi	r18, 0x2B	; 43
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	f9 01       	movw	r30, r18
     4cc:	20 81       	ld	r18, Z
     4ce:	24 60       	ori	r18, 0x04	; 4
     4d0:	fc 01       	movw	r30, r24
     4d2:	20 83       	st	Z, r18
     4d4:	09 c0       	rjmp	.+18     	; 0x4e8 <lcd_nibble+0xd4>
     4d6:	8b e2       	ldi	r24, 0x2B	; 43
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	2b e2       	ldi	r18, 0x2B	; 43
     4dc:	30 e0       	ldi	r19, 0x00	; 0
     4de:	f9 01       	movw	r30, r18
     4e0:	20 81       	ld	r18, Z
     4e2:	2b 7f       	andi	r18, 0xFB	; 251
     4e4:	fc 01       	movw	r30, r24
     4e6:	20 83       	st	Z, r18
	E_Pulse();
     4e8:	0e 94 f5 00 	call	0x1ea	; 0x1ea <E_Pulse>
}
     4ec:	00 00       	nop
     4ee:	0f 90       	pop	r0
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	08 95       	ret

000004f6 <lcd_byte>:

// Befehls- oder Daten-Byte übertragen
static void lcd_byte( uint8_t d )
{	lcd_nibble( d );		// High nibble
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	a1 97       	sbiw	r28, 0x21	; 33
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	f8 94       	cli
     504:	de bf       	out	0x3e, r29	; 62
     506:	0f be       	out	0x3f, r0	; 63
     508:	cd bf       	out	0x3d, r28	; 61
     50a:	89 a3       	std	Y+33, r24	; 0x21
     50c:	89 a1       	ldd	r24, Y+33	; 0x21
     50e:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
	lcd_nibble( d<<4 );		// Low nibble	
     512:	89 a1       	ldd	r24, Y+33	; 0x21
     514:	82 95       	swap	r24
     516:	80 7f       	andi	r24, 0xF0	; 240
     518:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	a4 e3       	ldi	r26, 0x34	; 52
     522:	b2 e4       	ldi	r27, 0x42	; 66
     524:	89 83       	std	Y+1, r24	; 0x01
     526:	9a 83       	std	Y+2, r25	; 0x02
     528:	ab 83       	std	Y+3, r26	; 0x03
     52a:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     52c:	2b ea       	ldi	r18, 0xAB	; 171
     52e:	3a ea       	ldi	r19, 0xAA	; 170
     530:	4a ea       	ldi	r20, 0xAA	; 170
     532:	50 e4       	ldi	r21, 0x40	; 64
     534:	69 81       	ldd	r22, Y+1	; 0x01
     536:	7a 81       	ldd	r23, Y+2	; 0x02
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     540:	dc 01       	movw	r26, r24
     542:	cb 01       	movw	r24, r22
     544:	8d 83       	std	Y+5, r24	; 0x05
     546:	9e 83       	std	Y+6, r25	; 0x06
     548:	af 83       	std	Y+7, r26	; 0x07
     54a:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e8       	ldi	r20, 0x80	; 128
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	69 81       	ldd	r22, Y+1	; 0x01
     556:	7a 81       	ldd	r23, Y+2	; 0x02
     558:	8b 81       	ldd	r24, Y+3	; 0x03
     55a:	9c 81       	ldd	r25, Y+4	; 0x04
     55c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     560:	dc 01       	movw	r26, r24
     562:	cb 01       	movw	r24, r22
     564:	89 87       	std	Y+9, r24	; 0x09
     566:	9a 87       	std	Y+10, r25	; 0x0a
     568:	ab 87       	std	Y+11, r26	; 0x0b
     56a:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     56c:	20 e0       	ldi	r18, 0x00	; 0
     56e:	30 e0       	ldi	r19, 0x00	; 0
     570:	40 e8       	ldi	r20, 0x80	; 128
     572:	5f e3       	ldi	r21, 0x3F	; 63
     574:	6d 81       	ldd	r22, Y+5	; 0x05
     576:	7e 81       	ldd	r23, Y+6	; 0x06
     578:	8f 81       	ldd	r24, Y+7	; 0x07
     57a:	98 85       	ldd	r25, Y+8	; 0x08
     57c:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     580:	88 23       	and	r24, r24
     582:	1c f4       	brge	.+6      	; 0x58a <lcd_byte+0x94>
		__ticks = 1;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	8d 87       	std	Y+13, r24	; 0x0d
     588:	b2 c0       	rjmp	.+356    	; 0x6ee <lcd_byte+0x1f8>
	else if (__tmp2 > 65535)
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	3f ef       	ldi	r19, 0xFF	; 255
     58e:	4f e7       	ldi	r20, 0x7F	; 127
     590:	57 e4       	ldi	r21, 0x47	; 71
     592:	69 85       	ldd	r22, Y+9	; 0x09
     594:	7a 85       	ldd	r23, Y+10	; 0x0a
     596:	8b 85       	ldd	r24, Y+11	; 0x0b
     598:	9c 85       	ldd	r25, Y+12	; 0x0c
     59a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     59e:	18 16       	cp	r1, r24
     5a0:	0c f0       	brlt	.+2      	; 0x5a4 <lcd_byte+0xae>
     5a2:	7b c0       	rjmp	.+246    	; 0x69a <lcd_byte+0x1a4>
	{
		_delay_ms(__us / 1000.0);
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	4a e7       	ldi	r20, 0x7A	; 122
     5aa:	54 e4       	ldi	r21, 0x44	; 68
     5ac:	69 81       	ldd	r22, Y+1	; 0x01
     5ae:	7a 81       	ldd	r23, Y+2	; 0x02
     5b0:	8b 81       	ldd	r24, Y+3	; 0x03
     5b2:	9c 81       	ldd	r25, Y+4	; 0x04
     5b4:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
     5b8:	dc 01       	movw	r26, r24
     5ba:	cb 01       	movw	r24, r22
     5bc:	8e 87       	std	Y+14, r24	; 0x0e
     5be:	9f 87       	std	Y+15, r25	; 0x0f
     5c0:	a8 8b       	std	Y+16, r26	; 0x10
     5c2:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     5c4:	20 e0       	ldi	r18, 0x00	; 0
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	4a e7       	ldi	r20, 0x7A	; 122
     5ca:	55 e4       	ldi	r21, 0x45	; 69
     5cc:	6e 85       	ldd	r22, Y+14	; 0x0e
     5ce:	7f 85       	ldd	r23, Y+15	; 0x0f
     5d0:	88 89       	ldd	r24, Y+16	; 0x10
     5d2:	99 89       	ldd	r25, Y+17	; 0x11
     5d4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     5d8:	dc 01       	movw	r26, r24
     5da:	cb 01       	movw	r24, r22
     5dc:	8a 8b       	std	Y+18, r24	; 0x12
     5de:	9b 8b       	std	Y+19, r25	; 0x13
     5e0:	ac 8b       	std	Y+20, r26	; 0x14
     5e2:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     5e4:	20 e0       	ldi	r18, 0x00	; 0
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	40 e8       	ldi	r20, 0x80	; 128
     5ea:	5f e3       	ldi	r21, 0x3F	; 63
     5ec:	6a 89       	ldd	r22, Y+18	; 0x12
     5ee:	7b 89       	ldd	r23, Y+19	; 0x13
     5f0:	8c 89       	ldd	r24, Y+20	; 0x14
     5f2:	9d 89       	ldd	r25, Y+21	; 0x15
     5f4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     5f8:	88 23       	and	r24, r24
     5fa:	2c f4       	brge	.+10     	; 0x606 <lcd_byte+0x110>
		__ticks = 1;
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	9f 8b       	std	Y+23, r25	; 0x17
     602:	8e 8b       	std	Y+22, r24	; 0x16
     604:	3f c0       	rjmp	.+126    	; 0x684 <lcd_byte+0x18e>
	else if (__tmp > 65535)
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	3f ef       	ldi	r19, 0xFF	; 255
     60a:	4f e7       	ldi	r20, 0x7F	; 127
     60c:	57 e4       	ldi	r21, 0x47	; 71
     60e:	6a 89       	ldd	r22, Y+18	; 0x12
     610:	7b 89       	ldd	r23, Y+19	; 0x13
     612:	8c 89       	ldd	r24, Y+20	; 0x14
     614:	9d 89       	ldd	r25, Y+21	; 0x15
     616:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     61a:	18 16       	cp	r1, r24
     61c:	4c f5       	brge	.+82     	; 0x670 <lcd_byte+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     61e:	20 e0       	ldi	r18, 0x00	; 0
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e2       	ldi	r20, 0x20	; 32
     624:	51 e4       	ldi	r21, 0x41	; 65
     626:	6e 85       	ldd	r22, Y+14	; 0x0e
     628:	7f 85       	ldd	r23, Y+15	; 0x0f
     62a:	88 89       	ldd	r24, Y+16	; 0x10
     62c:	99 89       	ldd	r25, Y+17	; 0x11
     62e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     632:	dc 01       	movw	r26, r24
     634:	cb 01       	movw	r24, r22
     636:	bc 01       	movw	r22, r24
     638:	cd 01       	movw	r24, r26
     63a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     63e:	dc 01       	movw	r26, r24
     640:	cb 01       	movw	r24, r22
     642:	9f 8b       	std	Y+23, r25	; 0x17
     644:	8e 8b       	std	Y+22, r24	; 0x16
     646:	0f c0       	rjmp	.+30     	; 0x666 <lcd_byte+0x170>
     648:	80 e9       	ldi	r24, 0x90	; 144
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	99 8f       	std	Y+25, r25	; 0x19
     64e:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     650:	88 8d       	ldd	r24, Y+24	; 0x18
     652:	99 8d       	ldd	r25, Y+25	; 0x19
     654:	01 97       	sbiw	r24, 0x01	; 1
     656:	f1 f7       	brne	.-4      	; 0x654 <lcd_byte+0x15e>
     658:	99 8f       	std	Y+25, r25	; 0x19
     65a:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     65c:	8e 89       	ldd	r24, Y+22	; 0x16
     65e:	9f 89       	ldd	r25, Y+23	; 0x17
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	9f 8b       	std	Y+23, r25	; 0x17
     664:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     666:	8e 89       	ldd	r24, Y+22	; 0x16
     668:	9f 89       	ldd	r25, Y+23	; 0x17
     66a:	89 2b       	or	r24, r25
     66c:	69 f7       	brne	.-38     	; 0x648 <lcd_byte+0x152>
     66e:	3f c0       	rjmp	.+126    	; 0x6ee <lcd_byte+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     670:	6a 89       	ldd	r22, Y+18	; 0x12
     672:	7b 89       	ldd	r23, Y+19	; 0x13
     674:	8c 89       	ldd	r24, Y+20	; 0x14
     676:	9d 89       	ldd	r25, Y+21	; 0x15
     678:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     67c:	dc 01       	movw	r26, r24
     67e:	cb 01       	movw	r24, r22
     680:	9f 8b       	std	Y+23, r25	; 0x17
     682:	8e 8b       	std	Y+22, r24	; 0x16
     684:	8e 89       	ldd	r24, Y+22	; 0x16
     686:	9f 89       	ldd	r25, Y+23	; 0x17
     688:	9b 8f       	std	Y+27, r25	; 0x1b
     68a:	8a 8f       	std	Y+26, r24	; 0x1a
     68c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     68e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     690:	01 97       	sbiw	r24, 0x01	; 1
     692:	f1 f7       	brne	.-4      	; 0x690 <lcd_byte+0x19a>
     694:	9b 8f       	std	Y+27, r25	; 0x1b
     696:	8a 8f       	std	Y+26, r24	; 0x1a
     698:	2a c0       	rjmp	.+84     	; 0x6ee <lcd_byte+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	4f e7       	ldi	r20, 0x7F	; 127
     6a0:	53 e4       	ldi	r21, 0x43	; 67
     6a2:	6d 81       	ldd	r22, Y+5	; 0x05
     6a4:	7e 81       	ldd	r23, Y+6	; 0x06
     6a6:	8f 81       	ldd	r24, Y+7	; 0x07
     6a8:	98 85       	ldd	r25, Y+8	; 0x08
     6aa:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     6ae:	18 16       	cp	r1, r24
     6b0:	ac f4       	brge	.+42     	; 0x6dc <lcd_byte+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     6b2:	69 85       	ldd	r22, Y+9	; 0x09
     6b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     6b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     6b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     6ba:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     6be:	dc 01       	movw	r26, r24
     6c0:	cb 01       	movw	r24, r22
     6c2:	9d 8f       	std	Y+29, r25	; 0x1d
     6c4:	8c 8f       	std	Y+28, r24	; 0x1c
     6c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6ca:	9f 8f       	std	Y+31, r25	; 0x1f
     6cc:	8e 8f       	std	Y+30, r24	; 0x1e
     6ce:	8e 8d       	ldd	r24, Y+30	; 0x1e
     6d0:	9f 8d       	ldd	r25, Y+31	; 0x1f
     6d2:	01 97       	sbiw	r24, 0x01	; 1
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <lcd_byte+0x1dc>
     6d6:	9f 8f       	std	Y+31, r25	; 0x1f
     6d8:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_us( 45 );
}
     6da:	0f c0       	rjmp	.+30     	; 0x6fa <lcd_byte+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6dc:	6d 81       	ldd	r22, Y+5	; 0x05
     6de:	7e 81       	ldd	r23, Y+6	; 0x06
     6e0:	8f 81       	ldd	r24, Y+7	; 0x07
     6e2:	98 85       	ldd	r25, Y+8	; 0x08
     6e4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     6e8:	dc 01       	movw	r26, r24
     6ea:	cb 01       	movw	r24, r22
     6ec:	8d 87       	std	Y+13, r24	; 0x0d
     6ee:	8d 85       	ldd	r24, Y+13	; 0x0d
     6f0:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6f2:	88 a1       	ldd	r24, Y+32	; 0x20
     6f4:	8a 95       	dec	r24
     6f6:	f1 f7       	brne	.-4      	; 0x6f4 <lcd_byte+0x1fe>
     6f8:	88 a3       	std	Y+32, r24	; 0x20
     6fa:	00 00       	nop
     6fc:	a1 96       	adiw	r28, 0x21	; 33
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	f8 94       	cli
     702:	de bf       	out	0x3e, r29	; 62
     704:	0f be       	out	0x3f, r0	; 63
     706:	cd bf       	out	0x3d, r28	; 61
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <lcd_command>:

// Befehls-Byte übertragen
void lcd_command( uint8_t d )
{	RS(0);			// Instruction-Register wählen
     70e:	cf 93       	push	r28
     710:	df 93       	push	r29
     712:	cd b7       	in	r28, 0x3d	; 61
     714:	de b7       	in	r29, 0x3e	; 62
     716:	2f 97       	sbiw	r28, 0x0f	; 15
     718:	0f b6       	in	r0, 0x3f	; 63
     71a:	f8 94       	cli
     71c:	de bf       	out	0x3e, r29	; 62
     71e:	0f be       	out	0x3f, r0	; 63
     720:	cd bf       	out	0x3d, r28	; 61
     722:	8f 87       	std	Y+15, r24	; 0x0f
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <RS>
	lcd_byte( d );
     72a:	8f 85       	ldd	r24, Y+15	; 0x0f
     72c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_byte>
	switch( d ){	// Display löschen und 
     730:	8f 85       	ldd	r24, Y+15	; 0x0f
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	03 97       	sbiw	r24, 0x03	; 3
     73a:	08 f0       	brcs	.+2      	; 0x73e <lcd_command+0x30>
     73c:	72 c0       	rjmp	.+228    	; 0x822 <lcd_command+0x114>
     73e:	80 e0       	ldi	r24, 0x00	; 0
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	a0 e0       	ldi	r26, 0x00	; 0
     744:	b0 e4       	ldi	r27, 0x40	; 64
     746:	89 83       	std	Y+1, r24	; 0x01
     748:	9a 83       	std	Y+2, r25	; 0x02
     74a:	ab 83       	std	Y+3, r26	; 0x03
     74c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	4a e7       	ldi	r20, 0x7A	; 122
     754:	55 e4       	ldi	r21, 0x45	; 69
     756:	69 81       	ldd	r22, Y+1	; 0x01
     758:	7a 81       	ldd	r23, Y+2	; 0x02
     75a:	8b 81       	ldd	r24, Y+3	; 0x03
     75c:	9c 81       	ldd	r25, Y+4	; 0x04
     75e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     762:	dc 01       	movw	r26, r24
     764:	cb 01       	movw	r24, r22
     766:	8d 83       	std	Y+5, r24	; 0x05
     768:	9e 83       	std	Y+6, r25	; 0x06
     76a:	af 83       	std	Y+7, r26	; 0x07
     76c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	40 e8       	ldi	r20, 0x80	; 128
     774:	5f e3       	ldi	r21, 0x3F	; 63
     776:	6d 81       	ldd	r22, Y+5	; 0x05
     778:	7e 81       	ldd	r23, Y+6	; 0x06
     77a:	8f 81       	ldd	r24, Y+7	; 0x07
     77c:	98 85       	ldd	r25, Y+8	; 0x08
     77e:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     782:	88 23       	and	r24, r24
     784:	2c f4       	brge	.+10     	; 0x790 <lcd_command+0x82>
		__ticks = 1;
     786:	81 e0       	ldi	r24, 0x01	; 1
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	9a 87       	std	Y+10, r25	; 0x0a
     78c:	89 87       	std	Y+9, r24	; 0x09
     78e:	3f c0       	rjmp	.+126    	; 0x80e <lcd_command+0x100>
	else if (__tmp > 65535)
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	3f ef       	ldi	r19, 0xFF	; 255
     794:	4f e7       	ldi	r20, 0x7F	; 127
     796:	57 e4       	ldi	r21, 0x47	; 71
     798:	6d 81       	ldd	r22, Y+5	; 0x05
     79a:	7e 81       	ldd	r23, Y+6	; 0x06
     79c:	8f 81       	ldd	r24, Y+7	; 0x07
     79e:	98 85       	ldd	r25, Y+8	; 0x08
     7a0:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     7a4:	18 16       	cp	r1, r24
     7a6:	4c f5       	brge	.+82     	; 0x7fa <lcd_command+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	40 e2       	ldi	r20, 0x20	; 32
     7ae:	51 e4       	ldi	r21, 0x41	; 65
     7b0:	69 81       	ldd	r22, Y+1	; 0x01
     7b2:	7a 81       	ldd	r23, Y+2	; 0x02
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	9c 81       	ldd	r25, Y+4	; 0x04
     7b8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     7bc:	dc 01       	movw	r26, r24
     7be:	cb 01       	movw	r24, r22
     7c0:	bc 01       	movw	r22, r24
     7c2:	cd 01       	movw	r24, r26
     7c4:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     7c8:	dc 01       	movw	r26, r24
     7ca:	cb 01       	movw	r24, r22
     7cc:	9a 87       	std	Y+10, r25	; 0x0a
     7ce:	89 87       	std	Y+9, r24	; 0x09
     7d0:	0f c0       	rjmp	.+30     	; 0x7f0 <lcd_command+0xe2>
     7d2:	80 e9       	ldi	r24, 0x90	; 144
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	9c 87       	std	Y+12, r25	; 0x0c
     7d8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7da:	8b 85       	ldd	r24, Y+11	; 0x0b
     7dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     7de:	01 97       	sbiw	r24, 0x01	; 1
     7e0:	f1 f7       	brne	.-4      	; 0x7de <lcd_command+0xd0>
     7e2:	9c 87       	std	Y+12, r25	; 0x0c
     7e4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7e6:	89 85       	ldd	r24, Y+9	; 0x09
     7e8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7ea:	01 97       	sbiw	r24, 0x01	; 1
     7ec:	9a 87       	std	Y+10, r25	; 0x0a
     7ee:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7f0:	89 85       	ldd	r24, Y+9	; 0x09
     7f2:	9a 85       	ldd	r25, Y+10	; 0x0a
     7f4:	89 2b       	or	r24, r25
     7f6:	69 f7       	brne	.-38     	; 0x7d2 <lcd_command+0xc4>
     7f8:	14 c0       	rjmp	.+40     	; 0x822 <lcd_command+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7fa:	6d 81       	ldd	r22, Y+5	; 0x05
     7fc:	7e 81       	ldd	r23, Y+6	; 0x06
     7fe:	8f 81       	ldd	r24, Y+7	; 0x07
     800:	98 85       	ldd	r25, Y+8	; 0x08
     802:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     806:	dc 01       	movw	r26, r24
     808:	cb 01       	movw	r24, r22
     80a:	9a 87       	std	Y+10, r25	; 0x0a
     80c:	89 87       	std	Y+9, r24	; 0x09
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	9a 85       	ldd	r25, Y+10	; 0x0a
     812:	9e 87       	std	Y+14, r25	; 0x0e
     814:	8d 87       	std	Y+13, r24	; 0x0d
     816:	8d 85       	ldd	r24, Y+13	; 0x0d
     818:	9e 85       	ldd	r25, Y+14	; 0x0e
     81a:	01 97       	sbiw	r24, 0x01	; 1
     81c:	f1 f7       	brne	.-4      	; 0x81a <lcd_command+0x10c>
     81e:	9e 87       	std	Y+14, r25	; 0x0e
     820:	8d 87       	std	Y+13, r24	; 0x0d
		case 1:		// Cursor home brauchen Zeit
		case 2:
		case 3: _delay_ms( 2 );
	}
	RS(1);			// Daten-Register wählen
     822:	81 e0       	ldi	r24, 0x01	; 1
     824:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <RS>
}
     828:	00 00       	nop
     82a:	2f 96       	adiw	r28, 0x0f	; 15
     82c:	0f b6       	in	r0, 0x3f	; 63
     82e:	f8 94       	cli
     830:	de bf       	out	0x3e, r29	; 62
     832:	0f be       	out	0x3f, r0	; 63
     834:	cd bf       	out	0x3d, r28	; 61
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <lcd_init>:

//------------   High-Level-Routinen --------------------------------

// Controller und LC-Display initialisieren:
void lcd_init( void )
{	// Alle Steuersignale aus, dann Treiber aktivieren
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	cf 93       	push	r28
     842:	df 93       	push	r29
     844:	cd b7       	in	r28, 0x3d	; 61
     846:	de b7       	in	r29, 0x3e	; 62
     848:	ce 58       	subi	r28, 0x8E	; 142
     84a:	d1 09       	sbc	r29, r1
     84c:	0f b6       	in	r0, 0x3f	; 63
     84e:	f8 94       	cli
     850:	de bf       	out	0x3e, r29	; 62
     852:	0f be       	out	0x3f, r0	; 63
     854:	cd bf       	out	0x3d, r28	; 61
	PORT_RS &= ~(1<<RS_);
     856:	85 e2       	ldi	r24, 0x25	; 37
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	25 e2       	ldi	r18, 0x25	; 37
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	2f 7e       	andi	r18, 0xEF	; 239
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
	PORT_E &= ~(1<<E_);
     868:	85 e2       	ldi	r24, 0x25	; 37
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	25 e2       	ldi	r18, 0x25	; 37
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	f9 01       	movw	r30, r18
     872:	20 81       	ld	r18, Z
     874:	27 7f       	andi	r18, 0xF7	; 247
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
	PORT_DAT &= ~((1<<D4_)|(1<<D5_)|(1<<D6_)|(1<<D7_));
     87a:	8b e2       	ldi	r24, 0x2B	; 43
     87c:	90 e0       	ldi	r25, 0x00	; 0
     87e:	2b e2       	ldi	r18, 0x2B	; 43
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	f9 01       	movw	r30, r18
     884:	20 81       	ld	r18, Z
     886:	23 7c       	andi	r18, 0xC3	; 195
     888:	fc 01       	movw	r30, r24
     88a:	20 83       	st	Z, r18
	DDR_RS |= (1<<RS_);
     88c:	84 e2       	ldi	r24, 0x24	; 36
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	24 e2       	ldi	r18, 0x24	; 36
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	20 61       	ori	r18, 0x10	; 16
     89a:	fc 01       	movw	r30, r24
     89c:	20 83       	st	Z, r18
	DDR_E |= (1<<E_);
     89e:	84 e2       	ldi	r24, 0x24	; 36
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	24 e2       	ldi	r18, 0x24	; 36
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	28 60       	ori	r18, 0x08	; 8
     8ac:	fc 01       	movw	r30, r24
     8ae:	20 83       	st	Z, r18
	DDR_DAT |= ((1<<D4_)|(1<<D5_)|(1<<D6_)|(1<<D7_));
     8b0:	8a e2       	ldi	r24, 0x2A	; 42
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	2a e2       	ldi	r18, 0x2A	; 42
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	f9 01       	movw	r30, r18
     8ba:	20 81       	ld	r18, Z
     8bc:	2c 63       	ori	r18, 0x3C	; 60
     8be:	fc 01       	movw	r30, r24
     8c0:	20 83       	st	Z, r18
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	a0 e7       	ldi	r26, 0x70	; 112
     8c8:	b1 e4       	ldi	r27, 0x41	; 65
     8ca:	89 83       	std	Y+1, r24	; 0x01
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	ab 83       	std	Y+3, r26	; 0x03
     8d0:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     8d2:	8e 01       	movw	r16, r28
     8d4:	0b 57       	subi	r16, 0x7B	; 123
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
     8d8:	20 e0       	ldi	r18, 0x00	; 0
     8da:	30 e0       	ldi	r19, 0x00	; 0
     8dc:	4a e7       	ldi	r20, 0x7A	; 122
     8de:	55 e4       	ldi	r21, 0x45	; 69
     8e0:	69 81       	ldd	r22, Y+1	; 0x01
     8e2:	7a 81       	ldd	r23, Y+2	; 0x02
     8e4:	8b 81       	ldd	r24, Y+3	; 0x03
     8e6:	9c 81       	ldd	r25, Y+4	; 0x04
     8e8:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	f8 01       	movw	r30, r16
     8f2:	80 83       	st	Z, r24
     8f4:	91 83       	std	Z+1, r25	; 0x01
     8f6:	a2 83       	std	Z+2, r26	; 0x02
     8f8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     8fa:	ce 01       	movw	r24, r28
     8fc:	8b 57       	subi	r24, 0x7B	; 123
     8fe:	9f 4f       	sbci	r25, 0xFF	; 255
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e8       	ldi	r20, 0x80	; 128
     906:	5f e3       	ldi	r21, 0x3F	; 63
     908:	fc 01       	movw	r30, r24
     90a:	60 81       	ld	r22, Z
     90c:	71 81       	ldd	r23, Z+1	; 0x01
     90e:	82 81       	ldd	r24, Z+2	; 0x02
     910:	93 81       	ldd	r25, Z+3	; 0x03
     912:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     916:	88 23       	and	r24, r24
     918:	4c f4       	brge	.+18     	; 0x92c <__stack+0x2d>
		__ticks = 1;
     91a:	ce 01       	movw	r24, r28
     91c:	87 57       	subi	r24, 0x77	; 119
     91e:	9f 4f       	sbci	r25, 0xFF	; 255
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
     92a:	69 c0       	rjmp	.+210    	; 0x9fe <__stack+0xff>
	else if (__tmp > 65535)
     92c:	ce 01       	movw	r24, r28
     92e:	8b 57       	subi	r24, 0x7B	; 123
     930:	9f 4f       	sbci	r25, 0xFF	; 255
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	3f ef       	ldi	r19, 0xFF	; 255
     936:	4f e7       	ldi	r20, 0x7F	; 127
     938:	57 e4       	ldi	r21, 0x47	; 71
     93a:	fc 01       	movw	r30, r24
     93c:	60 81       	ld	r22, Z
     93e:	71 81       	ldd	r23, Z+1	; 0x01
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	93 81       	ldd	r25, Z+3	; 0x03
     944:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     948:	18 16       	cp	r1, r24
     94a:	0c f0       	brlt	.+2      	; 0x94e <__stack+0x4f>
     94c:	46 c0       	rjmp	.+140    	; 0x9da <__stack+0xdb>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e2       	ldi	r20, 0x20	; 32
     954:	51 e4       	ldi	r21, 0x41	; 65
     956:	69 81       	ldd	r22, Y+1	; 0x01
     958:	7a 81       	ldd	r23, Y+2	; 0x02
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     962:	dc 01       	movw	r26, r24
     964:	cb 01       	movw	r24, r22
     966:	8e 01       	movw	r16, r28
     968:	07 57       	subi	r16, 0x77	; 119
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	bc 01       	movw	r22, r24
     96e:	cd 01       	movw	r24, r26
     970:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     974:	dc 01       	movw	r26, r24
     976:	cb 01       	movw	r24, r22
     978:	f8 01       	movw	r30, r16
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
     97e:	24 c0       	rjmp	.+72     	; 0x9c8 <__stack+0xc9>
     980:	ce 01       	movw	r24, r28
     982:	85 57       	subi	r24, 0x75	; 117
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	20 e9       	ldi	r18, 0x90	; 144
     988:	31 e0       	ldi	r19, 0x01	; 1
     98a:	fc 01       	movw	r30, r24
     98c:	31 83       	std	Z+1, r19	; 0x01
     98e:	20 83       	st	Z, r18
     990:	ce 01       	movw	r24, r28
     992:	85 57       	subi	r24, 0x75	; 117
     994:	9f 4f       	sbci	r25, 0xFF	; 255
     996:	fc 01       	movw	r30, r24
     998:	80 81       	ld	r24, Z
     99a:	91 81       	ldd	r25, Z+1	; 0x01
     99c:	01 97       	sbiw	r24, 0x01	; 1
     99e:	f1 f7       	brne	.-4      	; 0x99c <__stack+0x9d>
     9a0:	9e 01       	movw	r18, r28
     9a2:	25 57       	subi	r18, 0x75	; 117
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	f9 01       	movw	r30, r18
     9a8:	91 83       	std	Z+1, r25	; 0x01
     9aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9ac:	ce 01       	movw	r24, r28
     9ae:	87 57       	subi	r24, 0x77	; 119
     9b0:	9f 4f       	sbci	r25, 0xFF	; 255
     9b2:	9e 01       	movw	r18, r28
     9b4:	27 57       	subi	r18, 0x77	; 119
     9b6:	3f 4f       	sbci	r19, 0xFF	; 255
     9b8:	f9 01       	movw	r30, r18
     9ba:	20 81       	ld	r18, Z
     9bc:	31 81       	ldd	r19, Z+1	; 0x01
     9be:	21 50       	subi	r18, 0x01	; 1
     9c0:	31 09       	sbc	r19, r1
     9c2:	fc 01       	movw	r30, r24
     9c4:	31 83       	std	Z+1, r19	; 0x01
     9c6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c8:	ce 01       	movw	r24, r28
     9ca:	87 57       	subi	r24, 0x77	; 119
     9cc:	9f 4f       	sbci	r25, 0xFF	; 255
     9ce:	fc 01       	movw	r30, r24
     9d0:	80 81       	ld	r24, Z
     9d2:	91 81       	ldd	r25, Z+1	; 0x01
     9d4:	89 2b       	or	r24, r25
     9d6:	a1 f6       	brne	.-88     	; 0x980 <__stack+0x81>
     9d8:	2c c0       	rjmp	.+88     	; 0xa32 <__stack+0x133>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9da:	8e 01       	movw	r16, r28
     9dc:	07 57       	subi	r16, 0x77	; 119
     9de:	1f 4f       	sbci	r17, 0xFF	; 255
     9e0:	ce 01       	movw	r24, r28
     9e2:	8b 57       	subi	r24, 0x7B	; 123
     9e4:	9f 4f       	sbci	r25, 0xFF	; 255
     9e6:	fc 01       	movw	r30, r24
     9e8:	60 81       	ld	r22, Z
     9ea:	71 81       	ldd	r23, Z+1	; 0x01
     9ec:	82 81       	ldd	r24, Z+2	; 0x02
     9ee:	93 81       	ldd	r25, Z+3	; 0x03
     9f0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     9f4:	dc 01       	movw	r26, r24
     9f6:	cb 01       	movw	r24, r22
     9f8:	f8 01       	movw	r30, r16
     9fa:	91 83       	std	Z+1, r25	; 0x01
     9fc:	80 83       	st	Z, r24
     9fe:	ce 01       	movw	r24, r28
     a00:	83 57       	subi	r24, 0x73	; 115
     a02:	9f 4f       	sbci	r25, 0xFF	; 255
     a04:	9e 01       	movw	r18, r28
     a06:	27 57       	subi	r18, 0x77	; 119
     a08:	3f 4f       	sbci	r19, 0xFF	; 255
     a0a:	f9 01       	movw	r30, r18
     a0c:	20 81       	ld	r18, Z
     a0e:	31 81       	ldd	r19, Z+1	; 0x01
     a10:	fc 01       	movw	r30, r24
     a12:	31 83       	std	Z+1, r19	; 0x01
     a14:	20 83       	st	Z, r18
     a16:	ce 01       	movw	r24, r28
     a18:	83 57       	subi	r24, 0x73	; 115
     a1a:	9f 4f       	sbci	r25, 0xFF	; 255
     a1c:	fc 01       	movw	r30, r24
     a1e:	80 81       	ld	r24, Z
     a20:	91 81       	ldd	r25, Z+1	; 0x01
     a22:	01 97       	sbiw	r24, 0x01	; 1
     a24:	f1 f7       	brne	.-4      	; 0xa22 <__stack+0x123>
     a26:	9e 01       	movw	r18, r28
     a28:	23 57       	subi	r18, 0x73	; 115
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	f9 01       	movw	r30, r18
     a2e:	91 83       	std	Z+1, r25	; 0x01
     a30:	80 83       	st	Z, r24
	_delay_ms(15);		// Ende des Power-On-Resets abwarten
	// Magische Abfolge, 8-Bit Mode, aber nur die 
	// obersten 4 Bit werden übertragen
	lcd_nibble( 0x30 );	_delay_us( 4100 );
     a32:	80 e3       	ldi	r24, 0x30	; 48
     a34:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
     a38:	80 e0       	ldi	r24, 0x00	; 0
     a3a:	90 e2       	ldi	r25, 0x20	; 32
     a3c:	a0 e8       	ldi	r26, 0x80	; 128
     a3e:	b5 e4       	ldi	r27, 0x45	; 69
     a40:	8d 83       	std	Y+5, r24	; 0x05
     a42:	9e 83       	std	Y+6, r25	; 0x06
     a44:	af 83       	std	Y+7, r26	; 0x07
     a46:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     a48:	8e 01       	movw	r16, r28
     a4a:	07 59       	subi	r16, 0x97	; 151
     a4c:	1f 4f       	sbci	r17, 0xFF	; 255
     a4e:	2b ea       	ldi	r18, 0xAB	; 171
     a50:	3a ea       	ldi	r19, 0xAA	; 170
     a52:	4a ea       	ldi	r20, 0xAA	; 170
     a54:	50 e4       	ldi	r21, 0x40	; 64
     a56:	6d 81       	ldd	r22, Y+5	; 0x05
     a58:	7e 81       	ldd	r23, Y+6	; 0x06
     a5a:	8f 81       	ldd	r24, Y+7	; 0x07
     a5c:	98 85       	ldd	r25, Y+8	; 0x08
     a5e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     a62:	dc 01       	movw	r26, r24
     a64:	cb 01       	movw	r24, r22
     a66:	f8 01       	movw	r30, r16
     a68:	80 83       	st	Z, r24
     a6a:	91 83       	std	Z+1, r25	; 0x01
     a6c:	a2 83       	std	Z+2, r26	; 0x02
     a6e:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     a70:	8e 01       	movw	r16, r28
     a72:	03 59       	subi	r16, 0x93	; 147
     a74:	1f 4f       	sbci	r17, 0xFF	; 255
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	40 e8       	ldi	r20, 0x80	; 128
     a7c:	50 e4       	ldi	r21, 0x40	; 64
     a7e:	6d 81       	ldd	r22, Y+5	; 0x05
     a80:	7e 81       	ldd	r23, Y+6	; 0x06
     a82:	8f 81       	ldd	r24, Y+7	; 0x07
     a84:	98 85       	ldd	r25, Y+8	; 0x08
     a86:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     a8a:	dc 01       	movw	r26, r24
     a8c:	cb 01       	movw	r24, r22
     a8e:	f8 01       	movw	r30, r16
     a90:	80 83       	st	Z, r24
     a92:	91 83       	std	Z+1, r25	; 0x01
     a94:	a2 83       	std	Z+2, r26	; 0x02
     a96:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a98:	ce 01       	movw	r24, r28
     a9a:	87 59       	subi	r24, 0x97	; 151
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	5f e3       	ldi	r21, 0x3F	; 63
     aa6:	fc 01       	movw	r30, r24
     aa8:	60 81       	ld	r22, Z
     aaa:	71 81       	ldd	r23, Z+1	; 0x01
     aac:	82 81       	ldd	r24, Z+2	; 0x02
     aae:	93 81       	ldd	r25, Z+3	; 0x03
     ab0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     ab4:	88 23       	and	r24, r24
     ab6:	3c f4       	brge	.+14     	; 0xac6 <__stack+0x1c7>
		__ticks = 1;
     ab8:	ce 01       	movw	r24, r28
     aba:	8f 58       	subi	r24, 0x8F	; 143
     abc:	9f 4f       	sbci	r25, 0xFF	; 255
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	fc 01       	movw	r30, r24
     ac2:	20 83       	st	Z, r18
     ac4:	2c c1       	rjmp	.+600    	; 0xd1e <__stack+0x41f>
	else if (__tmp2 > 65535)
     ac6:	ce 01       	movw	r24, r28
     ac8:	83 59       	subi	r24, 0x93	; 147
     aca:	9f 4f       	sbci	r25, 0xFF	; 255
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	3f ef       	ldi	r19, 0xFF	; 255
     ad0:	4f e7       	ldi	r20, 0x7F	; 127
     ad2:	57 e4       	ldi	r21, 0x47	; 71
     ad4:	fc 01       	movw	r30, r24
     ad6:	60 81       	ld	r22, Z
     ad8:	71 81       	ldd	r23, Z+1	; 0x01
     ada:	82 81       	ldd	r24, Z+2	; 0x02
     adc:	93 81       	ldd	r25, Z+3	; 0x03
     ade:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     ae2:	18 16       	cp	r1, r24
     ae4:	0c f0       	brlt	.+2      	; 0xae8 <__stack+0x1e9>
     ae6:	cd c0       	rjmp	.+410    	; 0xc82 <__stack+0x383>
	{
		_delay_ms(__us / 1000.0);
     ae8:	20 e0       	ldi	r18, 0x00	; 0
     aea:	30 e0       	ldi	r19, 0x00	; 0
     aec:	4a e7       	ldi	r20, 0x7A	; 122
     aee:	54 e4       	ldi	r21, 0x44	; 68
     af0:	6d 81       	ldd	r22, Y+5	; 0x05
     af2:	7e 81       	ldd	r23, Y+6	; 0x06
     af4:	8f 81       	ldd	r24, Y+7	; 0x07
     af6:	98 85       	ldd	r25, Y+8	; 0x08
     af8:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	9e 01       	movw	r18, r28
     b02:	2e 58       	subi	r18, 0x8E	; 142
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
     b06:	f9 01       	movw	r30, r18
     b08:	80 83       	st	Z, r24
     b0a:	91 83       	std	Z+1, r25	; 0x01
     b0c:	a2 83       	std	Z+2, r26	; 0x02
     b0e:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     b10:	8e 01       	movw	r16, r28
     b12:	0a 58       	subi	r16, 0x8A	; 138
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	ce 01       	movw	r24, r28
     b18:	8e 58       	subi	r24, 0x8E	; 142
     b1a:	9f 4f       	sbci	r25, 0xFF	; 255
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	4a e7       	ldi	r20, 0x7A	; 122
     b22:	55 e4       	ldi	r21, 0x45	; 69
     b24:	fc 01       	movw	r30, r24
     b26:	60 81       	ld	r22, Z
     b28:	71 81       	ldd	r23, Z+1	; 0x01
     b2a:	82 81       	ldd	r24, Z+2	; 0x02
     b2c:	93 81       	ldd	r25, Z+3	; 0x03
     b2e:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	f8 01       	movw	r30, r16
     b38:	80 83       	st	Z, r24
     b3a:	91 83       	std	Z+1, r25	; 0x01
     b3c:	a2 83       	std	Z+2, r26	; 0x02
     b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b40:	ce 01       	movw	r24, r28
     b42:	8a 58       	subi	r24, 0x8A	; 138
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	20 e0       	ldi	r18, 0x00	; 0
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	40 e8       	ldi	r20, 0x80	; 128
     b4c:	5f e3       	ldi	r21, 0x3F	; 63
     b4e:	fc 01       	movw	r30, r24
     b50:	60 81       	ld	r22, Z
     b52:	71 81       	ldd	r23, Z+1	; 0x01
     b54:	82 81       	ldd	r24, Z+2	; 0x02
     b56:	93 81       	ldd	r25, Z+3	; 0x03
     b58:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     b5c:	88 23       	and	r24, r24
     b5e:	4c f4       	brge	.+18     	; 0xb72 <__stack+0x273>
		__ticks = 1;
     b60:	ce 01       	movw	r24, r28
     b62:	86 58       	subi	r24, 0x86	; 134
     b64:	9f 4f       	sbci	r25, 0xFF	; 255
     b66:	21 e0       	ldi	r18, 0x01	; 1
     b68:	30 e0       	ldi	r19, 0x00	; 0
     b6a:	fc 01       	movw	r30, r24
     b6c:	31 83       	std	Z+1, r19	; 0x01
     b6e:	20 83       	st	Z, r18
     b70:	6d c0       	rjmp	.+218    	; 0xc4c <__stack+0x34d>
	else if (__tmp > 65535)
     b72:	ce 01       	movw	r24, r28
     b74:	8a 58       	subi	r24, 0x8A	; 138
     b76:	9f 4f       	sbci	r25, 0xFF	; 255
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	4f e7       	ldi	r20, 0x7F	; 127
     b7e:	57 e4       	ldi	r21, 0x47	; 71
     b80:	fc 01       	movw	r30, r24
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     b8e:	18 16       	cp	r1, r24
     b90:	0c f0       	brlt	.+2      	; 0xb94 <__stack+0x295>
     b92:	4a c0       	rjmp	.+148    	; 0xc28 <__stack+0x329>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b94:	ce 01       	movw	r24, r28
     b96:	8e 58       	subi	r24, 0x8E	; 142
     b98:	9f 4f       	sbci	r25, 0xFF	; 255
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	40 e2       	ldi	r20, 0x20	; 32
     ba0:	51 e4       	ldi	r21, 0x41	; 65
     ba2:	fc 01       	movw	r30, r24
     ba4:	60 81       	ld	r22, Z
     ba6:	71 81       	ldd	r23, Z+1	; 0x01
     ba8:	82 81       	ldd	r24, Z+2	; 0x02
     baa:	93 81       	ldd	r25, Z+3	; 0x03
     bac:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     bb0:	dc 01       	movw	r26, r24
     bb2:	cb 01       	movw	r24, r22
     bb4:	8e 01       	movw	r16, r28
     bb6:	06 58       	subi	r16, 0x86	; 134
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	bc 01       	movw	r22, r24
     bbc:	cd 01       	movw	r24, r26
     bbe:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     bc2:	dc 01       	movw	r26, r24
     bc4:	cb 01       	movw	r24, r22
     bc6:	f8 01       	movw	r30, r16
     bc8:	91 83       	std	Z+1, r25	; 0x01
     bca:	80 83       	st	Z, r24
     bcc:	24 c0       	rjmp	.+72     	; 0xc16 <__stack+0x317>
     bce:	ce 01       	movw	r24, r28
     bd0:	84 58       	subi	r24, 0x84	; 132
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	20 e9       	ldi	r18, 0x90	; 144
     bd6:	31 e0       	ldi	r19, 0x01	; 1
     bd8:	fc 01       	movw	r30, r24
     bda:	31 83       	std	Z+1, r19	; 0x01
     bdc:	20 83       	st	Z, r18
     bde:	ce 01       	movw	r24, r28
     be0:	84 58       	subi	r24, 0x84	; 132
     be2:	9f 4f       	sbci	r25, 0xFF	; 255
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	91 81       	ldd	r25, Z+1	; 0x01
     bea:	01 97       	sbiw	r24, 0x01	; 1
     bec:	f1 f7       	brne	.-4      	; 0xbea <__stack+0x2eb>
     bee:	9e 01       	movw	r18, r28
     bf0:	24 58       	subi	r18, 0x84	; 132
     bf2:	3f 4f       	sbci	r19, 0xFF	; 255
     bf4:	f9 01       	movw	r30, r18
     bf6:	91 83       	std	Z+1, r25	; 0x01
     bf8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bfa:	ce 01       	movw	r24, r28
     bfc:	86 58       	subi	r24, 0x86	; 134
     bfe:	9f 4f       	sbci	r25, 0xFF	; 255
     c00:	9e 01       	movw	r18, r28
     c02:	26 58       	subi	r18, 0x86	; 134
     c04:	3f 4f       	sbci	r19, 0xFF	; 255
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	31 81       	ldd	r19, Z+1	; 0x01
     c0c:	21 50       	subi	r18, 0x01	; 1
     c0e:	31 09       	sbc	r19, r1
     c10:	fc 01       	movw	r30, r24
     c12:	31 83       	std	Z+1, r19	; 0x01
     c14:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c16:	ce 01       	movw	r24, r28
     c18:	86 58       	subi	r24, 0x86	; 134
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	fc 01       	movw	r30, r24
     c1e:	80 81       	ld	r24, Z
     c20:	91 81       	ldd	r25, Z+1	; 0x01
     c22:	89 2b       	or	r24, r25
     c24:	a1 f6       	brne	.-88     	; 0xbce <__stack+0x2cf>
     c26:	7b c0       	rjmp	.+246    	; 0xd1e <__stack+0x41f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c28:	8e 01       	movw	r16, r28
     c2a:	06 58       	subi	r16, 0x86	; 134
     c2c:	1f 4f       	sbci	r17, 0xFF	; 255
     c2e:	ce 01       	movw	r24, r28
     c30:	8a 58       	subi	r24, 0x8A	; 138
     c32:	9f 4f       	sbci	r25, 0xFF	; 255
     c34:	fc 01       	movw	r30, r24
     c36:	60 81       	ld	r22, Z
     c38:	71 81       	ldd	r23, Z+1	; 0x01
     c3a:	82 81       	ldd	r24, Z+2	; 0x02
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	f8 01       	movw	r30, r16
     c48:	91 83       	std	Z+1, r25	; 0x01
     c4a:	80 83       	st	Z, r24
     c4c:	ce 01       	movw	r24, r28
     c4e:	82 58       	subi	r24, 0x82	; 130
     c50:	9f 4f       	sbci	r25, 0xFF	; 255
     c52:	9e 01       	movw	r18, r28
     c54:	26 58       	subi	r18, 0x86	; 134
     c56:	3f 4f       	sbci	r19, 0xFF	; 255
     c58:	f9 01       	movw	r30, r18
     c5a:	20 81       	ld	r18, Z
     c5c:	31 81       	ldd	r19, Z+1	; 0x01
     c5e:	fc 01       	movw	r30, r24
     c60:	31 83       	std	Z+1, r19	; 0x01
     c62:	20 83       	st	Z, r18
     c64:	ce 01       	movw	r24, r28
     c66:	82 58       	subi	r24, 0x82	; 130
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	f1 f7       	brne	.-4      	; 0xc70 <__stack+0x371>
     c74:	9e 01       	movw	r18, r28
     c76:	22 58       	subi	r18, 0x82	; 130
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
     c7a:	f9 01       	movw	r30, r18
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
     c80:	4e c0       	rjmp	.+156    	; 0xd1e <__stack+0x41f>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     c82:	ce 01       	movw	r24, r28
     c84:	87 59       	subi	r24, 0x97	; 151
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	4f e7       	ldi	r20, 0x7F	; 127
     c8e:	53 e4       	ldi	r21, 0x43	; 67
     c90:	fc 01       	movw	r30, r24
     c92:	60 81       	ld	r22, Z
     c94:	71 81       	ldd	r23, Z+1	; 0x01
     c96:	82 81       	ldd	r24, Z+2	; 0x02
     c98:	93 81       	ldd	r25, Z+3	; 0x03
     c9a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     c9e:	18 16       	cp	r1, r24
     ca0:	6c f5       	brge	.+90     	; 0xcfc <__stack+0x3fd>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     ca2:	8e 01       	movw	r16, r28
     ca4:	00 58       	subi	r16, 0x80	; 128
     ca6:	1f 4f       	sbci	r17, 0xFF	; 255
     ca8:	ce 01       	movw	r24, r28
     caa:	83 59       	subi	r24, 0x93	; 147
     cac:	9f 4f       	sbci	r25, 0xFF	; 255
     cae:	fc 01       	movw	r30, r24
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     cbc:	dc 01       	movw	r26, r24
     cbe:	cb 01       	movw	r24, r22
     cc0:	f8 01       	movw	r30, r16
     cc2:	91 83       	std	Z+1, r25	; 0x01
     cc4:	80 83       	st	Z, r24
     cc6:	ce 01       	movw	r24, r28
     cc8:	8e 57       	subi	r24, 0x7E	; 126
     cca:	9f 4f       	sbci	r25, 0xFF	; 255
     ccc:	9e 01       	movw	r18, r28
     cce:	20 58       	subi	r18, 0x80	; 128
     cd0:	3f 4f       	sbci	r19, 0xFF	; 255
     cd2:	f9 01       	movw	r30, r18
     cd4:	20 81       	ld	r18, Z
     cd6:	31 81       	ldd	r19, Z+1	; 0x01
     cd8:	fc 01       	movw	r30, r24
     cda:	31 83       	std	Z+1, r19	; 0x01
     cdc:	20 83       	st	Z, r18
     cde:	ce 01       	movw	r24, r28
     ce0:	8e 57       	subi	r24, 0x7E	; 126
     ce2:	9f 4f       	sbci	r25, 0xFF	; 255
     ce4:	fc 01       	movw	r30, r24
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <__stack+0x3eb>
     cee:	9e 01       	movw	r18, r28
     cf0:	2e 57       	subi	r18, 0x7E	; 126
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	f9 01       	movw	r30, r18
     cf6:	91 83       	std	Z+1, r25	; 0x01
     cf8:	80 83       	st	Z, r24
     cfa:	28 c0       	rjmp	.+80     	; 0xd4c <__stack+0x44d>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     cfc:	8e 01       	movw	r16, r28
     cfe:	0f 58       	subi	r16, 0x8F	; 143
     d00:	1f 4f       	sbci	r17, 0xFF	; 255
     d02:	ce 01       	movw	r24, r28
     d04:	87 59       	subi	r24, 0x97	; 151
     d06:	9f 4f       	sbci	r25, 0xFF	; 255
     d08:	fc 01       	movw	r30, r24
     d0a:	60 81       	ld	r22, Z
     d0c:	71 81       	ldd	r23, Z+1	; 0x01
     d0e:	82 81       	ldd	r24, Z+2	; 0x02
     d10:	93 81       	ldd	r25, Z+3	; 0x03
     d12:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 83       	st	Z, r24
     d1e:	ce 01       	movw	r24, r28
     d20:	8c 57       	subi	r24, 0x7C	; 124
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	9e 01       	movw	r18, r28
     d26:	2f 58       	subi	r18, 0x8F	; 143
     d28:	3f 4f       	sbci	r19, 0xFF	; 255
     d2a:	f9 01       	movw	r30, r18
     d2c:	20 81       	ld	r18, Z
     d2e:	fc 01       	movw	r30, r24
     d30:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     d32:	ce 01       	movw	r24, r28
     d34:	8c 57       	subi	r24, 0x7C	; 124
     d36:	9f 4f       	sbci	r25, 0xFF	; 255
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	28 2f       	mov	r18, r24
     d3e:	2a 95       	dec	r18
     d40:	f1 f7       	brne	.-4      	; 0xd3e <__stack+0x43f>
     d42:	ce 01       	movw	r24, r28
     d44:	8c 57       	subi	r24, 0x7C	; 124
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	fc 01       	movw	r30, r24
     d4a:	20 83       	st	Z, r18
	lcd_nibble( 0x30 );	_delay_us( 100 );
     d4c:	80 e3       	ldi	r24, 0x30	; 48
     d4e:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
     d52:	80 e0       	ldi	r24, 0x00	; 0
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	a8 ec       	ldi	r26, 0xC8	; 200
     d58:	b2 e4       	ldi	r27, 0x42	; 66
     d5a:	89 87       	std	Y+9, r24	; 0x09
     d5c:	9a 87       	std	Y+10, r25	; 0x0a
     d5e:	ab 87       	std	Y+11, r26	; 0x0b
     d60:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     d62:	8e 01       	movw	r16, r28
     d64:	03 5b       	subi	r16, 0xB3	; 179
     d66:	1f 4f       	sbci	r17, 0xFF	; 255
     d68:	2b ea       	ldi	r18, 0xAB	; 171
     d6a:	3a ea       	ldi	r19, 0xAA	; 170
     d6c:	4a ea       	ldi	r20, 0xAA	; 170
     d6e:	50 e4       	ldi	r21, 0x40	; 64
     d70:	69 85       	ldd	r22, Y+9	; 0x09
     d72:	7a 85       	ldd	r23, Y+10	; 0x0a
     d74:	8b 85       	ldd	r24, Y+11	; 0x0b
     d76:	9c 85       	ldd	r25, Y+12	; 0x0c
     d78:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	f8 01       	movw	r30, r16
     d82:	80 83       	st	Z, r24
     d84:	91 83       	std	Z+1, r25	; 0x01
     d86:	a2 83       	std	Z+2, r26	; 0x02
     d88:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     d8a:	8e 01       	movw	r16, r28
     d8c:	0f 5a       	subi	r16, 0xAF	; 175
     d8e:	1f 4f       	sbci	r17, 0xFF	; 255
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	40 e8       	ldi	r20, 0x80	; 128
     d96:	50 e4       	ldi	r21, 0x40	; 64
     d98:	69 85       	ldd	r22, Y+9	; 0x09
     d9a:	7a 85       	ldd	r23, Y+10	; 0x0a
     d9c:	8b 85       	ldd	r24, Y+11	; 0x0b
     d9e:	9c 85       	ldd	r25, Y+12	; 0x0c
     da0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	f8 01       	movw	r30, r16
     daa:	80 83       	st	Z, r24
     dac:	91 83       	std	Z+1, r25	; 0x01
     dae:	a2 83       	std	Z+2, r26	; 0x02
     db0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     db2:	ce 01       	movw	r24, r28
     db4:	83 5b       	subi	r24, 0xB3	; 179
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	fc 01       	movw	r30, r24
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     dce:	88 23       	and	r24, r24
     dd0:	3c f4       	brge	.+14     	; 0xde0 <__stack+0x4e1>
		__ticks = 1;
     dd2:	ce 01       	movw	r24, r28
     dd4:	8b 5a       	subi	r24, 0xAB	; 171
     dd6:	9f 4f       	sbci	r25, 0xFF	; 255
     dd8:	21 e0       	ldi	r18, 0x01	; 1
     dda:	fc 01       	movw	r30, r24
     ddc:	20 83       	st	Z, r18
     dde:	2c c1       	rjmp	.+600    	; 0x1038 <__stack+0x739>
	else if (__tmp2 > 65535)
     de0:	ce 01       	movw	r24, r28
     de2:	8f 5a       	subi	r24, 0xAF	; 175
     de4:	9f 4f       	sbci	r25, 0xFF	; 255
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	fc 01       	movw	r30, r24
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     dfc:	18 16       	cp	r1, r24
     dfe:	0c f0       	brlt	.+2      	; 0xe02 <__stack+0x503>
     e00:	cd c0       	rjmp	.+410    	; 0xf9c <__stack+0x69d>
	{
		_delay_ms(__us / 1000.0);
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	4a e7       	ldi	r20, 0x7A	; 122
     e08:	54 e4       	ldi	r21, 0x44	; 68
     e0a:	69 85       	ldd	r22, Y+9	; 0x09
     e0c:	7a 85       	ldd	r23, Y+10	; 0x0a
     e0e:	8b 85       	ldd	r24, Y+11	; 0x0b
     e10:	9c 85       	ldd	r25, Y+12	; 0x0c
     e12:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
     e16:	dc 01       	movw	r26, r24
     e18:	cb 01       	movw	r24, r22
     e1a:	9e 01       	movw	r18, r28
     e1c:	2a 5a       	subi	r18, 0xAA	; 170
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	f9 01       	movw	r30, r18
     e22:	80 83       	st	Z, r24
     e24:	91 83       	std	Z+1, r25	; 0x01
     e26:	a2 83       	std	Z+2, r26	; 0x02
     e28:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e2a:	8e 01       	movw	r16, r28
     e2c:	06 5a       	subi	r16, 0xA6	; 166
     e2e:	1f 4f       	sbci	r17, 0xFF	; 255
     e30:	ce 01       	movw	r24, r28
     e32:	8a 5a       	subi	r24, 0xAA	; 170
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	4a e7       	ldi	r20, 0x7A	; 122
     e3c:	55 e4       	ldi	r21, 0x45	; 69
     e3e:	fc 01       	movw	r30, r24
     e40:	60 81       	ld	r22, Z
     e42:	71 81       	ldd	r23, Z+1	; 0x01
     e44:	82 81       	ldd	r24, Z+2	; 0x02
     e46:	93 81       	ldd	r25, Z+3	; 0x03
     e48:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     e4c:	dc 01       	movw	r26, r24
     e4e:	cb 01       	movw	r24, r22
     e50:	f8 01       	movw	r30, r16
     e52:	80 83       	st	Z, r24
     e54:	91 83       	std	Z+1, r25	; 0x01
     e56:	a2 83       	std	Z+2, r26	; 0x02
     e58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e5a:	ce 01       	movw	r24, r28
     e5c:	86 5a       	subi	r24, 0xA6	; 166
     e5e:	9f 4f       	sbci	r25, 0xFF	; 255
     e60:	20 e0       	ldi	r18, 0x00	; 0
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	40 e8       	ldi	r20, 0x80	; 128
     e66:	5f e3       	ldi	r21, 0x3F	; 63
     e68:	fc 01       	movw	r30, r24
     e6a:	60 81       	ld	r22, Z
     e6c:	71 81       	ldd	r23, Z+1	; 0x01
     e6e:	82 81       	ldd	r24, Z+2	; 0x02
     e70:	93 81       	ldd	r25, Z+3	; 0x03
     e72:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
     e76:	88 23       	and	r24, r24
     e78:	4c f4       	brge	.+18     	; 0xe8c <__stack+0x58d>
		__ticks = 1;
     e7a:	ce 01       	movw	r24, r28
     e7c:	82 5a       	subi	r24, 0xA2	; 162
     e7e:	9f 4f       	sbci	r25, 0xFF	; 255
     e80:	21 e0       	ldi	r18, 0x01	; 1
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	fc 01       	movw	r30, r24
     e86:	31 83       	std	Z+1, r19	; 0x01
     e88:	20 83       	st	Z, r18
     e8a:	6d c0       	rjmp	.+218    	; 0xf66 <__stack+0x667>
	else if (__tmp > 65535)
     e8c:	ce 01       	movw	r24, r28
     e8e:	86 5a       	subi	r24, 0xA6	; 166
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	4f e7       	ldi	r20, 0x7F	; 127
     e98:	57 e4       	ldi	r21, 0x47	; 71
     e9a:	fc 01       	movw	r30, r24
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	0c f0       	brlt	.+2      	; 0xeae <__stack+0x5af>
     eac:	4a c0       	rjmp	.+148    	; 0xf42 <__stack+0x643>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eae:	ce 01       	movw	r24, r28
     eb0:	8a 5a       	subi	r24, 0xAA	; 170
     eb2:	9f 4f       	sbci	r25, 0xFF	; 255
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	40 e2       	ldi	r20, 0x20	; 32
     eba:	51 e4       	ldi	r21, 0x41	; 65
     ebc:	fc 01       	movw	r30, r24
     ebe:	60 81       	ld	r22, Z
     ec0:	71 81       	ldd	r23, Z+1	; 0x01
     ec2:	82 81       	ldd	r24, Z+2	; 0x02
     ec4:	93 81       	ldd	r25, Z+3	; 0x03
     ec6:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
     eca:	dc 01       	movw	r26, r24
     ecc:	cb 01       	movw	r24, r22
     ece:	8e 01       	movw	r16, r28
     ed0:	02 5a       	subi	r16, 0xA2	; 162
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	f8 01       	movw	r30, r16
     ee2:	91 83       	std	Z+1, r25	; 0x01
     ee4:	80 83       	st	Z, r24
     ee6:	24 c0       	rjmp	.+72     	; 0xf30 <__stack+0x631>
     ee8:	ce 01       	movw	r24, r28
     eea:	80 5a       	subi	r24, 0xA0	; 160
     eec:	9f 4f       	sbci	r25, 0xFF	; 255
     eee:	20 e9       	ldi	r18, 0x90	; 144
     ef0:	31 e0       	ldi	r19, 0x01	; 1
     ef2:	fc 01       	movw	r30, r24
     ef4:	31 83       	std	Z+1, r19	; 0x01
     ef6:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ef8:	ce 01       	movw	r24, r28
     efa:	80 5a       	subi	r24, 0xA0	; 160
     efc:	9f 4f       	sbci	r25, 0xFF	; 255
     efe:	fc 01       	movw	r30, r24
     f00:	80 81       	ld	r24, Z
     f02:	91 81       	ldd	r25, Z+1	; 0x01
     f04:	01 97       	sbiw	r24, 0x01	; 1
     f06:	f1 f7       	brne	.-4      	; 0xf04 <__stack+0x605>
     f08:	9e 01       	movw	r18, r28
     f0a:	20 5a       	subi	r18, 0xA0	; 160
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	f9 01       	movw	r30, r18
     f10:	91 83       	std	Z+1, r25	; 0x01
     f12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f14:	ce 01       	movw	r24, r28
     f16:	82 5a       	subi	r24, 0xA2	; 162
     f18:	9f 4f       	sbci	r25, 0xFF	; 255
     f1a:	9e 01       	movw	r18, r28
     f1c:	22 5a       	subi	r18, 0xA2	; 162
     f1e:	3f 4f       	sbci	r19, 0xFF	; 255
     f20:	f9 01       	movw	r30, r18
     f22:	20 81       	ld	r18, Z
     f24:	31 81       	ldd	r19, Z+1	; 0x01
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	31 09       	sbc	r19, r1
     f2a:	fc 01       	movw	r30, r24
     f2c:	31 83       	std	Z+1, r19	; 0x01
     f2e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	ce 01       	movw	r24, r28
     f32:	82 5a       	subi	r24, 0xA2	; 162
     f34:	9f 4f       	sbci	r25, 0xFF	; 255
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	89 2b       	or	r24, r25
     f3e:	a1 f6       	brne	.-88     	; 0xee8 <__stack+0x5e9>
     f40:	7b c0       	rjmp	.+246    	; 0x1038 <__stack+0x739>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f42:	8e 01       	movw	r16, r28
     f44:	02 5a       	subi	r16, 0xA2	; 162
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	ce 01       	movw	r24, r28
     f4a:	86 5a       	subi	r24, 0xA6	; 166
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	fc 01       	movw	r30, r24
     f50:	60 81       	ld	r22, Z
     f52:	71 81       	ldd	r23, Z+1	; 0x01
     f54:	82 81       	ldd	r24, Z+2	; 0x02
     f56:	93 81       	ldd	r25, Z+3	; 0x03
     f58:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	91 83       	std	Z+1, r25	; 0x01
     f64:	80 83       	st	Z, r24
     f66:	ce 01       	movw	r24, r28
     f68:	8e 59       	subi	r24, 0x9E	; 158
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	9e 01       	movw	r18, r28
     f6e:	22 5a       	subi	r18, 0xA2	; 162
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	f9 01       	movw	r30, r18
     f74:	20 81       	ld	r18, Z
     f76:	31 81       	ldd	r19, Z+1	; 0x01
     f78:	fc 01       	movw	r30, r24
     f7a:	31 83       	std	Z+1, r19	; 0x01
     f7c:	20 83       	st	Z, r18
     f7e:	ce 01       	movw	r24, r28
     f80:	8e 59       	subi	r24, 0x9E	; 158
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	fc 01       	movw	r30, r24
     f86:	80 81       	ld	r24, Z
     f88:	91 81       	ldd	r25, Z+1	; 0x01
     f8a:	01 97       	sbiw	r24, 0x01	; 1
     f8c:	f1 f7       	brne	.-4      	; 0xf8a <__stack+0x68b>
     f8e:	9e 01       	movw	r18, r28
     f90:	2e 59       	subi	r18, 0x9E	; 158
     f92:	3f 4f       	sbci	r19, 0xFF	; 255
     f94:	f9 01       	movw	r30, r18
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	80 83       	st	Z, r24
     f9a:	4e c0       	rjmp	.+156    	; 0x1038 <__stack+0x739>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     f9c:	ce 01       	movw	r24, r28
     f9e:	83 5b       	subi	r24, 0xB3	; 179
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	20 e0       	ldi	r18, 0x00	; 0
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	4f e7       	ldi	r20, 0x7F	; 127
     fa8:	53 e4       	ldi	r21, 0x43	; 67
     faa:	fc 01       	movw	r30, r24
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
     fb8:	18 16       	cp	r1, r24
     fba:	6c f5       	brge	.+90     	; 0x1016 <__stack+0x717>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     fbc:	8e 01       	movw	r16, r28
     fbe:	0c 59       	subi	r16, 0x9C	; 156
     fc0:	1f 4f       	sbci	r17, 0xFF	; 255
     fc2:	ce 01       	movw	r24, r28
     fc4:	8f 5a       	subi	r24, 0xAF	; 175
     fc6:	9f 4f       	sbci	r25, 0xFF	; 255
     fc8:	fc 01       	movw	r30, r24
     fca:	60 81       	ld	r22, Z
     fcc:	71 81       	ldd	r23, Z+1	; 0x01
     fce:	82 81       	ldd	r24, Z+2	; 0x02
     fd0:	93 81       	ldd	r25, Z+3	; 0x03
     fd2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	f8 01       	movw	r30, r16
     fdc:	91 83       	std	Z+1, r25	; 0x01
     fde:	80 83       	st	Z, r24
     fe0:	ce 01       	movw	r24, r28
     fe2:	8a 59       	subi	r24, 0x9A	; 154
     fe4:	9f 4f       	sbci	r25, 0xFF	; 255
     fe6:	9e 01       	movw	r18, r28
     fe8:	2c 59       	subi	r18, 0x9C	; 156
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	f9 01       	movw	r30, r18
     fee:	20 81       	ld	r18, Z
     ff0:	31 81       	ldd	r19, Z+1	; 0x01
     ff2:	fc 01       	movw	r30, r24
     ff4:	31 83       	std	Z+1, r19	; 0x01
     ff6:	20 83       	st	Z, r18
     ff8:	ce 01       	movw	r24, r28
     ffa:	8a 59       	subi	r24, 0x9A	; 154
     ffc:	9f 4f       	sbci	r25, 0xFF	; 255
     ffe:	fc 01       	movw	r30, r24
    1000:	80 81       	ld	r24, Z
    1002:	91 81       	ldd	r25, Z+1	; 0x01
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <__stack+0x705>
    1008:	9e 01       	movw	r18, r28
    100a:	2a 59       	subi	r18, 0x9A	; 154
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	f9 01       	movw	r30, r18
    1010:	91 83       	std	Z+1, r25	; 0x01
    1012:	80 83       	st	Z, r24
    1014:	28 c0       	rjmp	.+80     	; 0x1066 <__stack+0x767>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1016:	8e 01       	movw	r16, r28
    1018:	0b 5a       	subi	r16, 0xAB	; 171
    101a:	1f 4f       	sbci	r17, 0xFF	; 255
    101c:	ce 01       	movw	r24, r28
    101e:	83 5b       	subi	r24, 0xB3	; 179
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	fc 01       	movw	r30, r24
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	f8 01       	movw	r30, r16
    1036:	80 83       	st	Z, r24
    1038:	ce 01       	movw	r24, r28
    103a:	88 59       	subi	r24, 0x98	; 152
    103c:	9f 4f       	sbci	r25, 0xFF	; 255
    103e:	9e 01       	movw	r18, r28
    1040:	2b 5a       	subi	r18, 0xAB	; 171
    1042:	3f 4f       	sbci	r19, 0xFF	; 255
    1044:	f9 01       	movw	r30, r18
    1046:	20 81       	ld	r18, Z
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    104c:	ce 01       	movw	r24, r28
    104e:	88 59       	subi	r24, 0x98	; 152
    1050:	9f 4f       	sbci	r25, 0xFF	; 255
    1052:	fc 01       	movw	r30, r24
    1054:	80 81       	ld	r24, Z
    1056:	28 2f       	mov	r18, r24
    1058:	2a 95       	dec	r18
    105a:	f1 f7       	brne	.-4      	; 0x1058 <__stack+0x759>
    105c:	ce 01       	movw	r24, r28
    105e:	88 59       	subi	r24, 0x98	; 152
    1060:	9f 4f       	sbci	r25, 0xFF	; 255
    1062:	fc 01       	movw	r30, r24
    1064:	20 83       	st	Z, r18
	lcd_nibble( 0x30 );	_delay_us( 100 );
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	a8 ec       	ldi	r26, 0xC8	; 200
    1072:	b2 e4       	ldi	r27, 0x42	; 66
    1074:	8d 87       	std	Y+13, r24	; 0x0d
    1076:	9e 87       	std	Y+14, r25	; 0x0e
    1078:	af 87       	std	Y+15, r26	; 0x0f
    107a:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    107c:	2b ea       	ldi	r18, 0xAB	; 171
    107e:	3a ea       	ldi	r19, 0xAA	; 170
    1080:	4a ea       	ldi	r20, 0xAA	; 170
    1082:	50 e4       	ldi	r21, 0x40	; 64
    1084:	6d 85       	ldd	r22, Y+13	; 0x0d
    1086:	7e 85       	ldd	r23, Y+14	; 0x0e
    1088:	8f 85       	ldd	r24, Y+15	; 0x0f
    108a:	98 89       	ldd	r25, Y+16	; 0x10
    108c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1090:	dc 01       	movw	r26, r24
    1092:	cb 01       	movw	r24, r22
    1094:	89 ab       	std	Y+49, r24	; 0x31
    1096:	9a ab       	std	Y+50, r25	; 0x32
    1098:	ab ab       	std	Y+51, r26	; 0x33
    109a:	bc ab       	std	Y+52, r27	; 0x34
	__tmp2 = ((F_CPU) / 4e6) * __us;
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	50 e4       	ldi	r21, 0x40	; 64
    10a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    10a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    10a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    10aa:	98 89       	ldd	r25, Y+16	; 0x10
    10ac:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8d ab       	std	Y+53, r24	; 0x35
    10b6:	9e ab       	std	Y+54, r25	; 0x36
    10b8:	af ab       	std	Y+55, r26	; 0x37
    10ba:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	69 a9       	ldd	r22, Y+49	; 0x31
    10c6:	7a a9       	ldd	r23, Y+50	; 0x32
    10c8:	8b a9       	ldd	r24, Y+51	; 0x33
    10ca:	9c a9       	ldd	r25, Y+52	; 0x34
    10cc:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	1c f4       	brge	.+6      	; 0x10da <__stack+0x7db>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	89 af       	std	Y+57, r24	; 0x39
    10d8:	09 c1       	rjmp	.+530    	; 0x12ec <__stack+0x9ed>
	else if (__tmp2 > 65535)
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	3f ef       	ldi	r19, 0xFF	; 255
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	57 e4       	ldi	r21, 0x47	; 71
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    10ee:	18 16       	cp	r1, r24
    10f0:	0c f0       	brlt	.+2      	; 0x10f4 <__stack+0x7f5>
    10f2:	be c0       	rjmp	.+380    	; 0x1270 <__stack+0x971>
	{
		_delay_ms(__us / 1000.0);
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a e7       	ldi	r20, 0x7A	; 122
    10fa:	54 e4       	ldi	r21, 0x44	; 68
    10fc:	6d 85       	ldd	r22, Y+13	; 0x0d
    10fe:	7e 85       	ldd	r23, Y+14	; 0x0e
    1100:	8f 85       	ldd	r24, Y+15	; 0x0f
    1102:	98 89       	ldd	r25, Y+16	; 0x10
    1104:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
    1108:	dc 01       	movw	r26, r24
    110a:	cb 01       	movw	r24, r22
    110c:	8a af       	std	Y+58, r24	; 0x3a
    110e:	9b af       	std	Y+59, r25	; 0x3b
    1110:	ac af       	std	Y+60, r26	; 0x3c
    1112:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1114:	8e 01       	movw	r16, r28
    1116:	02 5c       	subi	r16, 0xC2	; 194
    1118:	1f 4f       	sbci	r17, 0xFF	; 255
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a e7       	ldi	r20, 0x7A	; 122
    1120:	55 e4       	ldi	r21, 0x45	; 69
    1122:	6a ad       	ldd	r22, Y+58	; 0x3a
    1124:	7b ad       	ldd	r23, Y+59	; 0x3b
    1126:	8c ad       	ldd	r24, Y+60	; 0x3c
    1128:	9d ad       	ldd	r25, Y+61	; 0x3d
    112a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	f8 01       	movw	r30, r16
    1134:	80 83       	st	Z, r24
    1136:	91 83       	std	Z+1, r25	; 0x01
    1138:	a2 83       	std	Z+2, r26	; 0x02
    113a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    113c:	ce 01       	movw	r24, r28
    113e:	ce 96       	adiw	r24, 0x3e	; 62
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	fc 01       	movw	r30, r24
    114a:	60 81       	ld	r22, Z
    114c:	71 81       	ldd	r23, Z+1	; 0x01
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
    1156:	88 23       	and	r24, r24
    1158:	4c f4       	brge	.+18     	; 0x116c <__stack+0x86d>
		__ticks = 1;
    115a:	ce 01       	movw	r24, r28
    115c:	8e 5b       	subi	r24, 0xBE	; 190
    115e:	9f 4f       	sbci	r25, 0xFF	; 255
    1160:	21 e0       	ldi	r18, 0x01	; 1
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	fc 01       	movw	r30, r24
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	20 83       	st	Z, r18
    116a:	67 c0       	rjmp	.+206    	; 0x123a <__stack+0x93b>
	else if (__tmp > 65535)
    116c:	ce 01       	movw	r24, r28
    116e:	ce 96       	adiw	r24, 0x3e	; 62
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	3f ef       	ldi	r19, 0xFF	; 255
    1174:	4f e7       	ldi	r20, 0x7F	; 127
    1176:	57 e4       	ldi	r21, 0x47	; 71
    1178:	fc 01       	movw	r30, r24
    117a:	60 81       	ld	r22, Z
    117c:	71 81       	ldd	r23, Z+1	; 0x01
    117e:	82 81       	ldd	r24, Z+2	; 0x02
    1180:	93 81       	ldd	r25, Z+3	; 0x03
    1182:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    1186:	18 16       	cp	r1, r24
    1188:	0c f0       	brlt	.+2      	; 0x118c <__stack+0x88d>
    118a:	46 c0       	rjmp	.+140    	; 0x1218 <__stack+0x919>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    118c:	20 e0       	ldi	r18, 0x00	; 0
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	40 e2       	ldi	r20, 0x20	; 32
    1192:	51 e4       	ldi	r21, 0x41	; 65
    1194:	6a ad       	ldd	r22, Y+58	; 0x3a
    1196:	7b ad       	ldd	r23, Y+59	; 0x3b
    1198:	8c ad       	ldd	r24, Y+60	; 0x3c
    119a:	9d ad       	ldd	r25, Y+61	; 0x3d
    119c:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8e 01       	movw	r16, r28
    11a6:	0e 5b       	subi	r16, 0xBE	; 190
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	f8 01       	movw	r30, r16
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
    11bc:	24 c0       	rjmp	.+72     	; 0x1206 <__stack+0x907>
    11be:	ce 01       	movw	r24, r28
    11c0:	8c 5b       	subi	r24, 0xBC	; 188
    11c2:	9f 4f       	sbci	r25, 0xFF	; 255
    11c4:	20 e9       	ldi	r18, 0x90	; 144
    11c6:	31 e0       	ldi	r19, 0x01	; 1
    11c8:	fc 01       	movw	r30, r24
    11ca:	31 83       	std	Z+1, r19	; 0x01
    11cc:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11ce:	ce 01       	movw	r24, r28
    11d0:	8c 5b       	subi	r24, 0xBC	; 188
    11d2:	9f 4f       	sbci	r25, 0xFF	; 255
    11d4:	fc 01       	movw	r30, r24
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <__stack+0x8db>
    11de:	9e 01       	movw	r18, r28
    11e0:	2c 5b       	subi	r18, 0xBC	; 188
    11e2:	3f 4f       	sbci	r19, 0xFF	; 255
    11e4:	f9 01       	movw	r30, r18
    11e6:	91 83       	std	Z+1, r25	; 0x01
    11e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	ce 01       	movw	r24, r28
    11ec:	8e 5b       	subi	r24, 0xBE	; 190
    11ee:	9f 4f       	sbci	r25, 0xFF	; 255
    11f0:	9e 01       	movw	r18, r28
    11f2:	2e 5b       	subi	r18, 0xBE	; 190
    11f4:	3f 4f       	sbci	r19, 0xFF	; 255
    11f6:	f9 01       	movw	r30, r18
    11f8:	20 81       	ld	r18, Z
    11fa:	31 81       	ldd	r19, Z+1	; 0x01
    11fc:	21 50       	subi	r18, 0x01	; 1
    11fe:	31 09       	sbc	r19, r1
    1200:	fc 01       	movw	r30, r24
    1202:	31 83       	std	Z+1, r19	; 0x01
    1204:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1206:	ce 01       	movw	r24, r28
    1208:	8e 5b       	subi	r24, 0xBE	; 190
    120a:	9f 4f       	sbci	r25, 0xFF	; 255
    120c:	fc 01       	movw	r30, r24
    120e:	80 81       	ld	r24, Z
    1210:	91 81       	ldd	r25, Z+1	; 0x01
    1212:	89 2b       	or	r24, r25
    1214:	a1 f6       	brne	.-88     	; 0x11be <__stack+0x8bf>
    1216:	6a c0       	rjmp	.+212    	; 0x12ec <__stack+0x9ed>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1218:	8e 01       	movw	r16, r28
    121a:	0e 5b       	subi	r16, 0xBE	; 190
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	ce 01       	movw	r24, r28
    1220:	ce 96       	adiw	r24, 0x3e	; 62
    1222:	fc 01       	movw	r30, r24
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    1230:	dc 01       	movw	r26, r24
    1232:	cb 01       	movw	r24, r22
    1234:	f8 01       	movw	r30, r16
    1236:	91 83       	std	Z+1, r25	; 0x01
    1238:	80 83       	st	Z, r24
    123a:	ce 01       	movw	r24, r28
    123c:	8a 5b       	subi	r24, 0xBA	; 186
    123e:	9f 4f       	sbci	r25, 0xFF	; 255
    1240:	9e 01       	movw	r18, r28
    1242:	2e 5b       	subi	r18, 0xBE	; 190
    1244:	3f 4f       	sbci	r19, 0xFF	; 255
    1246:	f9 01       	movw	r30, r18
    1248:	20 81       	ld	r18, Z
    124a:	31 81       	ldd	r19, Z+1	; 0x01
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
    1252:	ce 01       	movw	r24, r28
    1254:	8a 5b       	subi	r24, 0xBA	; 186
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <__stack+0x95f>
    1262:	9e 01       	movw	r18, r28
    1264:	2a 5b       	subi	r18, 0xBA	; 186
    1266:	3f 4f       	sbci	r19, 0xFF	; 255
    1268:	f9 01       	movw	r30, r18
    126a:	91 83       	std	Z+1, r25	; 0x01
    126c:	80 83       	st	Z, r24
    126e:	3e c0       	rjmp	.+124    	; 0x12ec <__stack+0x9ed>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	53 e4       	ldi	r21, 0x43	; 67
    1278:	69 a9       	ldd	r22, Y+49	; 0x31
    127a:	7a a9       	ldd	r23, Y+50	; 0x32
    127c:	8b a9       	ldd	r24, Y+51	; 0x33
    127e:	9c a9       	ldd	r25, Y+52	; 0x34
    1280:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <__stack+0x9db>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1288:	8e 01       	movw	r16, r28
    128a:	08 5b       	subi	r16, 0xB8	; 184
    128c:	1f 4f       	sbci	r17, 0xFF	; 255
    128e:	6d a9       	ldd	r22, Y+53	; 0x35
    1290:	7e a9       	ldd	r23, Y+54	; 0x36
    1292:	8f a9       	ldd	r24, Y+55	; 0x37
    1294:	98 ad       	ldd	r25, Y+56	; 0x38
    1296:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	f8 01       	movw	r30, r16
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	80 83       	st	Z, r24
    12a4:	ce 01       	movw	r24, r28
    12a6:	86 5b       	subi	r24, 0xB6	; 182
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	9e 01       	movw	r18, r28
    12ac:	28 5b       	subi	r18, 0xB8	; 184
    12ae:	3f 4f       	sbci	r19, 0xFF	; 255
    12b0:	f9 01       	movw	r30, r18
    12b2:	20 81       	ld	r18, Z
    12b4:	31 81       	ldd	r19, Z+1	; 0x01
    12b6:	fc 01       	movw	r30, r24
    12b8:	31 83       	std	Z+1, r19	; 0x01
    12ba:	20 83       	st	Z, r18
    12bc:	ce 01       	movw	r24, r28
    12be:	86 5b       	subi	r24, 0xB6	; 182
    12c0:	9f 4f       	sbci	r25, 0xFF	; 255
    12c2:	fc 01       	movw	r30, r24
    12c4:	80 81       	ld	r24, Z
    12c6:	91 81       	ldd	r25, Z+1	; 0x01
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	f1 f7       	brne	.-4      	; 0x12c8 <__stack+0x9c9>
    12cc:	9e 01       	movw	r18, r28
    12ce:	26 5b       	subi	r18, 0xB6	; 182
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	f9 01       	movw	r30, r18
    12d4:	91 83       	std	Z+1, r25	; 0x01
    12d6:	80 83       	st	Z, r24
    12d8:	1c c0       	rjmp	.+56     	; 0x1312 <__stack+0xa13>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12da:	69 a9       	ldd	r22, Y+49	; 0x31
    12dc:	7a a9       	ldd	r23, Y+50	; 0x32
    12de:	8b a9       	ldd	r24, Y+51	; 0x33
    12e0:	9c a9       	ldd	r25, Y+52	; 0x34
    12e2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	89 af       	std	Y+57, r24	; 0x39
    12ec:	ce 01       	movw	r24, r28
    12ee:	84 5b       	subi	r24, 0xB4	; 180
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	29 ad       	ldd	r18, Y+57	; 0x39
    12f4:	fc 01       	movw	r30, r24
    12f6:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12f8:	ce 01       	movw	r24, r28
    12fa:	84 5b       	subi	r24, 0xB4	; 180
    12fc:	9f 4f       	sbci	r25, 0xFF	; 255
    12fe:	fc 01       	movw	r30, r24
    1300:	80 81       	ld	r24, Z
    1302:	28 2f       	mov	r18, r24
    1304:	2a 95       	dec	r18
    1306:	f1 f7       	brne	.-4      	; 0x1304 <__stack+0xa05>
    1308:	ce 01       	movw	r24, r28
    130a:	84 5b       	subi	r24, 0xB4	; 180
    130c:	9f 4f       	sbci	r25, 0xFF	; 255
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
	lcd_nibble( 0x20 );	_delay_us( 100 );	// 4-Bit-Modus
    1312:	80 e2       	ldi	r24, 0x20	; 32
    1314:	0e 94 0a 02 	call	0x414	; 0x414 <lcd_nibble>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a8 ec       	ldi	r26, 0xC8	; 200
    131e:	b2 e4       	ldi	r27, 0x42	; 66
    1320:	89 8b       	std	Y+17, r24	; 0x11
    1322:	9a 8b       	std	Y+18, r25	; 0x12
    1324:	ab 8b       	std	Y+19, r26	; 0x13
    1326:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1328:	2b ea       	ldi	r18, 0xAB	; 171
    132a:	3a ea       	ldi	r19, 0xAA	; 170
    132c:	4a ea       	ldi	r20, 0xAA	; 170
    132e:	50 e4       	ldi	r21, 0x40	; 64
    1330:	69 89       	ldd	r22, Y+17	; 0x11
    1332:	7a 89       	ldd	r23, Y+18	; 0x12
    1334:	8b 89       	ldd	r24, Y+19	; 0x13
    1336:	9c 89       	ldd	r25, Y+20	; 0x14
    1338:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8d 8b       	std	Y+21, r24	; 0x15
    1342:	9e 8b       	std	Y+22, r25	; 0x16
    1344:	af 8b       	std	Y+23, r26	; 0x17
    1346:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1348:	20 e0       	ldi	r18, 0x00	; 0
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	40 e8       	ldi	r20, 0x80	; 128
    134e:	50 e4       	ldi	r21, 0x40	; 64
    1350:	69 89       	ldd	r22, Y+17	; 0x11
    1352:	7a 89       	ldd	r23, Y+18	; 0x12
    1354:	8b 89       	ldd	r24, Y+19	; 0x13
    1356:	9c 89       	ldd	r25, Y+20	; 0x14
    1358:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	89 8f       	std	Y+25, r24	; 0x19
    1362:	9a 8f       	std	Y+26, r25	; 0x1a
    1364:	ab 8f       	std	Y+27, r26	; 0x1b
    1366:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	6d 89       	ldd	r22, Y+21	; 0x15
    1372:	7e 89       	ldd	r23, Y+22	; 0x16
    1374:	8f 89       	ldd	r24, Y+23	; 0x17
    1376:	98 8d       	ldd	r25, Y+24	; 0x18
    1378:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
    137c:	88 23       	and	r24, r24
    137e:	1c f4       	brge	.+6      	; 0x1386 <__stack+0xa87>
		__ticks = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	8d 8f       	std	Y+29, r24	; 0x1d
    1384:	b2 c0       	rjmp	.+356    	; 0x14ea <__stack+0xbeb>
	else if (__tmp2 > 65535)
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	3f ef       	ldi	r19, 0xFF	; 255
    138a:	4f e7       	ldi	r20, 0x7F	; 127
    138c:	57 e4       	ldi	r21, 0x47	; 71
    138e:	69 8d       	ldd	r22, Y+25	; 0x19
    1390:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1392:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1394:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1396:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    139a:	18 16       	cp	r1, r24
    139c:	0c f0       	brlt	.+2      	; 0x13a0 <__stack+0xaa1>
    139e:	7b c0       	rjmp	.+246    	; 0x1496 <__stack+0xb97>
	{
		_delay_ms(__us / 1000.0);
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	4a e7       	ldi	r20, 0x7A	; 122
    13a6:	54 e4       	ldi	r21, 0x44	; 68
    13a8:	69 89       	ldd	r22, Y+17	; 0x11
    13aa:	7a 89       	ldd	r23, Y+18	; 0x12
    13ac:	8b 89       	ldd	r24, Y+19	; 0x13
    13ae:	9c 89       	ldd	r25, Y+20	; 0x14
    13b0:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <__divsf3>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	8e 8f       	std	Y+30, r24	; 0x1e
    13ba:	9f 8f       	std	Y+31, r25	; 0x1f
    13bc:	a8 a3       	std	Y+32, r26	; 0x20
    13be:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a e7       	ldi	r20, 0x7A	; 122
    13c6:	55 e4       	ldi	r21, 0x45	; 69
    13c8:	6e 8d       	ldd	r22, Y+30	; 0x1e
    13ca:	7f 8d       	ldd	r23, Y+31	; 0x1f
    13cc:	88 a1       	ldd	r24, Y+32	; 0x20
    13ce:	99 a1       	ldd	r25, Y+33	; 0x21
    13d0:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	8a a3       	std	Y+34, r24	; 0x22
    13da:	9b a3       	std	Y+35, r25	; 0x23
    13dc:	ac a3       	std	Y+36, r26	; 0x24
    13de:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	6a a1       	ldd	r22, Y+34	; 0x22
    13ea:	7b a1       	ldd	r23, Y+35	; 0x23
    13ec:	8c a1       	ldd	r24, Y+36	; 0x24
    13ee:	9d a1       	ldd	r25, Y+37	; 0x25
    13f0:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <__cmpsf2>
    13f4:	88 23       	and	r24, r24
    13f6:	2c f4       	brge	.+10     	; 0x1402 <__stack+0xb03>
		__ticks = 1;
    13f8:	81 e0       	ldi	r24, 0x01	; 1
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	9f a3       	std	Y+39, r25	; 0x27
    13fe:	8e a3       	std	Y+38, r24	; 0x26
    1400:	3f c0       	rjmp	.+126    	; 0x1480 <__stack+0xb81>
	else if (__tmp > 65535)
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	6a a1       	ldd	r22, Y+34	; 0x22
    140c:	7b a1       	ldd	r23, Y+35	; 0x23
    140e:	8c a1       	ldd	r24, Y+36	; 0x24
    1410:	9d a1       	ldd	r25, Y+37	; 0x25
    1412:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    1416:	18 16       	cp	r1, r24
    1418:	4c f5       	brge	.+82     	; 0x146c <__stack+0xb6d>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1424:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1426:	88 a1       	ldd	r24, Y+32	; 0x20
    1428:	99 a1       	ldd	r25, Y+33	; 0x21
    142a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    142e:	dc 01       	movw	r26, r24
    1430:	cb 01       	movw	r24, r22
    1432:	bc 01       	movw	r22, r24
    1434:	cd 01       	movw	r24, r26
    1436:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    143a:	dc 01       	movw	r26, r24
    143c:	cb 01       	movw	r24, r22
    143e:	9f a3       	std	Y+39, r25	; 0x27
    1440:	8e a3       	std	Y+38, r24	; 0x26
    1442:	0f c0       	rjmp	.+30     	; 0x1462 <__stack+0xb63>
    1444:	80 e9       	ldi	r24, 0x90	; 144
    1446:	91 e0       	ldi	r25, 0x01	; 1
    1448:	99 a7       	std	Y+41, r25	; 0x29
    144a:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    144c:	88 a5       	ldd	r24, Y+40	; 0x28
    144e:	99 a5       	ldd	r25, Y+41	; 0x29
    1450:	01 97       	sbiw	r24, 0x01	; 1
    1452:	f1 f7       	brne	.-4      	; 0x1450 <__stack+0xb51>
    1454:	99 a7       	std	Y+41, r25	; 0x29
    1456:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1458:	8e a1       	ldd	r24, Y+38	; 0x26
    145a:	9f a1       	ldd	r25, Y+39	; 0x27
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	9f a3       	std	Y+39, r25	; 0x27
    1460:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	8e a1       	ldd	r24, Y+38	; 0x26
    1464:	9f a1       	ldd	r25, Y+39	; 0x27
    1466:	89 2b       	or	r24, r25
    1468:	69 f7       	brne	.-38     	; 0x1444 <__stack+0xb45>
    146a:	3f c0       	rjmp	.+126    	; 0x14ea <__stack+0xbeb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    146c:	6a a1       	ldd	r22, Y+34	; 0x22
    146e:	7b a1       	ldd	r23, Y+35	; 0x23
    1470:	8c a1       	ldd	r24, Y+36	; 0x24
    1472:	9d a1       	ldd	r25, Y+37	; 0x25
    1474:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	9f a3       	std	Y+39, r25	; 0x27
    147e:	8e a3       	std	Y+38, r24	; 0x26
    1480:	8e a1       	ldd	r24, Y+38	; 0x26
    1482:	9f a1       	ldd	r25, Y+39	; 0x27
    1484:	9b a7       	std	Y+43, r25	; 0x2b
    1486:	8a a7       	std	Y+42, r24	; 0x2a
    1488:	8a a5       	ldd	r24, Y+42	; 0x2a
    148a:	9b a5       	ldd	r25, Y+43	; 0x2b
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <__stack+0xb8d>
    1490:	9b a7       	std	Y+43, r25	; 0x2b
    1492:	8a a7       	std	Y+42, r24	; 0x2a
    1494:	2a c0       	rjmp	.+84     	; 0x14ea <__stack+0xbeb>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	4f e7       	ldi	r20, 0x7F	; 127
    149c:	53 e4       	ldi	r21, 0x43	; 67
    149e:	6d 89       	ldd	r22, Y+21	; 0x15
    14a0:	7e 89       	ldd	r23, Y+22	; 0x16
    14a2:	8f 89       	ldd	r24, Y+23	; 0x17
    14a4:	98 8d       	ldd	r25, Y+24	; 0x18
    14a6:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    14aa:	18 16       	cp	r1, r24
    14ac:	ac f4       	brge	.+42     	; 0x14d8 <__stack+0xbd9>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    14ae:	69 8d       	ldd	r22, Y+25	; 0x19
    14b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14b6:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9d a7       	std	Y+45, r25	; 0x2d
    14c0:	8c a7       	std	Y+44, r24	; 0x2c
    14c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    14c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    14c6:	9f a7       	std	Y+47, r25	; 0x2f
    14c8:	8e a7       	std	Y+46, r24	; 0x2e
    14ca:	8e a5       	ldd	r24, Y+46	; 0x2e
    14cc:	9f a5       	ldd	r25, Y+47	; 0x2f
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <__stack+0xbcf>
    14d2:	9f a7       	std	Y+47, r25	; 0x2f
    14d4:	8e a7       	std	Y+46, r24	; 0x2e
    14d6:	0f c0       	rjmp	.+30     	; 0x14f6 <__stack+0xbf7>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    14d8:	6d 89       	ldd	r22, Y+21	; 0x15
    14da:	7e 89       	ldd	r23, Y+22	; 0x16
    14dc:	8f 89       	ldd	r24, Y+23	; 0x17
    14de:	98 8d       	ldd	r25, Y+24	; 0x18
    14e0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	8d 8f       	std	Y+29, r24	; 0x1d
    14ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14ec:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    14ee:	88 a9       	ldd	r24, Y+48	; 0x30
    14f0:	8a 95       	dec	r24
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <__stack+0xbf1>
    14f4:	88 ab       	std	Y+48, r24	; 0x30
	lcd_command( 0x28);						// Function Set: 2-zeilig, Raster 5*8
    14f6:	88 e2       	ldi	r24, 0x28	; 40
    14f8:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
	lcd_command( 0x08 );					// Display off
    14fc:	88 e0       	ldi	r24, 0x08	; 8
    14fe:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
	lcd_command( 0x01 );					// Display clear
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
	lcd_command( 0x06 );					// Cursor auto-increment
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
	lcd_command( 0x0C );					// on, no cursor, no blink
    150e:	8c e0       	ldi	r24, 0x0C	; 12
    1510:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
}
    1514:	00 00       	nop
    1516:	c2 57       	subi	r28, 0x72	; 114
    1518:	df 4f       	sbci	r29, 0xFF	; 255
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	1f 91       	pop	r17
    152a:	0f 91       	pop	r16
    152c:	08 95       	ret

0000152e <lcd_pos>:

// Curosor positionieren:
void lcd_pos( uint8_t line, uint8_t column )
{	column = column + line * 64;	
    152e:	cf 93       	push	r28
    1530:	df 93       	push	r29
    1532:	00 d0       	rcall	.+0      	; 0x1534 <lcd_pos+0x6>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	89 83       	std	Y+1, r24	; 0x01
    153a:	6a 83       	std	Y+2, r22	; 0x02
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	82 95       	swap	r24
    1540:	88 0f       	add	r24, r24
    1542:	88 0f       	add	r24, r24
    1544:	80 7c       	andi	r24, 0xC0	; 192
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	89 0f       	add	r24, r25
    154a:	8a 83       	std	Y+2, r24	; 0x02
	lcd_command( 0x80 + column );
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 58       	subi	r24, 0x80	; 128
    1550:	0e 94 87 03 	call	0x70e	; 0x70e <lcd_command>
}
    1554:	00 00       	nop
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	df 91       	pop	r29
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <lcd_text>:

// Ausgabe eines Textes an der aktuellen Cursorposition:
void lcd_text( char *t )
{	while( *t )
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	00 d0       	rcall	.+0      	; 0x1566 <lcd_text+0x6>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	9a 83       	std	Y+2, r25	; 0x02
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	0b c0       	rjmp	.+22     	; 0x1586 <lcd_text+0x26>
	{	lcd_byte( *t );
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <lcd_byte>
		t++;
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	9a 81       	ldd	r25, Y+2	; 0x02
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
	lcd_command( 0x80 + column );
}

// Ausgabe eines Textes an der aktuellen Cursorposition:
void lcd_text( char *t )
{	while( *t )
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	9a 81       	ldd	r25, Y+2	; 0x02
    158a:	fc 01       	movw	r30, r24
    158c:	80 81       	ld	r24, Z
    158e:	88 23       	and	r24, r24
    1590:	79 f7       	brne	.-34     	; 0x1570 <lcd_text+0x10>
	{	lcd_byte( *t );
		t++;
	}
}
    1592:	00 00       	nop
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	08 95       	ret

0000159e <__vector_9>:
volatile uint64_t t2_soft;		// Zählt 0.5us-Ticks

#define SEC	0.0000005

ISR( TIMER2_OVF_vect )
{
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    15a6:	0f 92       	push	r0
    15a8:	11 24       	eor	r1, r1
    15aa:	af 92       	push	r10
    15ac:	bf 92       	push	r11
    15ae:	cf 92       	push	r12
    15b0:	df 92       	push	r13
    15b2:	ef 92       	push	r14
    15b4:	ff 92       	push	r15
    15b6:	0f 93       	push	r16
    15b8:	1f 93       	push	r17
    15ba:	2f 93       	push	r18
    15bc:	3f 93       	push	r19
    15be:	4f 93       	push	r20
    15c0:	5f 93       	push	r21
    15c2:	6f 93       	push	r22
    15c4:	7f 93       	push	r23
    15c6:	8f 93       	push	r24
    15c8:	9f 93       	push	r25
    15ca:	cf 93       	push	r28
    15cc:	df 93       	push	r29
    15ce:	cd b7       	in	r28, 0x3d	; 61
    15d0:	de b7       	in	r29, 0x3e	; 62
	t2_soft += 256;
    15d2:	a0 90 2e 01 	lds	r10, 0x012E	; 0x80012e <__data_end>
    15d6:	b0 90 2f 01 	lds	r11, 0x012F	; 0x80012f <__data_end+0x1>
    15da:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <__data_end+0x2>
    15de:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <__data_end+0x3>
    15e2:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <__data_end+0x4>
    15e6:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <__data_end+0x5>
    15ea:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <__data_end+0x6>
    15ee:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <__data_end+0x7>
    15f2:	2a 2d       	mov	r18, r10
    15f4:	3b 2d       	mov	r19, r11
    15f6:	4c 2d       	mov	r20, r12
    15f8:	5d 2d       	mov	r21, r13
    15fa:	6e 2d       	mov	r22, r14
    15fc:	7f 2d       	mov	r23, r15
    15fe:	80 2f       	mov	r24, r16
    1600:	91 2f       	mov	r25, r17
    1602:	3f 5f       	subi	r19, 0xFF	; 255
    1604:	4f 4f       	sbci	r20, 0xFF	; 255
    1606:	5f 4f       	sbci	r21, 0xFF	; 255
    1608:	6f 4f       	sbci	r22, 0xFF	; 255
    160a:	7f 4f       	sbci	r23, 0xFF	; 255
    160c:	8f 4f       	sbci	r24, 0xFF	; 255
    160e:	9f 4f       	sbci	r25, 0xFF	; 255
    1610:	a2 2e       	mov	r10, r18
    1612:	b3 2e       	mov	r11, r19
    1614:	c4 2e       	mov	r12, r20
    1616:	d5 2e       	mov	r13, r21
    1618:	e6 2e       	mov	r14, r22
    161a:	f7 2e       	mov	r15, r23
    161c:	08 2f       	mov	r16, r24
    161e:	19 2f       	mov	r17, r25
    1620:	a0 92 2e 01 	sts	0x012E, r10	; 0x80012e <__data_end>
    1624:	b0 92 2f 01 	sts	0x012F, r11	; 0x80012f <__data_end+0x1>
    1628:	c0 92 30 01 	sts	0x0130, r12	; 0x800130 <__data_end+0x2>
    162c:	d0 92 31 01 	sts	0x0131, r13	; 0x800131 <__data_end+0x3>
    1630:	e0 92 32 01 	sts	0x0132, r14	; 0x800132 <__data_end+0x4>
    1634:	f0 92 33 01 	sts	0x0133, r15	; 0x800133 <__data_end+0x5>
    1638:	00 93 34 01 	sts	0x0134, r16	; 0x800134 <__data_end+0x6>
    163c:	10 93 35 01 	sts	0x0135, r17	; 0x800135 <__data_end+0x7>
}
    1640:	00 00       	nop
    1642:	df 91       	pop	r29
    1644:	cf 91       	pop	r28
    1646:	9f 91       	pop	r25
    1648:	8f 91       	pop	r24
    164a:	7f 91       	pop	r23
    164c:	6f 91       	pop	r22
    164e:	5f 91       	pop	r21
    1650:	4f 91       	pop	r20
    1652:	3f 91       	pop	r19
    1654:	2f 91       	pop	r18
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	ff 90       	pop	r15
    165c:	ef 90       	pop	r14
    165e:	df 90       	pop	r13
    1660:	cf 90       	pop	r12
    1662:	bf 90       	pop	r11
    1664:	af 90       	pop	r10
    1666:	0f 90       	pop	r0
    1668:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    166c:	0f 90       	pop	r0
    166e:	1f 90       	pop	r1
    1670:	18 95       	reti

00001672 <t2_init>:

void t2_init( void )
{
    1672:	cf 93       	push	r28
    1674:	df 93       	push	r29
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
	t2_soft = 0;
    167a:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <__data_end>
    167e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <__data_end+0x1>
    1682:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <__data_end+0x2>
    1686:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <__data_end+0x3>
    168a:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end+0x4>
    168e:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <__data_end+0x5>
    1692:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <__data_end+0x6>
    1696:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <__data_end+0x7>
	TCCR2B = 1<<CS21;		// mode 0, prescaler 8
    169a:	81 eb       	ldi	r24, 0xB1	; 177
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	22 e0       	ldi	r18, 0x02	; 2
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
	TIMSK2 |= 1<<TOIE2;		// enable overflow interrupt
    16a4:	80 e7       	ldi	r24, 0x70	; 112
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	20 e7       	ldi	r18, 0x70	; 112
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	f9 01       	movw	r30, r18
    16ae:	20 81       	ld	r18, Z
    16b0:	21 60       	ori	r18, 0x01	; 1
    16b2:	fc 01       	movw	r30, r24
    16b4:	20 83       	st	Z, r18
	sei();					// Globale Interrupt Freigabe
    16b6:	78 94       	sei
}
    16b8:	00 00       	nop
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <get_ticks>:


uint64_t get_ticks( void )  // read T2 as 64 bit timer
{
    16c0:	2f 92       	push	r2
    16c2:	3f 92       	push	r3
    16c4:	4f 92       	push	r4
    16c6:	5f 92       	push	r5
    16c8:	6f 92       	push	r6
    16ca:	7f 92       	push	r7
    16cc:	8f 92       	push	r8
    16ce:	9f 92       	push	r9
    16d0:	af 92       	push	r10
    16d2:	bf 92       	push	r11
    16d4:	cf 92       	push	r12
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
    16e4:	cd b7       	in	r28, 0x3d	; 61
    16e6:	de b7       	in	r29, 0x3e	; 62
    16e8:	61 97       	sbiw	r28, 0x11	; 17
    16ea:	0f b6       	in	r0, 0x3f	; 63
    16ec:	f8 94       	cli
    16ee:	de bf       	out	0x3e, r29	; 62
    16f0:	0f be       	out	0x3f, r0	; 63
    16f2:	cd bf       	out	0x3d, r28	; 61
	uint64_t val;
	uint8_t tifr;

	cli();					// Interrupts global sperren
    16f4:	f8 94       	cli
	val = t2_soft + TCNT2;	// val enthält den Zeitstempel
    16f6:	82 eb       	ldi	r24, 0xB2	; 178
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	fc 01       	movw	r30, r24
    16fc:	80 81       	ld	r24, Z
    16fe:	a8 2e       	mov	r10, r24
    1700:	b1 2c       	mov	r11, r1
    1702:	c1 2c       	mov	r12, r1
    1704:	d1 2c       	mov	r13, r1
    1706:	e1 2c       	mov	r14, r1
    1708:	f1 2c       	mov	r15, r1
    170a:	87 01       	movw	r16, r14
    170c:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <__data_end>
    1710:	fa 87       	std	Y+10, r31	; 0x0a
    1712:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <__data_end+0x1>
    1716:	8b 87       	std	Y+11, r24	; 0x0b
    1718:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <__data_end+0x2>
    171c:	9c 87       	std	Y+12, r25	; 0x0c
    171e:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <__data_end+0x3>
    1722:	ed 87       	std	Y+13, r30	; 0x0d
    1724:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <__data_end+0x4>
    1728:	fe 87       	std	Y+14, r31	; 0x0e
    172a:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <__data_end+0x5>
    172e:	8f 87       	std	Y+15, r24	; 0x0f
    1730:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <__data_end+0x6>
    1734:	98 8b       	std	Y+16, r25	; 0x10
    1736:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <__data_end+0x7>
    173a:	e9 8b       	std	Y+17, r30	; 0x11
    173c:	2a 2d       	mov	r18, r10
    173e:	3b 2d       	mov	r19, r11
    1740:	4c 2d       	mov	r20, r12
    1742:	5d 2d       	mov	r21, r13
    1744:	6e 2d       	mov	r22, r14
    1746:	7f 2d       	mov	r23, r15
    1748:	80 2f       	mov	r24, r16
    174a:	91 2f       	mov	r25, r17
    174c:	aa 84       	ldd	r10, Y+10	; 0x0a
    174e:	bb 84       	ldd	r11, Y+11	; 0x0b
    1750:	cc 84       	ldd	r12, Y+12	; 0x0c
    1752:	dd 84       	ldd	r13, Y+13	; 0x0d
    1754:	ee 84       	ldd	r14, Y+14	; 0x0e
    1756:	ff 84       	ldd	r15, Y+15	; 0x0f
    1758:	08 89       	ldd	r16, Y+16	; 0x10
    175a:	19 89       	ldd	r17, Y+17	; 0x11
    175c:	0e 94 f7 13 	call	0x27ee	; 0x27ee <__adddi3>
    1760:	29 83       	std	Y+1, r18	; 0x01
    1762:	3a 83       	std	Y+2, r19	; 0x02
    1764:	4b 83       	std	Y+3, r20	; 0x03
    1766:	5c 83       	std	Y+4, r21	; 0x04
    1768:	6d 83       	std	Y+5, r22	; 0x05
    176a:	7e 83       	std	Y+6, r23	; 0x06
    176c:	8f 83       	std	Y+7, r24	; 0x07
    176e:	98 87       	std	Y+8, r25	; 0x08
	tifr = TIFR2;			// read interrupt flags
    1770:	87 e3       	ldi	r24, 0x37	; 55
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	fc 01       	movw	r30, r24
    1776:	80 81       	ld	r24, Z
    1778:	89 87       	std	Y+9, r24	; 0x09
	sei();					// Interrupts wieder an
    177a:	78 94       	sei
	if( (tifr & (1<<TOV2) ) && !(val & 0x80) ) // overflow prior reading TCNT2 ?
    177c:	89 85       	ldd	r24, Y+9	; 0x09
    177e:	88 2f       	mov	r24, r24
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	99 27       	eor	r25, r25
    1786:	89 2b       	or	r24, r25
    1788:	09 f4       	brne	.+2      	; 0x178c <get_ticks+0xcc>
    178a:	4b c0       	rjmp	.+150    	; 0x1822 <get_ticks+0x162>
    178c:	89 81       	ldd	r24, Y+1	; 0x01
    178e:	f8 2f       	mov	r31, r24
    1790:	f0 78       	andi	r31, 0x80	; 128
    1792:	2f 2e       	mov	r2, r31
    1794:	8a 81       	ldd	r24, Y+2	; 0x02
    1796:	98 2f       	mov	r25, r24
    1798:	90 70       	andi	r25, 0x00	; 0
    179a:	39 2e       	mov	r3, r25
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	e8 2f       	mov	r30, r24
    17a0:	e0 70       	andi	r30, 0x00	; 0
    17a2:	4e 2e       	mov	r4, r30
    17a4:	8c 81       	ldd	r24, Y+4	; 0x04
    17a6:	f8 2f       	mov	r31, r24
    17a8:	f0 70       	andi	r31, 0x00	; 0
    17aa:	5f 2e       	mov	r5, r31
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	98 2f       	mov	r25, r24
    17b0:	90 70       	andi	r25, 0x00	; 0
    17b2:	69 2e       	mov	r6, r25
    17b4:	8e 81       	ldd	r24, Y+6	; 0x06
    17b6:	e8 2f       	mov	r30, r24
    17b8:	e0 70       	andi	r30, 0x00	; 0
    17ba:	7e 2e       	mov	r7, r30
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	f8 2f       	mov	r31, r24
    17c0:	f0 70       	andi	r31, 0x00	; 0
    17c2:	8f 2e       	mov	r8, r31
    17c4:	88 85       	ldd	r24, Y+8	; 0x08
    17c6:	98 2f       	mov	r25, r24
    17c8:	90 70       	andi	r25, 0x00	; 0
    17ca:	99 2e       	mov	r9, r25
    17cc:	22 2d       	mov	r18, r2
    17ce:	33 2d       	mov	r19, r3
    17d0:	44 2d       	mov	r20, r4
    17d2:	55 2d       	mov	r21, r5
    17d4:	66 2d       	mov	r22, r6
    17d6:	77 2d       	mov	r23, r7
    17d8:	88 2d       	mov	r24, r8
    17da:	99 2d       	mov	r25, r9
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	0e 94 12 14 	call	0x2824	; 0x2824 <__cmpdi2_s8>
    17e2:	f9 f4       	brne	.+62     	; 0x1822 <get_ticks+0x162>
		val += 256;         // then add overflow
    17e4:	29 81       	ldd	r18, Y+1	; 0x01
    17e6:	3a 81       	ldd	r19, Y+2	; 0x02
    17e8:	4b 81       	ldd	r20, Y+3	; 0x03
    17ea:	5c 81       	ldd	r21, Y+4	; 0x04
    17ec:	6d 81       	ldd	r22, Y+5	; 0x05
    17ee:	7e 81       	ldd	r23, Y+6	; 0x06
    17f0:	8f 81       	ldd	r24, Y+7	; 0x07
    17f2:	98 85       	ldd	r25, Y+8	; 0x08
    17f4:	3f 5f       	subi	r19, 0xFF	; 255
    17f6:	4f 4f       	sbci	r20, 0xFF	; 255
    17f8:	5f 4f       	sbci	r21, 0xFF	; 255
    17fa:	6f 4f       	sbci	r22, 0xFF	; 255
    17fc:	7f 4f       	sbci	r23, 0xFF	; 255
    17fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1800:	9f 4f       	sbci	r25, 0xFF	; 255
    1802:	a2 2e       	mov	r10, r18
    1804:	b3 2e       	mov	r11, r19
    1806:	c4 2e       	mov	r12, r20
    1808:	d5 2e       	mov	r13, r21
    180a:	e6 2e       	mov	r14, r22
    180c:	f7 2e       	mov	r15, r23
    180e:	08 2f       	mov	r16, r24
    1810:	19 2f       	mov	r17, r25
    1812:	a9 82       	std	Y+1, r10	; 0x01
    1814:	ba 82       	std	Y+2, r11	; 0x02
    1816:	cb 82       	std	Y+3, r12	; 0x03
    1818:	dc 82       	std	Y+4, r13	; 0x04
    181a:	ed 82       	std	Y+5, r14	; 0x05
    181c:	fe 82       	std	Y+6, r15	; 0x06
    181e:	0f 83       	std	Y+7, r16	; 0x07
    1820:	18 87       	std	Y+8, r17	; 0x08
	return val;
    1822:	29 81       	ldd	r18, Y+1	; 0x01
    1824:	3a 81       	ldd	r19, Y+2	; 0x02
    1826:	4b 81       	ldd	r20, Y+3	; 0x03
    1828:	5c 81       	ldd	r21, Y+4	; 0x04
    182a:	6d 81       	ldd	r22, Y+5	; 0x05
    182c:	7e 81       	ldd	r23, Y+6	; 0x06
    182e:	8f 81       	ldd	r24, Y+7	; 0x07
    1830:	98 85       	ldd	r25, Y+8	; 0x08
    1832:	a2 2e       	mov	r10, r18
    1834:	b3 2e       	mov	r11, r19
    1836:	c4 2e       	mov	r12, r20
    1838:	d5 2e       	mov	r13, r21
    183a:	e6 2e       	mov	r14, r22
    183c:	f7 2e       	mov	r15, r23
    183e:	08 2f       	mov	r16, r24
    1840:	19 2f       	mov	r17, r25
}
    1842:	2a 2d       	mov	r18, r10
    1844:	3b 2d       	mov	r19, r11
    1846:	4c 2d       	mov	r20, r12
    1848:	5d 2d       	mov	r21, r13
    184a:	6e 2d       	mov	r22, r14
    184c:	7f 2d       	mov	r23, r15
    184e:	80 2f       	mov	r24, r16
    1850:	91 2f       	mov	r25, r17
    1852:	61 96       	adiw	r28, 0x11	; 17
    1854:	0f b6       	in	r0, 0x3f	; 63
    1856:	f8 94       	cli
    1858:	de bf       	out	0x3e, r29	; 62
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	0f 91       	pop	r16
    1866:	ff 90       	pop	r15
    1868:	ef 90       	pop	r14
    186a:	df 90       	pop	r13
    186c:	cf 90       	pop	r12
    186e:	bf 90       	pop	r11
    1870:	af 90       	pop	r10
    1872:	9f 90       	pop	r9
    1874:	8f 90       	pop	r8
    1876:	7f 90       	pop	r7
    1878:	6f 90       	pop	r6
    187a:	5f 90       	pop	r5
    187c:	4f 90       	pop	r4
    187e:	3f 90       	pop	r3
    1880:	2f 90       	pop	r2
    1882:	08 95       	ret

00001884 <main>:
#include <stdio.h>
#include <avr/io.h>
#include "lcd.h"
#include "systemtime.h"
#define LT_IN 0
int main(void){
    1884:	2f 92       	push	r2
    1886:	3f 92       	push	r3
    1888:	4f 92       	push	r4
    188a:	5f 92       	push	r5
    188c:	6f 92       	push	r6
    188e:	7f 92       	push	r7
    1890:	8f 92       	push	r8
    1892:	9f 92       	push	r9
    1894:	af 92       	push	r10
    1896:	bf 92       	push	r11
    1898:	cf 92       	push	r12
    189a:	df 92       	push	r13
    189c:	ef 92       	push	r14
    189e:	ff 92       	push	r15
    18a0:	0f 93       	push	r16
    18a2:	1f 93       	push	r17
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	cd b7       	in	r28, 0x3d	; 61
    18aa:	de b7       	in	r29, 0x3e	; 62
    18ac:	c0 54       	subi	r28, 0x40	; 64
    18ae:	d1 09       	sbc	r29, r1
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61

	DDRB = DDRB | (1<<2);
    18ba:	84 e2       	ldi	r24, 0x24	; 36
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	24 e2       	ldi	r18, 0x24	; 36
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	20 81       	ld	r18, Z
    18c6:	24 60       	ori	r18, 0x04	; 4
    18c8:	fc 01       	movw	r30, r24
    18ca:	20 83       	st	Z, r18
	uint8_t ltFp, ltFn, state, in;
	uint64_t start, stop;
	double outTimer = 0.0;
    18cc:	1a 8a       	std	Y+18, r1	; 0x12
    18ce:	1b 8a       	std	Y+19, r1	; 0x13
    18d0:	1c 8a       	std	Y+20, r1	; 0x14
    18d2:	1d 8a       	std	Y+21, r1	; 0x15
	char str [40];
	//PORTC |= (1<<0);
	lcd_init();
    18d4:	0e 94 1e 04 	call	0x83c	; 0x83c <lcd_init>
	t2_init();
    18d8:	0e 94 39 0b 	call	0x1672	; 0x1672 <t2_init>

	// Simplen Text direkt ausgeben:
	lcd_pos(0,1);
    18dc:	61 e0       	ldi	r22, 0x01	; 1
    18de:	80 e0       	ldi	r24, 0x00	; 0
    18e0:	0e 94 97 0a 	call	0x152e	; 0x152e <lcd_pos>
	lcd_text( (char *)"Lichtschranke" );
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <lcd_text>
	// Formatierte Ausgabe:

	while(1){
		//_delay_ms(200);
		//Flankenauswertung
		in = !(PINC & (1<<LT_IN));
    18ec:	86 e2       	ldi	r24, 0x26	; 38
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	fc 01       	movw	r30, r24
    18f2:	80 81       	ld	r24, Z
    18f4:	88 2f       	mov	r24, r24
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	99 27       	eor	r25, r25
    18fc:	21 e0       	ldi	r18, 0x01	; 1
    18fe:	89 2b       	or	r24, r25
    1900:	09 f0       	breq	.+2      	; 0x1904 <main+0x80>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	2e 8b       	std	Y+22, r18	; 0x16
		ltFp = in && !state;
    1906:	8e 89       	ldd	r24, Y+22	; 0x16
    1908:	88 23       	and	r24, r24
    190a:	31 f0       	breq	.+12     	; 0x1918 <main+0x94>
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	88 23       	and	r24, r24
    1910:	19 f4       	brne	.+6      	; 0x1918 <main+0x94>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	02 c0       	rjmp	.+4      	; 0x191c <main+0x98>
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	8f 8b       	std	Y+23, r24	; 0x17
		ltFn = !in && state;
    191e:	8e 89       	ldd	r24, Y+22	; 0x16
    1920:	88 23       	and	r24, r24
    1922:	31 f4       	brne	.+12     	; 0x1930 <main+0xac>
    1924:	89 81       	ldd	r24, Y+1	; 0x01
    1926:	88 23       	and	r24, r24
    1928:	19 f0       	breq	.+6      	; 0x1930 <main+0xac>
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <main+0xb0>
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	88 8f       	std	Y+24, r24	; 0x18
		state = in;
    1936:	8e 89       	ldd	r24, Y+22	; 0x16
    1938:	89 83       	std	Y+1, r24	; 0x01
		//END Flankenauswertung

		if ( !(PINC & (1<<LT_IN) ))
    193a:	86 e2       	ldi	r24, 0x26	; 38
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	fc 01       	movw	r30, r24
    1940:	80 81       	ld	r24, Z
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	99 27       	eor	r25, r25
    194a:	89 2b       	or	r24, r25
    194c:	51 f4       	brne	.+20     	; 0x1962 <main+0xde>
		{
			//lcd_pos(0,1);
			//lcd_text( (char *)"LS belegt" );
			PORTB = PORTB | (1<<2);
    194e:	85 e2       	ldi	r24, 0x25	; 37
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	25 e2       	ldi	r18, 0x25	; 37
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	f9 01       	movw	r30, r18
    1958:	20 81       	ld	r18, Z
    195a:	24 60       	ori	r18, 0x04	; 4
    195c:	fc 01       	movw	r30, r24
    195e:	20 83       	st	Z, r18
    1960:	09 c0       	rjmp	.+18     	; 0x1974 <main+0xf0>
			}
		else
		{
		//lcd_pos(0,1);
			//lcd_text( (char *)"LS frei" );
			PORTB = PORTB &~(1<<2);
    1962:	85 e2       	ldi	r24, 0x25	; 37
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	25 e2       	ldi	r18, 0x25	; 37
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	f9 01       	movw	r30, r18
    196c:	20 81       	ld	r18, Z
    196e:	2b 7f       	andi	r18, 0xFB	; 251
    1970:	fc 01       	movw	r30, r24
    1972:	20 83       	st	Z, r18
		}

		if (ltFp)
    1974:	8f 89       	ldd	r24, Y+23	; 0x17
    1976:	88 23       	and	r24, r24
    1978:	91 f0       	breq	.+36     	; 0x199e <main+0x11a>
		{
			start = get_ticks();
    197a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <get_ticks>
    197e:	a2 2e       	mov	r10, r18
    1980:	b3 2e       	mov	r11, r19
    1982:	c4 2e       	mov	r12, r20
    1984:	d5 2e       	mov	r13, r21
    1986:	e6 2e       	mov	r14, r22
    1988:	f7 2e       	mov	r15, r23
    198a:	08 2f       	mov	r16, r24
    198c:	19 2f       	mov	r17, r25
    198e:	aa 82       	std	Y+2, r10	; 0x02
    1990:	bb 82       	std	Y+3, r11	; 0x03
    1992:	cc 82       	std	Y+4, r12	; 0x04
    1994:	dd 82       	std	Y+5, r13	; 0x05
    1996:	ee 82       	std	Y+6, r14	; 0x06
    1998:	ff 82       	std	Y+7, r15	; 0x07
    199a:	08 87       	std	Y+8, r16	; 0x08
    199c:	19 87       	std	Y+9, r17	; 0x09
		}
		if (ltFn)
    199e:	88 8d       	ldd	r24, Y+24	; 0x18
    19a0:	88 23       	and	r24, r24
    19a2:	91 f0       	breq	.+36     	; 0x19c8 <main+0x144>
			stop = get_ticks();
    19a4:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <get_ticks>
    19a8:	a2 2e       	mov	r10, r18
    19aa:	b3 2e       	mov	r11, r19
    19ac:	c4 2e       	mov	r12, r20
    19ae:	d5 2e       	mov	r13, r21
    19b0:	e6 2e       	mov	r14, r22
    19b2:	f7 2e       	mov	r15, r23
    19b4:	08 2f       	mov	r16, r24
    19b6:	19 2f       	mov	r17, r25
    19b8:	aa 86       	std	Y+10, r10	; 0x0a
    19ba:	bb 86       	std	Y+11, r11	; 0x0b
    19bc:	cc 86       	std	Y+12, r12	; 0x0c
    19be:	dd 86       	std	Y+13, r13	; 0x0d
    19c0:	ee 86       	std	Y+14, r14	; 0x0e
    19c2:	ff 86       	std	Y+15, r15	; 0x0f
    19c4:	08 8b       	std	Y+16, r16	; 0x10
    19c6:	19 8b       	std	Y+17, r17	; 0x11
		

		if (outTimer < get_ticks()*SEC + 1)
    19c8:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <get_ticks>
    19cc:	a2 2e       	mov	r10, r18
    19ce:	b3 2e       	mov	r11, r19
    19d0:	c4 2e       	mov	r12, r20
    19d2:	d5 2e       	mov	r13, r21
    19d4:	e6 2e       	mov	r14, r22
    19d6:	f7 2e       	mov	r15, r23
    19d8:	08 2f       	mov	r16, r24
    19da:	19 2f       	mov	r17, r25
    19dc:	2a 2d       	mov	r18, r10
    19de:	3b 2d       	mov	r19, r11
    19e0:	4c 2d       	mov	r20, r12
    19e2:	5d 2d       	mov	r21, r13
    19e4:	6e 2d       	mov	r22, r14
    19e6:	7f 2d       	mov	r23, r15
    19e8:	80 2f       	mov	r24, r16
    19ea:	91 2f       	mov	r25, r17
    19ec:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__floatundisf>
    19f0:	dc 01       	movw	r26, r24
    19f2:	cb 01       	movw	r24, r22
    19f4:	2d eb       	ldi	r18, 0xBD	; 189
    19f6:	37 e3       	ldi	r19, 0x37	; 55
    19f8:	46 e0       	ldi	r20, 0x06	; 6
    19fa:	55 e3       	ldi	r21, 0x35	; 53
    19fc:	bc 01       	movw	r22, r24
    19fe:	cd 01       	movw	r24, r26
    1a00:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e8       	ldi	r20, 0x80	; 128
    1a0e:	5f e3       	ldi	r21, 0x3F	; 63
    1a10:	bc 01       	movw	r22, r24
    1a12:	cd 01       	movw	r24, r26
    1a14:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__addsf3>
    1a18:	dc 01       	movw	r26, r24
    1a1a:	cb 01       	movw	r24, r22
    1a1c:	2a 89       	ldd	r18, Y+18	; 0x12
    1a1e:	3b 89       	ldd	r19, Y+19	; 0x13
    1a20:	4c 89       	ldd	r20, Y+20	; 0x14
    1a22:	5d 89       	ldd	r21, Y+21	; 0x15
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <__gesf2>
    1a2c:	18 16       	cp	r1, r24
    1a2e:	0c f0       	brlt	.+2      	; 0x1a32 <main+0x1ae>
    1a30:	f1 c0       	rjmp	.+482    	; 0x1c14 <main+0x390>
		//if (ltFn)
		{
			lcd_pos (0,1);
    1a32:	61 e0       	ldi	r22, 0x01	; 1
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	0e 94 97 0a 	call	0x152e	; 0x152e <lcd_pos>
			if (start < stop)
    1a3a:	aa 80       	ldd	r10, Y+2	; 0x02
    1a3c:	bb 80       	ldd	r11, Y+3	; 0x03
    1a3e:	cc 80       	ldd	r12, Y+4	; 0x04
    1a40:	dd 80       	ldd	r13, Y+5	; 0x05
    1a42:	ee 80       	ldd	r14, Y+6	; 0x06
    1a44:	ff 80       	ldd	r15, Y+7	; 0x07
    1a46:	08 85       	ldd	r16, Y+8	; 0x08
    1a48:	19 85       	ldd	r17, Y+9	; 0x09
    1a4a:	2a 84       	ldd	r2, Y+10	; 0x0a
    1a4c:	3b 84       	ldd	r3, Y+11	; 0x0b
    1a4e:	4c 84       	ldd	r4, Y+12	; 0x0c
    1a50:	5d 84       	ldd	r5, Y+13	; 0x0d
    1a52:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a54:	7f 84       	ldd	r7, Y+15	; 0x0f
    1a56:	88 88       	ldd	r8, Y+16	; 0x10
    1a58:	99 88       	ldd	r9, Y+17	; 0x11
    1a5a:	2a 2d       	mov	r18, r10
    1a5c:	3b 2d       	mov	r19, r11
    1a5e:	4c 2d       	mov	r20, r12
    1a60:	5d 2d       	mov	r21, r13
    1a62:	6e 2d       	mov	r22, r14
    1a64:	7f 2d       	mov	r23, r15
    1a66:	80 2f       	mov	r24, r16
    1a68:	91 2f       	mov	r25, r17
    1a6a:	a2 2c       	mov	r10, r2
    1a6c:	b3 2c       	mov	r11, r3
    1a6e:	c4 2c       	mov	r12, r4
    1a70:	d5 2c       	mov	r13, r5
    1a72:	e6 2c       	mov	r14, r6
    1a74:	f7 2c       	mov	r15, r7
    1a76:	08 2d       	mov	r16, r8
    1a78:	19 2d       	mov	r17, r9
    1a7a:	0e 94 09 14 	call	0x2812	; 0x2812 <__cmpdi2>
    1a7e:	08 f0       	brcs	.+2      	; 0x1a82 <main+0x1fe>
    1a80:	4e c0       	rjmp	.+156    	; 0x1b1e <main+0x29a>
				sprintf(str, "Zeit: %g", ((stop - start) * SEC));
    1a82:	2a 85       	ldd	r18, Y+10	; 0x0a
    1a84:	3b 85       	ldd	r19, Y+11	; 0x0b
    1a86:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a88:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a8a:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a8c:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a8e:	88 89       	ldd	r24, Y+16	; 0x10
    1a90:	99 89       	ldd	r25, Y+17	; 0x11
    1a92:	aa 80       	ldd	r10, Y+2	; 0x02
    1a94:	bb 80       	ldd	r11, Y+3	; 0x03
    1a96:	cc 80       	ldd	r12, Y+4	; 0x04
    1a98:	dd 80       	ldd	r13, Y+5	; 0x05
    1a9a:	ee 80       	ldd	r14, Y+6	; 0x06
    1a9c:	ff 80       	ldd	r15, Y+7	; 0x07
    1a9e:	08 85       	ldd	r16, Y+8	; 0x08
    1aa0:	19 85       	ldd	r17, Y+9	; 0x09
    1aa2:	0e 94 00 14 	call	0x2800	; 0x2800 <__subdi3>
    1aa6:	a2 2e       	mov	r10, r18
    1aa8:	b3 2e       	mov	r11, r19
    1aaa:	c4 2e       	mov	r12, r20
    1aac:	d5 2e       	mov	r13, r21
    1aae:	e6 2e       	mov	r14, r22
    1ab0:	f7 2e       	mov	r15, r23
    1ab2:	08 2f       	mov	r16, r24
    1ab4:	19 2f       	mov	r17, r25
    1ab6:	2a 2d       	mov	r18, r10
    1ab8:	3b 2d       	mov	r19, r11
    1aba:	4c 2d       	mov	r20, r12
    1abc:	5d 2d       	mov	r21, r13
    1abe:	6e 2d       	mov	r22, r14
    1ac0:	7f 2d       	mov	r23, r15
    1ac2:	80 2f       	mov	r24, r16
    1ac4:	91 2f       	mov	r25, r17
    1ac6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__floatundisf>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	2d eb       	ldi	r18, 0xBD	; 189
    1ad0:	37 e3       	ldi	r19, 0x37	; 55
    1ad2:	46 e0       	ldi	r20, 0x06	; 6
    1ad4:	55 e3       	ldi	r21, 0x35	; 53
    1ad6:	bc 01       	movw	r22, r24
    1ad8:	cd 01       	movw	r24, r26
    1ada:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	2b 2f       	mov	r18, r27
    1ae4:	2f 93       	push	r18
    1ae6:	2a 2f       	mov	r18, r26
    1ae8:	2f 93       	push	r18
    1aea:	29 2f       	mov	r18, r25
    1aec:	2f 93       	push	r18
    1aee:	8f 93       	push	r24
    1af0:	8e e0       	ldi	r24, 0x0E	; 14
    1af2:	91 e0       	ldi	r25, 0x01	; 1
    1af4:	89 2f       	mov	r24, r25
    1af6:	8f 93       	push	r24
    1af8:	8e e0       	ldi	r24, 0x0E	; 14
    1afa:	91 e0       	ldi	r25, 0x01	; 1
    1afc:	8f 93       	push	r24
    1afe:	ce 01       	movw	r24, r28
    1b00:	49 96       	adiw	r24, 0x19	; 25
    1b02:	29 2f       	mov	r18, r25
    1b04:	2f 93       	push	r18
    1b06:	8f 93       	push	r24
    1b08:	0e 94 48 15 	call	0x2a90	; 0x2a90 <sprintf>
    1b0c:	8d b7       	in	r24, 0x3d	; 61
    1b0e:	9e b7       	in	r25, 0x3e	; 62
    1b10:	08 96       	adiw	r24, 0x08	; 8
    1b12:	0f b6       	in	r0, 0x3f	; 63
    1b14:	f8 94       	cli
    1b16:	de bf       	out	0x3e, r29	; 62
    1b18:	0f be       	out	0x3f, r0	; 63
    1b1a:	cd bf       	out	0x3d, r28	; 61
    1b1c:	57 c0       	rjmp	.+174    	; 0x1bcc <main+0x348>
			else
				sprintf(str, "Zeit: %g", ((get_ticks()-start) * SEC));
    1b1e:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <get_ticks>
    1b22:	a2 2e       	mov	r10, r18
    1b24:	b3 2e       	mov	r11, r19
    1b26:	c4 2e       	mov	r12, r20
    1b28:	d5 2e       	mov	r13, r21
    1b2a:	e6 2e       	mov	r14, r22
    1b2c:	f7 2e       	mov	r15, r23
    1b2e:	08 2f       	mov	r16, r24
    1b30:	19 2f       	mov	r17, r25
    1b32:	2a 2d       	mov	r18, r10
    1b34:	3b 2d       	mov	r19, r11
    1b36:	4c 2d       	mov	r20, r12
    1b38:	5d 2d       	mov	r21, r13
    1b3a:	6e 2d       	mov	r22, r14
    1b3c:	7f 2d       	mov	r23, r15
    1b3e:	80 2f       	mov	r24, r16
    1b40:	91 2f       	mov	r25, r17
    1b42:	aa 80       	ldd	r10, Y+2	; 0x02
    1b44:	bb 80       	ldd	r11, Y+3	; 0x03
    1b46:	cc 80       	ldd	r12, Y+4	; 0x04
    1b48:	dd 80       	ldd	r13, Y+5	; 0x05
    1b4a:	ee 80       	ldd	r14, Y+6	; 0x06
    1b4c:	ff 80       	ldd	r15, Y+7	; 0x07
    1b4e:	08 85       	ldd	r16, Y+8	; 0x08
    1b50:	19 85       	ldd	r17, Y+9	; 0x09
    1b52:	0e 94 00 14 	call	0x2800	; 0x2800 <__subdi3>
    1b56:	a2 2e       	mov	r10, r18
    1b58:	b3 2e       	mov	r11, r19
    1b5a:	c4 2e       	mov	r12, r20
    1b5c:	d5 2e       	mov	r13, r21
    1b5e:	e6 2e       	mov	r14, r22
    1b60:	f7 2e       	mov	r15, r23
    1b62:	08 2f       	mov	r16, r24
    1b64:	19 2f       	mov	r17, r25
    1b66:	2a 2d       	mov	r18, r10
    1b68:	3b 2d       	mov	r19, r11
    1b6a:	4c 2d       	mov	r20, r12
    1b6c:	5d 2d       	mov	r21, r13
    1b6e:	6e 2d       	mov	r22, r14
    1b70:	7f 2d       	mov	r23, r15
    1b72:	80 2f       	mov	r24, r16
    1b74:	91 2f       	mov	r25, r17
    1b76:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__floatundisf>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	2d eb       	ldi	r18, 0xBD	; 189
    1b80:	37 e3       	ldi	r19, 0x37	; 55
    1b82:	46 e0       	ldi	r20, 0x06	; 6
    1b84:	55 e3       	ldi	r21, 0x35	; 53
    1b86:	bc 01       	movw	r22, r24
    1b88:	cd 01       	movw	r24, r26
    1b8a:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <__mulsf3>
    1b8e:	dc 01       	movw	r26, r24
    1b90:	cb 01       	movw	r24, r22
    1b92:	2b 2f       	mov	r18, r27
    1b94:	2f 93       	push	r18
    1b96:	2a 2f       	mov	r18, r26
    1b98:	2f 93       	push	r18
    1b9a:	29 2f       	mov	r18, r25
    1b9c:	2f 93       	push	r18
    1b9e:	8f 93       	push	r24
    1ba0:	8e e0       	ldi	r24, 0x0E	; 14
    1ba2:	91 e0       	ldi	r25, 0x01	; 1
    1ba4:	89 2f       	mov	r24, r25
    1ba6:	8f 93       	push	r24
    1ba8:	8e e0       	ldi	r24, 0x0E	; 14
    1baa:	91 e0       	ldi	r25, 0x01	; 1
    1bac:	8f 93       	push	r24
    1bae:	ce 01       	movw	r24, r28
    1bb0:	49 96       	adiw	r24, 0x19	; 25
    1bb2:	29 2f       	mov	r18, r25
    1bb4:	2f 93       	push	r18
    1bb6:	8f 93       	push	r24
    1bb8:	0e 94 48 15 	call	0x2a90	; 0x2a90 <sprintf>
    1bbc:	ed b7       	in	r30, 0x3d	; 61
    1bbe:	fe b7       	in	r31, 0x3e	; 62
    1bc0:	38 96       	adiw	r30, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	de bf       	out	0x3e, r29	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	cd bf       	out	0x3d, r28	; 61
			lcd_text(str);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	49 96       	adiw	r24, 0x19	; 25
    1bd0:	0e 94 b0 0a 	call	0x1560	; 0x1560 <lcd_text>
			outTimer += 0.2;
    1bd4:	2d ec       	ldi	r18, 0xCD	; 205
    1bd6:	3c ec       	ldi	r19, 0xCC	; 204
    1bd8:	4c e4       	ldi	r20, 0x4C	; 76
    1bda:	5e e3       	ldi	r21, 0x3E	; 62
    1bdc:	6a 89       	ldd	r22, Y+18	; 0x12
    1bde:	7b 89       	ldd	r23, Y+19	; 0x13
    1be0:	8c 89       	ldd	r24, Y+20	; 0x14
    1be2:	9d 89       	ldd	r25, Y+21	; 0x15
    1be4:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <__addsf3>
    1be8:	dc 01       	movw	r26, r24
    1bea:	cb 01       	movw	r24, r22
    1bec:	8a 8b       	std	Y+18, r24	; 0x12
    1bee:	9b 8b       	std	Y+19, r25	; 0x13
    1bf0:	ac 8b       	std	Y+20, r26	; 0x14
    1bf2:	bd 8b       	std	Y+21, r27	; 0x15

			lcd_pos(1,1);
    1bf4:	61 e0       	ldi	r22, 0x01	; 1
    1bf6:	81 e0       	ldi	r24, 0x01	; 1
    1bf8:	0e 94 97 0a 	call	0x152e	; 0x152e <lcd_pos>
			if (in)				
    1bfc:	8e 89       	ldd	r24, Y+22	; 0x16
    1bfe:	88 23       	and	r24, r24
    1c00:	29 f0       	breq	.+10     	; 0x1c0c <main+0x388>
				lcd_text ("LT belegt");
    1c02:	87 e1       	ldi	r24, 0x17	; 23
    1c04:	91 e0       	ldi	r25, 0x01	; 1
    1c06:	0e 94 b0 0a 	call	0x1560	; 0x1560 <lcd_text>
    1c0a:	70 ce       	rjmp	.-800    	; 0x18ec <main+0x68>
			else
				lcd_text ("LT Frei    ");
    1c0c:	81 e2       	ldi	r24, 0x21	; 33
    1c0e:	91 e0       	ldi	r25, 0x01	; 1
    1c10:	0e 94 b0 0a 	call	0x1560	; 0x1560 <lcd_text>
		}

	}
    1c14:	6b ce       	rjmp	.-810    	; 0x18ec <main+0x68>

00001c16 <__subsf3>:
    1c16:	50 58       	subi	r21, 0x80	; 128

00001c18 <__addsf3>:
    1c18:	bb 27       	eor	r27, r27
    1c1a:	aa 27       	eor	r26, r26
    1c1c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__addsf3x>
    1c20:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__fp_round>
    1c24:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1c28:	38 f0       	brcs	.+14     	; 0x1c38 <__addsf3+0x20>
    1c2a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1c2e:	20 f0       	brcs	.+8      	; 0x1c38 <__addsf3+0x20>
    1c30:	39 f4       	brne	.+14     	; 0x1c40 <__addsf3+0x28>
    1c32:	9f 3f       	cpi	r25, 0xFF	; 255
    1c34:	19 f4       	brne	.+6      	; 0x1c3c <__addsf3+0x24>
    1c36:	26 f4       	brtc	.+8      	; 0x1c40 <__addsf3+0x28>
    1c38:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_nan>
    1c3c:	0e f4       	brtc	.+2      	; 0x1c40 <__addsf3+0x28>
    1c3e:	e0 95       	com	r30
    1c40:	e7 fb       	bst	r30, 7
    1c42:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_inf>

00001c46 <__addsf3x>:
    1c46:	e9 2f       	mov	r30, r25
    1c48:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_split3>
    1c4c:	58 f3       	brcs	.-42     	; 0x1c24 <__addsf3+0xc>
    1c4e:	ba 17       	cp	r27, r26
    1c50:	62 07       	cpc	r22, r18
    1c52:	73 07       	cpc	r23, r19
    1c54:	84 07       	cpc	r24, r20
    1c56:	95 07       	cpc	r25, r21
    1c58:	20 f0       	brcs	.+8      	; 0x1c62 <__addsf3x+0x1c>
    1c5a:	79 f4       	brne	.+30     	; 0x1c7a <__addsf3x+0x34>
    1c5c:	a6 f5       	brtc	.+104    	; 0x1cc6 <__addsf3x+0x80>
    1c5e:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_zero>
    1c62:	0e f4       	brtc	.+2      	; 0x1c66 <__addsf3x+0x20>
    1c64:	e0 95       	com	r30
    1c66:	0b 2e       	mov	r0, r27
    1c68:	ba 2f       	mov	r27, r26
    1c6a:	a0 2d       	mov	r26, r0
    1c6c:	0b 01       	movw	r0, r22
    1c6e:	b9 01       	movw	r22, r18
    1c70:	90 01       	movw	r18, r0
    1c72:	0c 01       	movw	r0, r24
    1c74:	ca 01       	movw	r24, r20
    1c76:	a0 01       	movw	r20, r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	ff 27       	eor	r31, r31
    1c7c:	59 1b       	sub	r21, r25
    1c7e:	99 f0       	breq	.+38     	; 0x1ca6 <__addsf3x+0x60>
    1c80:	59 3f       	cpi	r21, 0xF9	; 249
    1c82:	50 f4       	brcc	.+20     	; 0x1c98 <__addsf3x+0x52>
    1c84:	50 3e       	cpi	r21, 0xE0	; 224
    1c86:	68 f1       	brcs	.+90     	; 0x1ce2 <__addsf3x+0x9c>
    1c88:	1a 16       	cp	r1, r26
    1c8a:	f0 40       	sbci	r31, 0x00	; 0
    1c8c:	a2 2f       	mov	r26, r18
    1c8e:	23 2f       	mov	r18, r19
    1c90:	34 2f       	mov	r19, r20
    1c92:	44 27       	eor	r20, r20
    1c94:	58 5f       	subi	r21, 0xF8	; 248
    1c96:	f3 cf       	rjmp	.-26     	; 0x1c7e <__addsf3x+0x38>
    1c98:	46 95       	lsr	r20
    1c9a:	37 95       	ror	r19
    1c9c:	27 95       	ror	r18
    1c9e:	a7 95       	ror	r26
    1ca0:	f0 40       	sbci	r31, 0x00	; 0
    1ca2:	53 95       	inc	r21
    1ca4:	c9 f7       	brne	.-14     	; 0x1c98 <__addsf3x+0x52>
    1ca6:	7e f4       	brtc	.+30     	; 0x1cc6 <__addsf3x+0x80>
    1ca8:	1f 16       	cp	r1, r31
    1caa:	ba 0b       	sbc	r27, r26
    1cac:	62 0b       	sbc	r22, r18
    1cae:	73 0b       	sbc	r23, r19
    1cb0:	84 0b       	sbc	r24, r20
    1cb2:	ba f0       	brmi	.+46     	; 0x1ce2 <__addsf3x+0x9c>
    1cb4:	91 50       	subi	r25, 0x01	; 1
    1cb6:	a1 f0       	breq	.+40     	; 0x1ce0 <__addsf3x+0x9a>
    1cb8:	ff 0f       	add	r31, r31
    1cba:	bb 1f       	adc	r27, r27
    1cbc:	66 1f       	adc	r22, r22
    1cbe:	77 1f       	adc	r23, r23
    1cc0:	88 1f       	adc	r24, r24
    1cc2:	c2 f7       	brpl	.-16     	; 0x1cb4 <__addsf3x+0x6e>
    1cc4:	0e c0       	rjmp	.+28     	; 0x1ce2 <__addsf3x+0x9c>
    1cc6:	ba 0f       	add	r27, r26
    1cc8:	62 1f       	adc	r22, r18
    1cca:	73 1f       	adc	r23, r19
    1ccc:	84 1f       	adc	r24, r20
    1cce:	48 f4       	brcc	.+18     	; 0x1ce2 <__addsf3x+0x9c>
    1cd0:	87 95       	ror	r24
    1cd2:	77 95       	ror	r23
    1cd4:	67 95       	ror	r22
    1cd6:	b7 95       	ror	r27
    1cd8:	f7 95       	ror	r31
    1cda:	9e 3f       	cpi	r25, 0xFE	; 254
    1cdc:	08 f0       	brcs	.+2      	; 0x1ce0 <__addsf3x+0x9a>
    1cde:	b0 cf       	rjmp	.-160    	; 0x1c40 <__addsf3+0x28>
    1ce0:	93 95       	inc	r25
    1ce2:	88 0f       	add	r24, r24
    1ce4:	08 f0       	brcs	.+2      	; 0x1ce8 <__addsf3x+0xa2>
    1ce6:	99 27       	eor	r25, r25
    1ce8:	ee 0f       	add	r30, r30
    1cea:	97 95       	ror	r25
    1cec:	87 95       	ror	r24
    1cee:	08 95       	ret

00001cf0 <__cmpsf2>:
    1cf0:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fp_cmp>
    1cf4:	08 f4       	brcc	.+2      	; 0x1cf8 <__cmpsf2+0x8>
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	08 95       	ret

00001cfa <__divsf3>:
    1cfa:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <__divsf3x>
    1cfe:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__fp_round>
    1d02:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1d06:	58 f0       	brcs	.+22     	; 0x1d1e <__divsf3+0x24>
    1d08:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1d0c:	40 f0       	brcs	.+16     	; 0x1d1e <__divsf3+0x24>
    1d0e:	29 f4       	brne	.+10     	; 0x1d1a <__divsf3+0x20>
    1d10:	5f 3f       	cpi	r21, 0xFF	; 255
    1d12:	29 f0       	breq	.+10     	; 0x1d1e <__divsf3+0x24>
    1d14:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_inf>
    1d18:	51 11       	cpse	r21, r1
    1d1a:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__fp_szero>
    1d1e:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_nan>

00001d22 <__divsf3x>:
    1d22:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_split3>
    1d26:	68 f3       	brcs	.-38     	; 0x1d02 <__divsf3+0x8>

00001d28 <__divsf3_pse>:
    1d28:	99 23       	and	r25, r25
    1d2a:	b1 f3       	breq	.-20     	; 0x1d18 <__divsf3+0x1e>
    1d2c:	55 23       	and	r21, r21
    1d2e:	91 f3       	breq	.-28     	; 0x1d14 <__divsf3+0x1a>
    1d30:	95 1b       	sub	r25, r21
    1d32:	55 0b       	sbc	r21, r21
    1d34:	bb 27       	eor	r27, r27
    1d36:	aa 27       	eor	r26, r26
    1d38:	62 17       	cp	r22, r18
    1d3a:	73 07       	cpc	r23, r19
    1d3c:	84 07       	cpc	r24, r20
    1d3e:	38 f0       	brcs	.+14     	; 0x1d4e <__divsf3_pse+0x26>
    1d40:	9f 5f       	subi	r25, 0xFF	; 255
    1d42:	5f 4f       	sbci	r21, 0xFF	; 255
    1d44:	22 0f       	add	r18, r18
    1d46:	33 1f       	adc	r19, r19
    1d48:	44 1f       	adc	r20, r20
    1d4a:	aa 1f       	adc	r26, r26
    1d4c:	a9 f3       	breq	.-22     	; 0x1d38 <__divsf3_pse+0x10>
    1d4e:	35 d0       	rcall	.+106    	; 0x1dba <__divsf3_pse+0x92>
    1d50:	0e 2e       	mov	r0, r30
    1d52:	3a f0       	brmi	.+14     	; 0x1d62 <__divsf3_pse+0x3a>
    1d54:	e0 e8       	ldi	r30, 0x80	; 128
    1d56:	32 d0       	rcall	.+100    	; 0x1dbc <__divsf3_pse+0x94>
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	50 40       	sbci	r21, 0x00	; 0
    1d5c:	e6 95       	lsr	r30
    1d5e:	00 1c       	adc	r0, r0
    1d60:	ca f7       	brpl	.-14     	; 0x1d54 <__divsf3_pse+0x2c>
    1d62:	2b d0       	rcall	.+86     	; 0x1dba <__divsf3_pse+0x92>
    1d64:	fe 2f       	mov	r31, r30
    1d66:	29 d0       	rcall	.+82     	; 0x1dba <__divsf3_pse+0x92>
    1d68:	66 0f       	add	r22, r22
    1d6a:	77 1f       	adc	r23, r23
    1d6c:	88 1f       	adc	r24, r24
    1d6e:	bb 1f       	adc	r27, r27
    1d70:	26 17       	cp	r18, r22
    1d72:	37 07       	cpc	r19, r23
    1d74:	48 07       	cpc	r20, r24
    1d76:	ab 07       	cpc	r26, r27
    1d78:	b0 e8       	ldi	r27, 0x80	; 128
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <__divsf3_pse+0x56>
    1d7c:	bb 0b       	sbc	r27, r27
    1d7e:	80 2d       	mov	r24, r0
    1d80:	bf 01       	movw	r22, r30
    1d82:	ff 27       	eor	r31, r31
    1d84:	93 58       	subi	r25, 0x83	; 131
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	3a f0       	brmi	.+14     	; 0x1d98 <__divsf3_pse+0x70>
    1d8a:	9e 3f       	cpi	r25, 0xFE	; 254
    1d8c:	51 05       	cpc	r21, r1
    1d8e:	78 f0       	brcs	.+30     	; 0x1dae <__divsf3_pse+0x86>
    1d90:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_inf>
    1d94:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__fp_szero>
    1d98:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9a:	e4 f3       	brlt	.-8      	; 0x1d94 <__divsf3_pse+0x6c>
    1d9c:	98 3e       	cpi	r25, 0xE8	; 232
    1d9e:	d4 f3       	brlt	.-12     	; 0x1d94 <__divsf3_pse+0x6c>
    1da0:	86 95       	lsr	r24
    1da2:	77 95       	ror	r23
    1da4:	67 95       	ror	r22
    1da6:	b7 95       	ror	r27
    1da8:	f7 95       	ror	r31
    1daa:	9f 5f       	subi	r25, 0xFF	; 255
    1dac:	c9 f7       	brne	.-14     	; 0x1da0 <__divsf3_pse+0x78>
    1dae:	88 0f       	add	r24, r24
    1db0:	91 1d       	adc	r25, r1
    1db2:	96 95       	lsr	r25
    1db4:	87 95       	ror	r24
    1db6:	97 f9       	bld	r25, 7
    1db8:	08 95       	ret
    1dba:	e1 e0       	ldi	r30, 0x01	; 1
    1dbc:	66 0f       	add	r22, r22
    1dbe:	77 1f       	adc	r23, r23
    1dc0:	88 1f       	adc	r24, r24
    1dc2:	bb 1f       	adc	r27, r27
    1dc4:	62 17       	cp	r22, r18
    1dc6:	73 07       	cpc	r23, r19
    1dc8:	84 07       	cpc	r24, r20
    1dca:	ba 07       	cpc	r27, r26
    1dcc:	20 f0       	brcs	.+8      	; 0x1dd6 <__divsf3_pse+0xae>
    1dce:	62 1b       	sub	r22, r18
    1dd0:	73 0b       	sbc	r23, r19
    1dd2:	84 0b       	sbc	r24, r20
    1dd4:	ba 0b       	sbc	r27, r26
    1dd6:	ee 1f       	adc	r30, r30
    1dd8:	88 f7       	brcc	.-30     	; 0x1dbc <__divsf3_pse+0x94>
    1dda:	e0 95       	com	r30
    1ddc:	08 95       	ret

00001dde <__fixunssfsi>:
    1dde:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <__fp_splitA>
    1de2:	88 f0       	brcs	.+34     	; 0x1e06 <__fixunssfsi+0x28>
    1de4:	9f 57       	subi	r25, 0x7F	; 127
    1de6:	98 f0       	brcs	.+38     	; 0x1e0e <__fixunssfsi+0x30>
    1de8:	b9 2f       	mov	r27, r25
    1dea:	99 27       	eor	r25, r25
    1dec:	b7 51       	subi	r27, 0x17	; 23
    1dee:	b0 f0       	brcs	.+44     	; 0x1e1c <__fixunssfsi+0x3e>
    1df0:	e1 f0       	breq	.+56     	; 0x1e2a <__fixunssfsi+0x4c>
    1df2:	66 0f       	add	r22, r22
    1df4:	77 1f       	adc	r23, r23
    1df6:	88 1f       	adc	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	1a f0       	brmi	.+6      	; 0x1e02 <__fixunssfsi+0x24>
    1dfc:	ba 95       	dec	r27
    1dfe:	c9 f7       	brne	.-14     	; 0x1df2 <__fixunssfsi+0x14>
    1e00:	14 c0       	rjmp	.+40     	; 0x1e2a <__fixunssfsi+0x4c>
    1e02:	b1 30       	cpi	r27, 0x01	; 1
    1e04:	91 f0       	breq	.+36     	; 0x1e2a <__fixunssfsi+0x4c>
    1e06:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <__fp_zero>
    1e0a:	b1 e0       	ldi	r27, 0x01	; 1
    1e0c:	08 95       	ret
    1e0e:	0c 94 ca 0f 	jmp	0x1f94	; 0x1f94 <__fp_zero>
    1e12:	67 2f       	mov	r22, r23
    1e14:	78 2f       	mov	r23, r24
    1e16:	88 27       	eor	r24, r24
    1e18:	b8 5f       	subi	r27, 0xF8	; 248
    1e1a:	39 f0       	breq	.+14     	; 0x1e2a <__fixunssfsi+0x4c>
    1e1c:	b9 3f       	cpi	r27, 0xF9	; 249
    1e1e:	cc f3       	brlt	.-14     	; 0x1e12 <__fixunssfsi+0x34>
    1e20:	86 95       	lsr	r24
    1e22:	77 95       	ror	r23
    1e24:	67 95       	ror	r22
    1e26:	b3 95       	inc	r27
    1e28:	d9 f7       	brne	.-10     	; 0x1e20 <__fixunssfsi+0x42>
    1e2a:	3e f4       	brtc	.+14     	; 0x1e3a <__fixunssfsi+0x5c>
    1e2c:	90 95       	com	r25
    1e2e:	80 95       	com	r24
    1e30:	70 95       	com	r23
    1e32:	61 95       	neg	r22
    1e34:	7f 4f       	sbci	r23, 0xFF	; 255
    1e36:	8f 4f       	sbci	r24, 0xFF	; 255
    1e38:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3a:	08 95       	ret

00001e3c <__floatundisf>:
    1e3c:	e8 94       	clt

00001e3e <__fp_di2sf>:
    1e3e:	f9 2f       	mov	r31, r25
    1e40:	96 eb       	ldi	r25, 0xB6	; 182
    1e42:	ff 23       	and	r31, r31
    1e44:	81 f0       	breq	.+32     	; 0x1e66 <__fp_di2sf+0x28>
    1e46:	12 16       	cp	r1, r18
    1e48:	13 06       	cpc	r1, r19
    1e4a:	14 06       	cpc	r1, r20
    1e4c:	44 0b       	sbc	r20, r20
    1e4e:	93 95       	inc	r25
    1e50:	f6 95       	lsr	r31
    1e52:	87 95       	ror	r24
    1e54:	77 95       	ror	r23
    1e56:	67 95       	ror	r22
    1e58:	57 95       	ror	r21
    1e5a:	40 40       	sbci	r20, 0x00	; 0
    1e5c:	ff 23       	and	r31, r31
    1e5e:	b9 f7       	brne	.-18     	; 0x1e4e <__fp_di2sf+0x10>
    1e60:	1b c0       	rjmp	.+54     	; 0x1e98 <__fp_di2sf+0x5a>
    1e62:	99 27       	eor	r25, r25
    1e64:	08 95       	ret
    1e66:	88 23       	and	r24, r24
    1e68:	51 f4       	brne	.+20     	; 0x1e7e <__fp_di2sf+0x40>
    1e6a:	98 50       	subi	r25, 0x08	; 8
    1e6c:	d2 f7       	brpl	.-12     	; 0x1e62 <__fp_di2sf+0x24>
    1e6e:	87 2b       	or	r24, r23
    1e70:	76 2f       	mov	r23, r22
    1e72:	65 2f       	mov	r22, r21
    1e74:	54 2f       	mov	r21, r20
    1e76:	43 2f       	mov	r20, r19
    1e78:	32 2f       	mov	r19, r18
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	b1 f3       	breq	.-20     	; 0x1e6a <__fp_di2sf+0x2c>
    1e7e:	12 16       	cp	r1, r18
    1e80:	13 06       	cpc	r1, r19
    1e82:	14 06       	cpc	r1, r20
    1e84:	44 0b       	sbc	r20, r20
    1e86:	88 23       	and	r24, r24
    1e88:	3a f0       	brmi	.+14     	; 0x1e98 <__fp_di2sf+0x5a>
    1e8a:	9a 95       	dec	r25
    1e8c:	44 0f       	add	r20, r20
    1e8e:	55 1f       	adc	r21, r21
    1e90:	66 1f       	adc	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	ca f7       	brpl	.-14     	; 0x1e8a <__fp_di2sf+0x4c>
    1e98:	55 23       	and	r21, r21
    1e9a:	4a f4       	brpl	.+18     	; 0x1eae <__fp_di2sf+0x70>
    1e9c:	44 0f       	add	r20, r20
    1e9e:	55 1f       	adc	r21, r21
    1ea0:	11 f4       	brne	.+4      	; 0x1ea6 <__fp_di2sf+0x68>
    1ea2:	60 ff       	sbrs	r22, 0
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <__fp_di2sf+0x70>
    1ea6:	6f 5f       	subi	r22, 0xFF	; 255
    1ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    1eaa:	8f 4f       	sbci	r24, 0xFF	; 255
    1eac:	9f 4f       	sbci	r25, 0xFF	; 255
    1eae:	88 0f       	add	r24, r24
    1eb0:	96 95       	lsr	r25
    1eb2:	87 95       	ror	r24
    1eb4:	97 f9       	bld	r25, 7
    1eb6:	08 95       	ret

00001eb8 <__fp_cmp>:
    1eb8:	99 0f       	add	r25, r25
    1eba:	00 08       	sbc	r0, r0
    1ebc:	55 0f       	add	r21, r21
    1ebe:	aa 0b       	sbc	r26, r26
    1ec0:	e0 e8       	ldi	r30, 0x80	; 128
    1ec2:	fe ef       	ldi	r31, 0xFE	; 254
    1ec4:	16 16       	cp	r1, r22
    1ec6:	17 06       	cpc	r1, r23
    1ec8:	e8 07       	cpc	r30, r24
    1eca:	f9 07       	cpc	r31, r25
    1ecc:	c0 f0       	brcs	.+48     	; 0x1efe <__fp_cmp+0x46>
    1ece:	12 16       	cp	r1, r18
    1ed0:	13 06       	cpc	r1, r19
    1ed2:	e4 07       	cpc	r30, r20
    1ed4:	f5 07       	cpc	r31, r21
    1ed6:	98 f0       	brcs	.+38     	; 0x1efe <__fp_cmp+0x46>
    1ed8:	62 1b       	sub	r22, r18
    1eda:	73 0b       	sbc	r23, r19
    1edc:	84 0b       	sbc	r24, r20
    1ede:	95 0b       	sbc	r25, r21
    1ee0:	39 f4       	brne	.+14     	; 0x1ef0 <__fp_cmp+0x38>
    1ee2:	0a 26       	eor	r0, r26
    1ee4:	61 f0       	breq	.+24     	; 0x1efe <__fp_cmp+0x46>
    1ee6:	23 2b       	or	r18, r19
    1ee8:	24 2b       	or	r18, r20
    1eea:	25 2b       	or	r18, r21
    1eec:	21 f4       	brne	.+8      	; 0x1ef6 <__fp_cmp+0x3e>
    1eee:	08 95       	ret
    1ef0:	0a 26       	eor	r0, r26
    1ef2:	09 f4       	brne	.+2      	; 0x1ef6 <__fp_cmp+0x3e>
    1ef4:	a1 40       	sbci	r26, 0x01	; 1
    1ef6:	a6 95       	lsr	r26
    1ef8:	8f ef       	ldi	r24, 0xFF	; 255
    1efa:	81 1d       	adc	r24, r1
    1efc:	81 1d       	adc	r24, r1
    1efe:	08 95       	ret

00001f00 <__fp_inf>:
    1f00:	97 f9       	bld	r25, 7
    1f02:	9f 67       	ori	r25, 0x7F	; 127
    1f04:	80 e8       	ldi	r24, 0x80	; 128
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	60 e0       	ldi	r22, 0x00	; 0
    1f0a:	08 95       	ret

00001f0c <__fp_nan>:
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	80 ec       	ldi	r24, 0xC0	; 192
    1f10:	08 95       	ret

00001f12 <__fp_pscA>:
    1f12:	00 24       	eor	r0, r0
    1f14:	0a 94       	dec	r0
    1f16:	16 16       	cp	r1, r22
    1f18:	17 06       	cpc	r1, r23
    1f1a:	18 06       	cpc	r1, r24
    1f1c:	09 06       	cpc	r0, r25
    1f1e:	08 95       	ret

00001f20 <__fp_pscB>:
    1f20:	00 24       	eor	r0, r0
    1f22:	0a 94       	dec	r0
    1f24:	12 16       	cp	r1, r18
    1f26:	13 06       	cpc	r1, r19
    1f28:	14 06       	cpc	r1, r20
    1f2a:	05 06       	cpc	r0, r21
    1f2c:	08 95       	ret

00001f2e <__fp_round>:
    1f2e:	09 2e       	mov	r0, r25
    1f30:	03 94       	inc	r0
    1f32:	00 0c       	add	r0, r0
    1f34:	11 f4       	brne	.+4      	; 0x1f3a <__fp_round+0xc>
    1f36:	88 23       	and	r24, r24
    1f38:	52 f0       	brmi	.+20     	; 0x1f4e <__fp_round+0x20>
    1f3a:	bb 0f       	add	r27, r27
    1f3c:	40 f4       	brcc	.+16     	; 0x1f4e <__fp_round+0x20>
    1f3e:	bf 2b       	or	r27, r31
    1f40:	11 f4       	brne	.+4      	; 0x1f46 <__fp_round+0x18>
    1f42:	60 ff       	sbrs	r22, 0
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <__fp_round+0x20>
    1f46:	6f 5f       	subi	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	8f 4f       	sbci	r24, 0xFF	; 255
    1f4c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f4e:	08 95       	ret

00001f50 <__fp_split3>:
    1f50:	57 fd       	sbrc	r21, 7
    1f52:	90 58       	subi	r25, 0x80	; 128
    1f54:	44 0f       	add	r20, r20
    1f56:	55 1f       	adc	r21, r21
    1f58:	59 f0       	breq	.+22     	; 0x1f70 <__fp_splitA+0x10>
    1f5a:	5f 3f       	cpi	r21, 0xFF	; 255
    1f5c:	71 f0       	breq	.+28     	; 0x1f7a <__fp_splitA+0x1a>
    1f5e:	47 95       	ror	r20

00001f60 <__fp_splitA>:
    1f60:	88 0f       	add	r24, r24
    1f62:	97 fb       	bst	r25, 7
    1f64:	99 1f       	adc	r25, r25
    1f66:	61 f0       	breq	.+24     	; 0x1f80 <__fp_splitA+0x20>
    1f68:	9f 3f       	cpi	r25, 0xFF	; 255
    1f6a:	79 f0       	breq	.+30     	; 0x1f8a <__fp_splitA+0x2a>
    1f6c:	87 95       	ror	r24
    1f6e:	08 95       	ret
    1f70:	12 16       	cp	r1, r18
    1f72:	13 06       	cpc	r1, r19
    1f74:	14 06       	cpc	r1, r20
    1f76:	55 1f       	adc	r21, r21
    1f78:	f2 cf       	rjmp	.-28     	; 0x1f5e <__fp_split3+0xe>
    1f7a:	46 95       	lsr	r20
    1f7c:	f1 df       	rcall	.-30     	; 0x1f60 <__fp_splitA>
    1f7e:	08 c0       	rjmp	.+16     	; 0x1f90 <__fp_splitA+0x30>
    1f80:	16 16       	cp	r1, r22
    1f82:	17 06       	cpc	r1, r23
    1f84:	18 06       	cpc	r1, r24
    1f86:	99 1f       	adc	r25, r25
    1f88:	f1 cf       	rjmp	.-30     	; 0x1f6c <__fp_splitA+0xc>
    1f8a:	86 95       	lsr	r24
    1f8c:	71 05       	cpc	r23, r1
    1f8e:	61 05       	cpc	r22, r1
    1f90:	08 94       	sec
    1f92:	08 95       	ret

00001f94 <__fp_zero>:
    1f94:	e8 94       	clt

00001f96 <__fp_szero>:
    1f96:	bb 27       	eor	r27, r27
    1f98:	66 27       	eor	r22, r22
    1f9a:	77 27       	eor	r23, r23
    1f9c:	cb 01       	movw	r24, r22
    1f9e:	97 f9       	bld	r25, 7
    1fa0:	08 95       	ret

00001fa2 <__gesf2>:
    1fa2:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <__fp_cmp>
    1fa6:	08 f4       	brcc	.+2      	; 0x1faa <__gesf2+0x8>
    1fa8:	8f ef       	ldi	r24, 0xFF	; 255
    1faa:	08 95       	ret

00001fac <__mulsf3>:
    1fac:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__mulsf3x>
    1fb0:	0c 94 97 0f 	jmp	0x1f2e	; 0x1f2e <__fp_round>
    1fb4:	0e 94 89 0f 	call	0x1f12	; 0x1f12 <__fp_pscA>
    1fb8:	38 f0       	brcs	.+14     	; 0x1fc8 <__mulsf3+0x1c>
    1fba:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <__fp_pscB>
    1fbe:	20 f0       	brcs	.+8      	; 0x1fc8 <__mulsf3+0x1c>
    1fc0:	95 23       	and	r25, r21
    1fc2:	11 f0       	breq	.+4      	; 0x1fc8 <__mulsf3+0x1c>
    1fc4:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_inf>
    1fc8:	0c 94 86 0f 	jmp	0x1f0c	; 0x1f0c <__fp_nan>
    1fcc:	11 24       	eor	r1, r1
    1fce:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__fp_szero>

00001fd2 <__mulsf3x>:
    1fd2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_split3>
    1fd6:	70 f3       	brcs	.-36     	; 0x1fb4 <__mulsf3+0x8>

00001fd8 <__mulsf3_pse>:
    1fd8:	95 9f       	mul	r25, r21
    1fda:	c1 f3       	breq	.-16     	; 0x1fcc <__mulsf3+0x20>
    1fdc:	95 0f       	add	r25, r21
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	55 1f       	adc	r21, r21
    1fe2:	62 9f       	mul	r22, r18
    1fe4:	f0 01       	movw	r30, r0
    1fe6:	72 9f       	mul	r23, r18
    1fe8:	bb 27       	eor	r27, r27
    1fea:	f0 0d       	add	r31, r0
    1fec:	b1 1d       	adc	r27, r1
    1fee:	63 9f       	mul	r22, r19
    1ff0:	aa 27       	eor	r26, r26
    1ff2:	f0 0d       	add	r31, r0
    1ff4:	b1 1d       	adc	r27, r1
    1ff6:	aa 1f       	adc	r26, r26
    1ff8:	64 9f       	mul	r22, r20
    1ffa:	66 27       	eor	r22, r22
    1ffc:	b0 0d       	add	r27, r0
    1ffe:	a1 1d       	adc	r26, r1
    2000:	66 1f       	adc	r22, r22
    2002:	82 9f       	mul	r24, r18
    2004:	22 27       	eor	r18, r18
    2006:	b0 0d       	add	r27, r0
    2008:	a1 1d       	adc	r26, r1
    200a:	62 1f       	adc	r22, r18
    200c:	73 9f       	mul	r23, r19
    200e:	b0 0d       	add	r27, r0
    2010:	a1 1d       	adc	r26, r1
    2012:	62 1f       	adc	r22, r18
    2014:	83 9f       	mul	r24, r19
    2016:	a0 0d       	add	r26, r0
    2018:	61 1d       	adc	r22, r1
    201a:	22 1f       	adc	r18, r18
    201c:	74 9f       	mul	r23, r20
    201e:	33 27       	eor	r19, r19
    2020:	a0 0d       	add	r26, r0
    2022:	61 1d       	adc	r22, r1
    2024:	23 1f       	adc	r18, r19
    2026:	84 9f       	mul	r24, r20
    2028:	60 0d       	add	r22, r0
    202a:	21 1d       	adc	r18, r1
    202c:	82 2f       	mov	r24, r18
    202e:	76 2f       	mov	r23, r22
    2030:	6a 2f       	mov	r22, r26
    2032:	11 24       	eor	r1, r1
    2034:	9f 57       	subi	r25, 0x7F	; 127
    2036:	50 40       	sbci	r21, 0x00	; 0
    2038:	9a f0       	brmi	.+38     	; 0x2060 <__mulsf3_pse+0x88>
    203a:	f1 f0       	breq	.+60     	; 0x2078 <__mulsf3_pse+0xa0>
    203c:	88 23       	and	r24, r24
    203e:	4a f0       	brmi	.+18     	; 0x2052 <__mulsf3_pse+0x7a>
    2040:	ee 0f       	add	r30, r30
    2042:	ff 1f       	adc	r31, r31
    2044:	bb 1f       	adc	r27, r27
    2046:	66 1f       	adc	r22, r22
    2048:	77 1f       	adc	r23, r23
    204a:	88 1f       	adc	r24, r24
    204c:	91 50       	subi	r25, 0x01	; 1
    204e:	50 40       	sbci	r21, 0x00	; 0
    2050:	a9 f7       	brne	.-22     	; 0x203c <__mulsf3_pse+0x64>
    2052:	9e 3f       	cpi	r25, 0xFE	; 254
    2054:	51 05       	cpc	r21, r1
    2056:	80 f0       	brcs	.+32     	; 0x2078 <__mulsf3_pse+0xa0>
    2058:	0c 94 80 0f 	jmp	0x1f00	; 0x1f00 <__fp_inf>
    205c:	0c 94 cb 0f 	jmp	0x1f96	; 0x1f96 <__fp_szero>
    2060:	5f 3f       	cpi	r21, 0xFF	; 255
    2062:	e4 f3       	brlt	.-8      	; 0x205c <__mulsf3_pse+0x84>
    2064:	98 3e       	cpi	r25, 0xE8	; 232
    2066:	d4 f3       	brlt	.-12     	; 0x205c <__mulsf3_pse+0x84>
    2068:	86 95       	lsr	r24
    206a:	77 95       	ror	r23
    206c:	67 95       	ror	r22
    206e:	b7 95       	ror	r27
    2070:	f7 95       	ror	r31
    2072:	e7 95       	ror	r30
    2074:	9f 5f       	subi	r25, 0xFF	; 255
    2076:	c1 f7       	brne	.-16     	; 0x2068 <__mulsf3_pse+0x90>
    2078:	fe 2b       	or	r31, r30
    207a:	88 0f       	add	r24, r24
    207c:	91 1d       	adc	r25, r1
    207e:	96 95       	lsr	r25
    2080:	87 95       	ror	r24
    2082:	97 f9       	bld	r25, 7
    2084:	08 95       	ret

00002086 <vfprintf>:
    2086:	a0 e1       	ldi	r26, 0x10	; 16
    2088:	b0 e0       	ldi	r27, 0x00	; 0
    208a:	e9 e4       	ldi	r30, 0x49	; 73
    208c:	f0 e1       	ldi	r31, 0x10	; 16
    208e:	0c 94 c0 13 	jmp	0x2780	; 0x2780 <__prologue_saves__>
    2092:	7c 01       	movw	r14, r24
    2094:	1b 01       	movw	r2, r22
    2096:	6a 01       	movw	r12, r20
    2098:	fc 01       	movw	r30, r24
    209a:	17 82       	std	Z+7, r1	; 0x07
    209c:	16 82       	std	Z+6, r1	; 0x06
    209e:	83 81       	ldd	r24, Z+3	; 0x03
    20a0:	81 ff       	sbrs	r24, 1
    20a2:	44 c3       	rjmp	.+1672   	; 0x272c <vfprintf+0x6a6>
    20a4:	9e 01       	movw	r18, r28
    20a6:	2f 5f       	subi	r18, 0xFF	; 255
    20a8:	3f 4f       	sbci	r19, 0xFF	; 255
    20aa:	39 01       	movw	r6, r18
    20ac:	f7 01       	movw	r30, r14
    20ae:	93 81       	ldd	r25, Z+3	; 0x03
    20b0:	f1 01       	movw	r30, r2
    20b2:	93 fd       	sbrc	r25, 3
    20b4:	85 91       	lpm	r24, Z+
    20b6:	93 ff       	sbrs	r25, 3
    20b8:	81 91       	ld	r24, Z+
    20ba:	1f 01       	movw	r2, r30
    20bc:	88 23       	and	r24, r24
    20be:	09 f4       	brne	.+2      	; 0x20c2 <vfprintf+0x3c>
    20c0:	31 c3       	rjmp	.+1634   	; 0x2724 <vfprintf+0x69e>
    20c2:	85 32       	cpi	r24, 0x25	; 37
    20c4:	39 f4       	brne	.+14     	; 0x20d4 <vfprintf+0x4e>
    20c6:	93 fd       	sbrc	r25, 3
    20c8:	85 91       	lpm	r24, Z+
    20ca:	93 ff       	sbrs	r25, 3
    20cc:	81 91       	ld	r24, Z+
    20ce:	1f 01       	movw	r2, r30
    20d0:	85 32       	cpi	r24, 0x25	; 37
    20d2:	39 f4       	brne	.+14     	; 0x20e2 <vfprintf+0x5c>
    20d4:	b7 01       	movw	r22, r14
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    20dc:	56 01       	movw	r10, r12
    20de:	65 01       	movw	r12, r10
    20e0:	e5 cf       	rjmp	.-54     	; 0x20ac <vfprintf+0x26>
    20e2:	10 e0       	ldi	r17, 0x00	; 0
    20e4:	51 2c       	mov	r5, r1
    20e6:	91 2c       	mov	r9, r1
    20e8:	ff e1       	ldi	r31, 0x1F	; 31
    20ea:	f9 15       	cp	r31, r9
    20ec:	d8 f0       	brcs	.+54     	; 0x2124 <vfprintf+0x9e>
    20ee:	8b 32       	cpi	r24, 0x2B	; 43
    20f0:	79 f0       	breq	.+30     	; 0x2110 <vfprintf+0x8a>
    20f2:	38 f4       	brcc	.+14     	; 0x2102 <vfprintf+0x7c>
    20f4:	80 32       	cpi	r24, 0x20	; 32
    20f6:	79 f0       	breq	.+30     	; 0x2116 <vfprintf+0x90>
    20f8:	83 32       	cpi	r24, 0x23	; 35
    20fa:	a1 f4       	brne	.+40     	; 0x2124 <vfprintf+0x9e>
    20fc:	f9 2d       	mov	r31, r9
    20fe:	f0 61       	ori	r31, 0x10	; 16
    2100:	2e c0       	rjmp	.+92     	; 0x215e <vfprintf+0xd8>
    2102:	8d 32       	cpi	r24, 0x2D	; 45
    2104:	61 f0       	breq	.+24     	; 0x211e <vfprintf+0x98>
    2106:	80 33       	cpi	r24, 0x30	; 48
    2108:	69 f4       	brne	.+26     	; 0x2124 <vfprintf+0x9e>
    210a:	29 2d       	mov	r18, r9
    210c:	21 60       	ori	r18, 0x01	; 1
    210e:	2d c0       	rjmp	.+90     	; 0x216a <vfprintf+0xe4>
    2110:	39 2d       	mov	r19, r9
    2112:	32 60       	ori	r19, 0x02	; 2
    2114:	93 2e       	mov	r9, r19
    2116:	89 2d       	mov	r24, r9
    2118:	84 60       	ori	r24, 0x04	; 4
    211a:	98 2e       	mov	r9, r24
    211c:	2a c0       	rjmp	.+84     	; 0x2172 <vfprintf+0xec>
    211e:	e9 2d       	mov	r30, r9
    2120:	e8 60       	ori	r30, 0x08	; 8
    2122:	15 c0       	rjmp	.+42     	; 0x214e <vfprintf+0xc8>
    2124:	97 fc       	sbrc	r9, 7
    2126:	2d c0       	rjmp	.+90     	; 0x2182 <vfprintf+0xfc>
    2128:	20 ed       	ldi	r18, 0xD0	; 208
    212a:	28 0f       	add	r18, r24
    212c:	2a 30       	cpi	r18, 0x0A	; 10
    212e:	88 f4       	brcc	.+34     	; 0x2152 <vfprintf+0xcc>
    2130:	96 fe       	sbrs	r9, 6
    2132:	06 c0       	rjmp	.+12     	; 0x2140 <vfprintf+0xba>
    2134:	3a e0       	ldi	r19, 0x0A	; 10
    2136:	13 9f       	mul	r17, r19
    2138:	20 0d       	add	r18, r0
    213a:	11 24       	eor	r1, r1
    213c:	12 2f       	mov	r17, r18
    213e:	19 c0       	rjmp	.+50     	; 0x2172 <vfprintf+0xec>
    2140:	8a e0       	ldi	r24, 0x0A	; 10
    2142:	58 9e       	mul	r5, r24
    2144:	20 0d       	add	r18, r0
    2146:	11 24       	eor	r1, r1
    2148:	52 2e       	mov	r5, r18
    214a:	e9 2d       	mov	r30, r9
    214c:	e0 62       	ori	r30, 0x20	; 32
    214e:	9e 2e       	mov	r9, r30
    2150:	10 c0       	rjmp	.+32     	; 0x2172 <vfprintf+0xec>
    2152:	8e 32       	cpi	r24, 0x2E	; 46
    2154:	31 f4       	brne	.+12     	; 0x2162 <vfprintf+0xdc>
    2156:	96 fc       	sbrc	r9, 6
    2158:	e5 c2       	rjmp	.+1482   	; 0x2724 <vfprintf+0x69e>
    215a:	f9 2d       	mov	r31, r9
    215c:	f0 64       	ori	r31, 0x40	; 64
    215e:	9f 2e       	mov	r9, r31
    2160:	08 c0       	rjmp	.+16     	; 0x2172 <vfprintf+0xec>
    2162:	8c 36       	cpi	r24, 0x6C	; 108
    2164:	21 f4       	brne	.+8      	; 0x216e <vfprintf+0xe8>
    2166:	29 2d       	mov	r18, r9
    2168:	20 68       	ori	r18, 0x80	; 128
    216a:	92 2e       	mov	r9, r18
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <vfprintf+0xec>
    216e:	88 36       	cpi	r24, 0x68	; 104
    2170:	41 f4       	brne	.+16     	; 0x2182 <vfprintf+0xfc>
    2172:	f1 01       	movw	r30, r2
    2174:	93 fd       	sbrc	r25, 3
    2176:	85 91       	lpm	r24, Z+
    2178:	93 ff       	sbrs	r25, 3
    217a:	81 91       	ld	r24, Z+
    217c:	1f 01       	movw	r2, r30
    217e:	81 11       	cpse	r24, r1
    2180:	b3 cf       	rjmp	.-154    	; 0x20e8 <vfprintf+0x62>
    2182:	9b eb       	ldi	r25, 0xBB	; 187
    2184:	98 0f       	add	r25, r24
    2186:	93 30       	cpi	r25, 0x03	; 3
    2188:	20 f4       	brcc	.+8      	; 0x2192 <vfprintf+0x10c>
    218a:	99 2d       	mov	r25, r9
    218c:	90 61       	ori	r25, 0x10	; 16
    218e:	80 5e       	subi	r24, 0xE0	; 224
    2190:	07 c0       	rjmp	.+14     	; 0x21a0 <vfprintf+0x11a>
    2192:	9b e9       	ldi	r25, 0x9B	; 155
    2194:	98 0f       	add	r25, r24
    2196:	93 30       	cpi	r25, 0x03	; 3
    2198:	08 f0       	brcs	.+2      	; 0x219c <vfprintf+0x116>
    219a:	66 c1       	rjmp	.+716    	; 0x2468 <vfprintf+0x3e2>
    219c:	99 2d       	mov	r25, r9
    219e:	9f 7e       	andi	r25, 0xEF	; 239
    21a0:	96 ff       	sbrs	r25, 6
    21a2:	16 e0       	ldi	r17, 0x06	; 6
    21a4:	9f 73       	andi	r25, 0x3F	; 63
    21a6:	99 2e       	mov	r9, r25
    21a8:	85 36       	cpi	r24, 0x65	; 101
    21aa:	19 f4       	brne	.+6      	; 0x21b2 <vfprintf+0x12c>
    21ac:	90 64       	ori	r25, 0x40	; 64
    21ae:	99 2e       	mov	r9, r25
    21b0:	08 c0       	rjmp	.+16     	; 0x21c2 <vfprintf+0x13c>
    21b2:	86 36       	cpi	r24, 0x66	; 102
    21b4:	21 f4       	brne	.+8      	; 0x21be <vfprintf+0x138>
    21b6:	39 2f       	mov	r19, r25
    21b8:	30 68       	ori	r19, 0x80	; 128
    21ba:	93 2e       	mov	r9, r19
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x13c>
    21be:	11 11       	cpse	r17, r1
    21c0:	11 50       	subi	r17, 0x01	; 1
    21c2:	97 fe       	sbrs	r9, 7
    21c4:	07 c0       	rjmp	.+14     	; 0x21d4 <vfprintf+0x14e>
    21c6:	1c 33       	cpi	r17, 0x3C	; 60
    21c8:	50 f4       	brcc	.+20     	; 0x21de <vfprintf+0x158>
    21ca:	44 24       	eor	r4, r4
    21cc:	43 94       	inc	r4
    21ce:	41 0e       	add	r4, r17
    21d0:	27 e0       	ldi	r18, 0x07	; 7
    21d2:	0b c0       	rjmp	.+22     	; 0x21ea <vfprintf+0x164>
    21d4:	18 30       	cpi	r17, 0x08	; 8
    21d6:	38 f0       	brcs	.+14     	; 0x21e6 <vfprintf+0x160>
    21d8:	27 e0       	ldi	r18, 0x07	; 7
    21da:	17 e0       	ldi	r17, 0x07	; 7
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <vfprintf+0x162>
    21de:	27 e0       	ldi	r18, 0x07	; 7
    21e0:	9c e3       	ldi	r25, 0x3C	; 60
    21e2:	49 2e       	mov	r4, r25
    21e4:	02 c0       	rjmp	.+4      	; 0x21ea <vfprintf+0x164>
    21e6:	21 2f       	mov	r18, r17
    21e8:	41 2c       	mov	r4, r1
    21ea:	56 01       	movw	r10, r12
    21ec:	84 e0       	ldi	r24, 0x04	; 4
    21ee:	a8 0e       	add	r10, r24
    21f0:	b1 1c       	adc	r11, r1
    21f2:	f6 01       	movw	r30, r12
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	04 2d       	mov	r16, r4
    21fe:	a3 01       	movw	r20, r6
    2200:	0e 94 1e 14 	call	0x283c	; 0x283c <__ftoa_engine>
    2204:	6c 01       	movw	r12, r24
    2206:	f9 81       	ldd	r31, Y+1	; 0x01
    2208:	fc 87       	std	Y+12, r31	; 0x0c
    220a:	f0 ff       	sbrs	r31, 0
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <vfprintf+0x18c>
    220e:	f3 ff       	sbrs	r31, 3
    2210:	06 c0       	rjmp	.+12     	; 0x221e <vfprintf+0x198>
    2212:	91 fc       	sbrc	r9, 1
    2214:	06 c0       	rjmp	.+12     	; 0x2222 <vfprintf+0x19c>
    2216:	92 fe       	sbrs	r9, 2
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <vfprintf+0x1a0>
    221a:	00 e2       	ldi	r16, 0x20	; 32
    221c:	05 c0       	rjmp	.+10     	; 0x2228 <vfprintf+0x1a2>
    221e:	0d e2       	ldi	r16, 0x2D	; 45
    2220:	03 c0       	rjmp	.+6      	; 0x2228 <vfprintf+0x1a2>
    2222:	0b e2       	ldi	r16, 0x2B	; 43
    2224:	01 c0       	rjmp	.+2      	; 0x2228 <vfprintf+0x1a2>
    2226:	00 e0       	ldi	r16, 0x00	; 0
    2228:	8c 85       	ldd	r24, Y+12	; 0x0c
    222a:	8c 70       	andi	r24, 0x0C	; 12
    222c:	19 f0       	breq	.+6      	; 0x2234 <vfprintf+0x1ae>
    222e:	01 11       	cpse	r16, r1
    2230:	5a c2       	rjmp	.+1204   	; 0x26e6 <vfprintf+0x660>
    2232:	9b c2       	rjmp	.+1334   	; 0x276a <vfprintf+0x6e4>
    2234:	97 fe       	sbrs	r9, 7
    2236:	10 c0       	rjmp	.+32     	; 0x2258 <vfprintf+0x1d2>
    2238:	4c 0c       	add	r4, r12
    223a:	fc 85       	ldd	r31, Y+12	; 0x0c
    223c:	f4 ff       	sbrs	r31, 4
    223e:	04 c0       	rjmp	.+8      	; 0x2248 <vfprintf+0x1c2>
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	81 33       	cpi	r24, 0x31	; 49
    2244:	09 f4       	brne	.+2      	; 0x2248 <vfprintf+0x1c2>
    2246:	4a 94       	dec	r4
    2248:	14 14       	cp	r1, r4
    224a:	74 f5       	brge	.+92     	; 0x22a8 <vfprintf+0x222>
    224c:	28 e0       	ldi	r18, 0x08	; 8
    224e:	24 15       	cp	r18, r4
    2250:	78 f5       	brcc	.+94     	; 0x22b0 <vfprintf+0x22a>
    2252:	88 e0       	ldi	r24, 0x08	; 8
    2254:	48 2e       	mov	r4, r24
    2256:	2c c0       	rjmp	.+88     	; 0x22b0 <vfprintf+0x22a>
    2258:	96 fc       	sbrc	r9, 6
    225a:	2a c0       	rjmp	.+84     	; 0x22b0 <vfprintf+0x22a>
    225c:	81 2f       	mov	r24, r17
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	8c 15       	cp	r24, r12
    2262:	9d 05       	cpc	r25, r13
    2264:	9c f0       	brlt	.+38     	; 0x228c <vfprintf+0x206>
    2266:	3c ef       	ldi	r19, 0xFC	; 252
    2268:	c3 16       	cp	r12, r19
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	d3 06       	cpc	r13, r19
    226e:	74 f0       	brlt	.+28     	; 0x228c <vfprintf+0x206>
    2270:	89 2d       	mov	r24, r9
    2272:	80 68       	ori	r24, 0x80	; 128
    2274:	98 2e       	mov	r9, r24
    2276:	0a c0       	rjmp	.+20     	; 0x228c <vfprintf+0x206>
    2278:	e2 e0       	ldi	r30, 0x02	; 2
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	ec 0f       	add	r30, r28
    227e:	fd 1f       	adc	r31, r29
    2280:	e1 0f       	add	r30, r17
    2282:	f1 1d       	adc	r31, r1
    2284:	80 81       	ld	r24, Z
    2286:	80 33       	cpi	r24, 0x30	; 48
    2288:	19 f4       	brne	.+6      	; 0x2290 <vfprintf+0x20a>
    228a:	11 50       	subi	r17, 0x01	; 1
    228c:	11 11       	cpse	r17, r1
    228e:	f4 cf       	rjmp	.-24     	; 0x2278 <vfprintf+0x1f2>
    2290:	97 fe       	sbrs	r9, 7
    2292:	0e c0       	rjmp	.+28     	; 0x22b0 <vfprintf+0x22a>
    2294:	44 24       	eor	r4, r4
    2296:	43 94       	inc	r4
    2298:	41 0e       	add	r4, r17
    229a:	81 2f       	mov	r24, r17
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	c8 16       	cp	r12, r24
    22a0:	d9 06       	cpc	r13, r25
    22a2:	2c f4       	brge	.+10     	; 0x22ae <vfprintf+0x228>
    22a4:	1c 19       	sub	r17, r12
    22a6:	04 c0       	rjmp	.+8      	; 0x22b0 <vfprintf+0x22a>
    22a8:	44 24       	eor	r4, r4
    22aa:	43 94       	inc	r4
    22ac:	01 c0       	rjmp	.+2      	; 0x22b0 <vfprintf+0x22a>
    22ae:	10 e0       	ldi	r17, 0x00	; 0
    22b0:	97 fe       	sbrs	r9, 7
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <vfprintf+0x23a>
    22b4:	1c 14       	cp	r1, r12
    22b6:	1d 04       	cpc	r1, r13
    22b8:	34 f4       	brge	.+12     	; 0x22c6 <vfprintf+0x240>
    22ba:	c6 01       	movw	r24, r12
    22bc:	01 96       	adiw	r24, 0x01	; 1
    22be:	05 c0       	rjmp	.+10     	; 0x22ca <vfprintf+0x244>
    22c0:	85 e0       	ldi	r24, 0x05	; 5
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <vfprintf+0x244>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	01 11       	cpse	r16, r1
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	11 23       	and	r17, r17
    22d0:	31 f0       	breq	.+12     	; 0x22de <vfprintf+0x258>
    22d2:	21 2f       	mov	r18, r17
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	82 0f       	add	r24, r18
    22dc:	93 1f       	adc	r25, r19
    22de:	25 2d       	mov	r18, r5
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	82 17       	cp	r24, r18
    22e4:	93 07       	cpc	r25, r19
    22e6:	14 f4       	brge	.+4      	; 0x22ec <vfprintf+0x266>
    22e8:	58 1a       	sub	r5, r24
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <vfprintf+0x268>
    22ec:	51 2c       	mov	r5, r1
    22ee:	89 2d       	mov	r24, r9
    22f0:	89 70       	andi	r24, 0x09	; 9
    22f2:	49 f4       	brne	.+18     	; 0x2306 <vfprintf+0x280>
    22f4:	55 20       	and	r5, r5
    22f6:	39 f0       	breq	.+14     	; 0x2306 <vfprintf+0x280>
    22f8:	b7 01       	movw	r22, r14
    22fa:	80 e2       	ldi	r24, 0x20	; 32
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2302:	5a 94       	dec	r5
    2304:	f7 cf       	rjmp	.-18     	; 0x22f4 <vfprintf+0x26e>
    2306:	00 23       	and	r16, r16
    2308:	29 f0       	breq	.+10     	; 0x2314 <vfprintf+0x28e>
    230a:	b7 01       	movw	r22, r14
    230c:	80 2f       	mov	r24, r16
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2314:	93 fc       	sbrc	r9, 3
    2316:	09 c0       	rjmp	.+18     	; 0x232a <vfprintf+0x2a4>
    2318:	55 20       	and	r5, r5
    231a:	39 f0       	breq	.+14     	; 0x232a <vfprintf+0x2a4>
    231c:	b7 01       	movw	r22, r14
    231e:	80 e3       	ldi	r24, 0x30	; 48
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2326:	5a 94       	dec	r5
    2328:	f7 cf       	rjmp	.-18     	; 0x2318 <vfprintf+0x292>
    232a:	97 fe       	sbrs	r9, 7
    232c:	4c c0       	rjmp	.+152    	; 0x23c6 <vfprintf+0x340>
    232e:	46 01       	movw	r8, r12
    2330:	d7 fe       	sbrs	r13, 7
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <vfprintf+0x2b2>
    2334:	81 2c       	mov	r8, r1
    2336:	91 2c       	mov	r9, r1
    2338:	c6 01       	movw	r24, r12
    233a:	88 19       	sub	r24, r8
    233c:	99 09       	sbc	r25, r9
    233e:	f3 01       	movw	r30, r6
    2340:	e8 0f       	add	r30, r24
    2342:	f9 1f       	adc	r31, r25
    2344:	fe 87       	std	Y+14, r31	; 0x0e
    2346:	ed 87       	std	Y+13, r30	; 0x0d
    2348:	96 01       	movw	r18, r12
    234a:	24 19       	sub	r18, r4
    234c:	31 09       	sbc	r19, r1
    234e:	38 8b       	std	Y+16, r19	; 0x10
    2350:	2f 87       	std	Y+15, r18	; 0x0f
    2352:	01 2f       	mov	r16, r17
    2354:	10 e0       	ldi	r17, 0x00	; 0
    2356:	11 95       	neg	r17
    2358:	01 95       	neg	r16
    235a:	11 09       	sbc	r17, r1
    235c:	3f ef       	ldi	r19, 0xFF	; 255
    235e:	83 16       	cp	r8, r19
    2360:	93 06       	cpc	r9, r19
    2362:	29 f4       	brne	.+10     	; 0x236e <vfprintf+0x2e8>
    2364:	b7 01       	movw	r22, r14
    2366:	8e e2       	ldi	r24, 0x2E	; 46
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    236e:	c8 14       	cp	r12, r8
    2370:	d9 04       	cpc	r13, r9
    2372:	4c f0       	brlt	.+18     	; 0x2386 <vfprintf+0x300>
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	88 15       	cp	r24, r8
    237a:	99 05       	cpc	r25, r9
    237c:	24 f4       	brge	.+8      	; 0x2386 <vfprintf+0x300>
    237e:	ed 85       	ldd	r30, Y+13	; 0x0d
    2380:	fe 85       	ldd	r31, Y+14	; 0x0e
    2382:	81 81       	ldd	r24, Z+1	; 0x01
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <vfprintf+0x302>
    2386:	80 e3       	ldi	r24, 0x30	; 48
    2388:	f1 e0       	ldi	r31, 0x01	; 1
    238a:	8f 1a       	sub	r8, r31
    238c:	91 08       	sbc	r9, r1
    238e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2390:	3e 85       	ldd	r19, Y+14	; 0x0e
    2392:	2f 5f       	subi	r18, 0xFF	; 255
    2394:	3f 4f       	sbci	r19, 0xFF	; 255
    2396:	3e 87       	std	Y+14, r19	; 0x0e
    2398:	2d 87       	std	Y+13, r18	; 0x0d
    239a:	80 16       	cp	r8, r16
    239c:	91 06       	cpc	r9, r17
    239e:	2c f0       	brlt	.+10     	; 0x23aa <vfprintf+0x324>
    23a0:	b7 01       	movw	r22, r14
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    23a8:	d9 cf       	rjmp	.-78     	; 0x235c <vfprintf+0x2d6>
    23aa:	c8 14       	cp	r12, r8
    23ac:	d9 04       	cpc	r13, r9
    23ae:	41 f4       	brne	.+16     	; 0x23c0 <vfprintf+0x33a>
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	96 33       	cpi	r25, 0x36	; 54
    23b4:	20 f4       	brcc	.+8      	; 0x23be <vfprintf+0x338>
    23b6:	95 33       	cpi	r25, 0x35	; 53
    23b8:	19 f4       	brne	.+6      	; 0x23c0 <vfprintf+0x33a>
    23ba:	3c 85       	ldd	r19, Y+12	; 0x0c
    23bc:	34 ff       	sbrs	r19, 4
    23be:	81 e3       	ldi	r24, 0x31	; 49
    23c0:	b7 01       	movw	r22, r14
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	4e c0       	rjmp	.+156    	; 0x2462 <vfprintf+0x3dc>
    23c6:	8a 81       	ldd	r24, Y+2	; 0x02
    23c8:	81 33       	cpi	r24, 0x31	; 49
    23ca:	19 f0       	breq	.+6      	; 0x23d2 <vfprintf+0x34c>
    23cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    23ce:	9f 7e       	andi	r25, 0xEF	; 239
    23d0:	9c 87       	std	Y+12, r25	; 0x0c
    23d2:	b7 01       	movw	r22, r14
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    23da:	11 11       	cpse	r17, r1
    23dc:	05 c0       	rjmp	.+10     	; 0x23e8 <vfprintf+0x362>
    23de:	94 fc       	sbrc	r9, 4
    23e0:	18 c0       	rjmp	.+48     	; 0x2412 <vfprintf+0x38c>
    23e2:	85 e6       	ldi	r24, 0x65	; 101
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	17 c0       	rjmp	.+46     	; 0x2416 <vfprintf+0x390>
    23e8:	b7 01       	movw	r22, r14
    23ea:	8e e2       	ldi	r24, 0x2E	; 46
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    23f2:	1e 5f       	subi	r17, 0xFE	; 254
    23f4:	82 e0       	ldi	r24, 0x02	; 2
    23f6:	01 e0       	ldi	r16, 0x01	; 1
    23f8:	08 0f       	add	r16, r24
    23fa:	f3 01       	movw	r30, r6
    23fc:	e8 0f       	add	r30, r24
    23fe:	f1 1d       	adc	r31, r1
    2400:	80 81       	ld	r24, Z
    2402:	b7 01       	movw	r22, r14
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    240a:	80 2f       	mov	r24, r16
    240c:	01 13       	cpse	r16, r17
    240e:	f3 cf       	rjmp	.-26     	; 0x23f6 <vfprintf+0x370>
    2410:	e6 cf       	rjmp	.-52     	; 0x23de <vfprintf+0x358>
    2412:	85 e4       	ldi	r24, 0x45	; 69
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	b7 01       	movw	r22, r14
    2418:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    241c:	d7 fc       	sbrc	r13, 7
    241e:	06 c0       	rjmp	.+12     	; 0x242c <vfprintf+0x3a6>
    2420:	c1 14       	cp	r12, r1
    2422:	d1 04       	cpc	r13, r1
    2424:	41 f4       	brne	.+16     	; 0x2436 <vfprintf+0x3b0>
    2426:	ec 85       	ldd	r30, Y+12	; 0x0c
    2428:	e4 ff       	sbrs	r30, 4
    242a:	05 c0       	rjmp	.+10     	; 0x2436 <vfprintf+0x3b0>
    242c:	d1 94       	neg	r13
    242e:	c1 94       	neg	r12
    2430:	d1 08       	sbc	r13, r1
    2432:	8d e2       	ldi	r24, 0x2D	; 45
    2434:	01 c0       	rjmp	.+2      	; 0x2438 <vfprintf+0x3b2>
    2436:	8b e2       	ldi	r24, 0x2B	; 43
    2438:	b7 01       	movw	r22, r14
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2440:	80 e3       	ldi	r24, 0x30	; 48
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	c2 16       	cp	r12, r18
    2446:	d1 04       	cpc	r13, r1
    2448:	2c f0       	brlt	.+10     	; 0x2454 <vfprintf+0x3ce>
    244a:	8f 5f       	subi	r24, 0xFF	; 255
    244c:	fa e0       	ldi	r31, 0x0A	; 10
    244e:	cf 1a       	sub	r12, r31
    2450:	d1 08       	sbc	r13, r1
    2452:	f7 cf       	rjmp	.-18     	; 0x2442 <vfprintf+0x3bc>
    2454:	b7 01       	movw	r22, r14
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    245c:	b7 01       	movw	r22, r14
    245e:	c6 01       	movw	r24, r12
    2460:	c0 96       	adiw	r24, 0x30	; 48
    2462:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2466:	54 c1       	rjmp	.+680    	; 0x2710 <vfprintf+0x68a>
    2468:	83 36       	cpi	r24, 0x63	; 99
    246a:	31 f0       	breq	.+12     	; 0x2478 <vfprintf+0x3f2>
    246c:	83 37       	cpi	r24, 0x73	; 115
    246e:	79 f0       	breq	.+30     	; 0x248e <vfprintf+0x408>
    2470:	83 35       	cpi	r24, 0x53	; 83
    2472:	09 f0       	breq	.+2      	; 0x2476 <vfprintf+0x3f0>
    2474:	56 c0       	rjmp	.+172    	; 0x2522 <vfprintf+0x49c>
    2476:	20 c0       	rjmp	.+64     	; 0x24b8 <vfprintf+0x432>
    2478:	56 01       	movw	r10, r12
    247a:	32 e0       	ldi	r19, 0x02	; 2
    247c:	a3 0e       	add	r10, r19
    247e:	b1 1c       	adc	r11, r1
    2480:	f6 01       	movw	r30, r12
    2482:	80 81       	ld	r24, Z
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	01 e0       	ldi	r16, 0x01	; 1
    2488:	10 e0       	ldi	r17, 0x00	; 0
    248a:	63 01       	movw	r12, r6
    248c:	12 c0       	rjmp	.+36     	; 0x24b2 <vfprintf+0x42c>
    248e:	56 01       	movw	r10, r12
    2490:	f2 e0       	ldi	r31, 0x02	; 2
    2492:	af 0e       	add	r10, r31
    2494:	b1 1c       	adc	r11, r1
    2496:	f6 01       	movw	r30, r12
    2498:	c0 80       	ld	r12, Z
    249a:	d1 80       	ldd	r13, Z+1	; 0x01
    249c:	96 fe       	sbrs	r9, 6
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <vfprintf+0x420>
    24a0:	61 2f       	mov	r22, r17
    24a2:	70 e0       	ldi	r23, 0x00	; 0
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <vfprintf+0x424>
    24a6:	6f ef       	ldi	r22, 0xFF	; 255
    24a8:	7f ef       	ldi	r23, 0xFF	; 255
    24aa:	c6 01       	movw	r24, r12
    24ac:	0e 94 01 15 	call	0x2a02	; 0x2a02 <strnlen>
    24b0:	8c 01       	movw	r16, r24
    24b2:	f9 2d       	mov	r31, r9
    24b4:	ff 77       	andi	r31, 0x7F	; 127
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <vfprintf+0x45a>
    24b8:	56 01       	movw	r10, r12
    24ba:	22 e0       	ldi	r18, 0x02	; 2
    24bc:	a2 0e       	add	r10, r18
    24be:	b1 1c       	adc	r11, r1
    24c0:	f6 01       	movw	r30, r12
    24c2:	c0 80       	ld	r12, Z
    24c4:	d1 80       	ldd	r13, Z+1	; 0x01
    24c6:	96 fe       	sbrs	r9, 6
    24c8:	03 c0       	rjmp	.+6      	; 0x24d0 <vfprintf+0x44a>
    24ca:	61 2f       	mov	r22, r17
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <vfprintf+0x44e>
    24d0:	6f ef       	ldi	r22, 0xFF	; 255
    24d2:	7f ef       	ldi	r23, 0xFF	; 255
    24d4:	c6 01       	movw	r24, r12
    24d6:	0e 94 f6 14 	call	0x29ec	; 0x29ec <strnlen_P>
    24da:	8c 01       	movw	r16, r24
    24dc:	f9 2d       	mov	r31, r9
    24de:	f0 68       	ori	r31, 0x80	; 128
    24e0:	9f 2e       	mov	r9, r31
    24e2:	f3 fd       	sbrc	r31, 3
    24e4:	1a c0       	rjmp	.+52     	; 0x251a <vfprintf+0x494>
    24e6:	85 2d       	mov	r24, r5
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	08 17       	cp	r16, r24
    24ec:	19 07       	cpc	r17, r25
    24ee:	a8 f4       	brcc	.+42     	; 0x251a <vfprintf+0x494>
    24f0:	b7 01       	movw	r22, r14
    24f2:	80 e2       	ldi	r24, 0x20	; 32
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    24fa:	5a 94       	dec	r5
    24fc:	f4 cf       	rjmp	.-24     	; 0x24e6 <vfprintf+0x460>
    24fe:	f6 01       	movw	r30, r12
    2500:	97 fc       	sbrc	r9, 7
    2502:	85 91       	lpm	r24, Z+
    2504:	97 fe       	sbrs	r9, 7
    2506:	81 91       	ld	r24, Z+
    2508:	6f 01       	movw	r12, r30
    250a:	b7 01       	movw	r22, r14
    250c:	90 e0       	ldi	r25, 0x00	; 0
    250e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2512:	51 10       	cpse	r5, r1
    2514:	5a 94       	dec	r5
    2516:	01 50       	subi	r16, 0x01	; 1
    2518:	11 09       	sbc	r17, r1
    251a:	01 15       	cp	r16, r1
    251c:	11 05       	cpc	r17, r1
    251e:	79 f7       	brne	.-34     	; 0x24fe <vfprintf+0x478>
    2520:	f7 c0       	rjmp	.+494    	; 0x2710 <vfprintf+0x68a>
    2522:	84 36       	cpi	r24, 0x64	; 100
    2524:	11 f0       	breq	.+4      	; 0x252a <vfprintf+0x4a4>
    2526:	89 36       	cpi	r24, 0x69	; 105
    2528:	61 f5       	brne	.+88     	; 0x2582 <vfprintf+0x4fc>
    252a:	56 01       	movw	r10, r12
    252c:	97 fe       	sbrs	r9, 7
    252e:	09 c0       	rjmp	.+18     	; 0x2542 <vfprintf+0x4bc>
    2530:	24 e0       	ldi	r18, 0x04	; 4
    2532:	a2 0e       	add	r10, r18
    2534:	b1 1c       	adc	r11, r1
    2536:	f6 01       	movw	r30, r12
    2538:	60 81       	ld	r22, Z
    253a:	71 81       	ldd	r23, Z+1	; 0x01
    253c:	82 81       	ldd	r24, Z+2	; 0x02
    253e:	93 81       	ldd	r25, Z+3	; 0x03
    2540:	0a c0       	rjmp	.+20     	; 0x2556 <vfprintf+0x4d0>
    2542:	f2 e0       	ldi	r31, 0x02	; 2
    2544:	af 0e       	add	r10, r31
    2546:	b1 1c       	adc	r11, r1
    2548:	f6 01       	movw	r30, r12
    254a:	60 81       	ld	r22, Z
    254c:	71 81       	ldd	r23, Z+1	; 0x01
    254e:	07 2e       	mov	r0, r23
    2550:	00 0c       	add	r0, r0
    2552:	88 0b       	sbc	r24, r24
    2554:	99 0b       	sbc	r25, r25
    2556:	f9 2d       	mov	r31, r9
    2558:	ff 76       	andi	r31, 0x6F	; 111
    255a:	9f 2e       	mov	r9, r31
    255c:	97 ff       	sbrs	r25, 7
    255e:	09 c0       	rjmp	.+18     	; 0x2572 <vfprintf+0x4ec>
    2560:	90 95       	com	r25
    2562:	80 95       	com	r24
    2564:	70 95       	com	r23
    2566:	61 95       	neg	r22
    2568:	7f 4f       	sbci	r23, 0xFF	; 255
    256a:	8f 4f       	sbci	r24, 0xFF	; 255
    256c:	9f 4f       	sbci	r25, 0xFF	; 255
    256e:	f0 68       	ori	r31, 0x80	; 128
    2570:	9f 2e       	mov	r9, r31
    2572:	2a e0       	ldi	r18, 0x0A	; 10
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	a3 01       	movw	r20, r6
    2578:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__ultoa_invert>
    257c:	c8 2e       	mov	r12, r24
    257e:	c6 18       	sub	r12, r6
    2580:	3f c0       	rjmp	.+126    	; 0x2600 <vfprintf+0x57a>
    2582:	09 2d       	mov	r16, r9
    2584:	85 37       	cpi	r24, 0x75	; 117
    2586:	21 f4       	brne	.+8      	; 0x2590 <vfprintf+0x50a>
    2588:	0f 7e       	andi	r16, 0xEF	; 239
    258a:	2a e0       	ldi	r18, 0x0A	; 10
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	1d c0       	rjmp	.+58     	; 0x25ca <vfprintf+0x544>
    2590:	09 7f       	andi	r16, 0xF9	; 249
    2592:	8f 36       	cpi	r24, 0x6F	; 111
    2594:	91 f0       	breq	.+36     	; 0x25ba <vfprintf+0x534>
    2596:	18 f4       	brcc	.+6      	; 0x259e <vfprintf+0x518>
    2598:	88 35       	cpi	r24, 0x58	; 88
    259a:	59 f0       	breq	.+22     	; 0x25b2 <vfprintf+0x52c>
    259c:	c3 c0       	rjmp	.+390    	; 0x2724 <vfprintf+0x69e>
    259e:	80 37       	cpi	r24, 0x70	; 112
    25a0:	19 f0       	breq	.+6      	; 0x25a8 <vfprintf+0x522>
    25a2:	88 37       	cpi	r24, 0x78	; 120
    25a4:	11 f0       	breq	.+4      	; 0x25aa <vfprintf+0x524>
    25a6:	be c0       	rjmp	.+380    	; 0x2724 <vfprintf+0x69e>
    25a8:	00 61       	ori	r16, 0x10	; 16
    25aa:	04 ff       	sbrs	r16, 4
    25ac:	09 c0       	rjmp	.+18     	; 0x25c0 <vfprintf+0x53a>
    25ae:	04 60       	ori	r16, 0x04	; 4
    25b0:	07 c0       	rjmp	.+14     	; 0x25c0 <vfprintf+0x53a>
    25b2:	94 fe       	sbrs	r9, 4
    25b4:	08 c0       	rjmp	.+16     	; 0x25c6 <vfprintf+0x540>
    25b6:	06 60       	ori	r16, 0x06	; 6
    25b8:	06 c0       	rjmp	.+12     	; 0x25c6 <vfprintf+0x540>
    25ba:	28 e0       	ldi	r18, 0x08	; 8
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	05 c0       	rjmp	.+10     	; 0x25ca <vfprintf+0x544>
    25c0:	20 e1       	ldi	r18, 0x10	; 16
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	02 c0       	rjmp	.+4      	; 0x25ca <vfprintf+0x544>
    25c6:	20 e1       	ldi	r18, 0x10	; 16
    25c8:	32 e0       	ldi	r19, 0x02	; 2
    25ca:	56 01       	movw	r10, r12
    25cc:	07 ff       	sbrs	r16, 7
    25ce:	09 c0       	rjmp	.+18     	; 0x25e2 <vfprintf+0x55c>
    25d0:	84 e0       	ldi	r24, 0x04	; 4
    25d2:	a8 0e       	add	r10, r24
    25d4:	b1 1c       	adc	r11, r1
    25d6:	f6 01       	movw	r30, r12
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <vfprintf+0x56c>
    25e2:	f2 e0       	ldi	r31, 0x02	; 2
    25e4:	af 0e       	add	r10, r31
    25e6:	b1 1c       	adc	r11, r1
    25e8:	f6 01       	movw	r30, r12
    25ea:	60 81       	ld	r22, Z
    25ec:	71 81       	ldd	r23, Z+1	; 0x01
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	a3 01       	movw	r20, r6
    25f4:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <__ultoa_invert>
    25f8:	c8 2e       	mov	r12, r24
    25fa:	c6 18       	sub	r12, r6
    25fc:	0f 77       	andi	r16, 0x7F	; 127
    25fe:	90 2e       	mov	r9, r16
    2600:	96 fe       	sbrs	r9, 6
    2602:	0b c0       	rjmp	.+22     	; 0x261a <vfprintf+0x594>
    2604:	09 2d       	mov	r16, r9
    2606:	0e 7f       	andi	r16, 0xFE	; 254
    2608:	c1 16       	cp	r12, r17
    260a:	50 f4       	brcc	.+20     	; 0x2620 <vfprintf+0x59a>
    260c:	94 fe       	sbrs	r9, 4
    260e:	0a c0       	rjmp	.+20     	; 0x2624 <vfprintf+0x59e>
    2610:	92 fc       	sbrc	r9, 2
    2612:	08 c0       	rjmp	.+16     	; 0x2624 <vfprintf+0x59e>
    2614:	09 2d       	mov	r16, r9
    2616:	0e 7e       	andi	r16, 0xEE	; 238
    2618:	05 c0       	rjmp	.+10     	; 0x2624 <vfprintf+0x59e>
    261a:	dc 2c       	mov	r13, r12
    261c:	09 2d       	mov	r16, r9
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <vfprintf+0x5a0>
    2620:	dc 2c       	mov	r13, r12
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <vfprintf+0x5a0>
    2624:	d1 2e       	mov	r13, r17
    2626:	04 ff       	sbrs	r16, 4
    2628:	0d c0       	rjmp	.+26     	; 0x2644 <vfprintf+0x5be>
    262a:	fe 01       	movw	r30, r28
    262c:	ec 0d       	add	r30, r12
    262e:	f1 1d       	adc	r31, r1
    2630:	80 81       	ld	r24, Z
    2632:	80 33       	cpi	r24, 0x30	; 48
    2634:	11 f4       	brne	.+4      	; 0x263a <vfprintf+0x5b4>
    2636:	09 7e       	andi	r16, 0xE9	; 233
    2638:	09 c0       	rjmp	.+18     	; 0x264c <vfprintf+0x5c6>
    263a:	02 ff       	sbrs	r16, 2
    263c:	06 c0       	rjmp	.+12     	; 0x264a <vfprintf+0x5c4>
    263e:	d3 94       	inc	r13
    2640:	d3 94       	inc	r13
    2642:	04 c0       	rjmp	.+8      	; 0x264c <vfprintf+0x5c6>
    2644:	80 2f       	mov	r24, r16
    2646:	86 78       	andi	r24, 0x86	; 134
    2648:	09 f0       	breq	.+2      	; 0x264c <vfprintf+0x5c6>
    264a:	d3 94       	inc	r13
    264c:	03 fd       	sbrc	r16, 3
    264e:	11 c0       	rjmp	.+34     	; 0x2672 <vfprintf+0x5ec>
    2650:	00 ff       	sbrs	r16, 0
    2652:	06 c0       	rjmp	.+12     	; 0x2660 <vfprintf+0x5da>
    2654:	1c 2d       	mov	r17, r12
    2656:	d5 14       	cp	r13, r5
    2658:	80 f4       	brcc	.+32     	; 0x267a <vfprintf+0x5f4>
    265a:	15 0d       	add	r17, r5
    265c:	1d 19       	sub	r17, r13
    265e:	0d c0       	rjmp	.+26     	; 0x267a <vfprintf+0x5f4>
    2660:	d5 14       	cp	r13, r5
    2662:	58 f4       	brcc	.+22     	; 0x267a <vfprintf+0x5f4>
    2664:	b7 01       	movw	r22, r14
    2666:	80 e2       	ldi	r24, 0x20	; 32
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    266e:	d3 94       	inc	r13
    2670:	f7 cf       	rjmp	.-18     	; 0x2660 <vfprintf+0x5da>
    2672:	d5 14       	cp	r13, r5
    2674:	10 f4       	brcc	.+4      	; 0x267a <vfprintf+0x5f4>
    2676:	5d 18       	sub	r5, r13
    2678:	01 c0       	rjmp	.+2      	; 0x267c <vfprintf+0x5f6>
    267a:	51 2c       	mov	r5, r1
    267c:	04 ff       	sbrs	r16, 4
    267e:	10 c0       	rjmp	.+32     	; 0x26a0 <vfprintf+0x61a>
    2680:	b7 01       	movw	r22, r14
    2682:	80 e3       	ldi	r24, 0x30	; 48
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    268a:	02 ff       	sbrs	r16, 2
    268c:	17 c0       	rjmp	.+46     	; 0x26bc <vfprintf+0x636>
    268e:	01 fd       	sbrc	r16, 1
    2690:	03 c0       	rjmp	.+6      	; 0x2698 <vfprintf+0x612>
    2692:	88 e7       	ldi	r24, 0x78	; 120
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	02 c0       	rjmp	.+4      	; 0x269c <vfprintf+0x616>
    2698:	88 e5       	ldi	r24, 0x58	; 88
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	b7 01       	movw	r22, r14
    269e:	0c c0       	rjmp	.+24     	; 0x26b8 <vfprintf+0x632>
    26a0:	80 2f       	mov	r24, r16
    26a2:	86 78       	andi	r24, 0x86	; 134
    26a4:	59 f0       	breq	.+22     	; 0x26bc <vfprintf+0x636>
    26a6:	01 ff       	sbrs	r16, 1
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <vfprintf+0x628>
    26aa:	8b e2       	ldi	r24, 0x2B	; 43
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <vfprintf+0x62a>
    26ae:	80 e2       	ldi	r24, 0x20	; 32
    26b0:	07 fd       	sbrc	r16, 7
    26b2:	8d e2       	ldi	r24, 0x2D	; 45
    26b4:	b7 01       	movw	r22, r14
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    26bc:	c1 16       	cp	r12, r17
    26be:	38 f4       	brcc	.+14     	; 0x26ce <vfprintf+0x648>
    26c0:	b7 01       	movw	r22, r14
    26c2:	80 e3       	ldi	r24, 0x30	; 48
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    26ca:	11 50       	subi	r17, 0x01	; 1
    26cc:	f7 cf       	rjmp	.-18     	; 0x26bc <vfprintf+0x636>
    26ce:	ca 94       	dec	r12
    26d0:	f3 01       	movw	r30, r6
    26d2:	ec 0d       	add	r30, r12
    26d4:	f1 1d       	adc	r31, r1
    26d6:	80 81       	ld	r24, Z
    26d8:	b7 01       	movw	r22, r14
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    26e0:	c1 10       	cpse	r12, r1
    26e2:	f5 cf       	rjmp	.-22     	; 0x26ce <vfprintf+0x648>
    26e4:	15 c0       	rjmp	.+42     	; 0x2710 <vfprintf+0x68a>
    26e6:	f4 e0       	ldi	r31, 0x04	; 4
    26e8:	f5 15       	cp	r31, r5
    26ea:	60 f5       	brcc	.+88     	; 0x2744 <vfprintf+0x6be>
    26ec:	84 e0       	ldi	r24, 0x04	; 4
    26ee:	58 1a       	sub	r5, r24
    26f0:	93 fe       	sbrs	r9, 3
    26f2:	1f c0       	rjmp	.+62     	; 0x2732 <vfprintf+0x6ac>
    26f4:	01 11       	cpse	r16, r1
    26f6:	27 c0       	rjmp	.+78     	; 0x2746 <vfprintf+0x6c0>
    26f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    26fa:	23 ff       	sbrs	r18, 3
    26fc:	2a c0       	rjmp	.+84     	; 0x2752 <vfprintf+0x6cc>
    26fe:	08 e6       	ldi	r16, 0x68	; 104
    2700:	10 e0       	ldi	r17, 0x00	; 0
    2702:	39 2d       	mov	r19, r9
    2704:	30 71       	andi	r19, 0x10	; 16
    2706:	93 2e       	mov	r9, r19
    2708:	f8 01       	movw	r30, r16
    270a:	84 91       	lpm	r24, Z
    270c:	81 11       	cpse	r24, r1
    270e:	24 c0       	rjmp	.+72     	; 0x2758 <vfprintf+0x6d2>
    2710:	55 20       	and	r5, r5
    2712:	09 f4       	brne	.+2      	; 0x2716 <vfprintf+0x690>
    2714:	e4 cc       	rjmp	.-1592   	; 0x20de <vfprintf+0x58>
    2716:	b7 01       	movw	r22, r14
    2718:	80 e2       	ldi	r24, 0x20	; 32
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2720:	5a 94       	dec	r5
    2722:	f6 cf       	rjmp	.-20     	; 0x2710 <vfprintf+0x68a>
    2724:	f7 01       	movw	r30, r14
    2726:	86 81       	ldd	r24, Z+6	; 0x06
    2728:	97 81       	ldd	r25, Z+7	; 0x07
    272a:	26 c0       	rjmp	.+76     	; 0x2778 <vfprintf+0x6f2>
    272c:	8f ef       	ldi	r24, 0xFF	; 255
    272e:	9f ef       	ldi	r25, 0xFF	; 255
    2730:	23 c0       	rjmp	.+70     	; 0x2778 <vfprintf+0x6f2>
    2732:	b7 01       	movw	r22, r14
    2734:	80 e2       	ldi	r24, 0x20	; 32
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    273c:	5a 94       	dec	r5
    273e:	51 10       	cpse	r5, r1
    2740:	f8 cf       	rjmp	.-16     	; 0x2732 <vfprintf+0x6ac>
    2742:	d8 cf       	rjmp	.-80     	; 0x26f4 <vfprintf+0x66e>
    2744:	51 2c       	mov	r5, r1
    2746:	b7 01       	movw	r22, r14
    2748:	80 2f       	mov	r24, r16
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2750:	d3 cf       	rjmp	.-90     	; 0x26f8 <vfprintf+0x672>
    2752:	0c e6       	ldi	r16, 0x6C	; 108
    2754:	10 e0       	ldi	r17, 0x00	; 0
    2756:	d5 cf       	rjmp	.-86     	; 0x2702 <vfprintf+0x67c>
    2758:	91 10       	cpse	r9, r1
    275a:	80 52       	subi	r24, 0x20	; 32
    275c:	b7 01       	movw	r22, r14
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <fputc>
    2764:	0f 5f       	subi	r16, 0xFF	; 255
    2766:	1f 4f       	sbci	r17, 0xFF	; 255
    2768:	cf cf       	rjmp	.-98     	; 0x2708 <vfprintf+0x682>
    276a:	23 e0       	ldi	r18, 0x03	; 3
    276c:	25 15       	cp	r18, r5
    276e:	10 f4       	brcc	.+4      	; 0x2774 <vfprintf+0x6ee>
    2770:	83 e0       	ldi	r24, 0x03	; 3
    2772:	bd cf       	rjmp	.-134    	; 0x26ee <vfprintf+0x668>
    2774:	51 2c       	mov	r5, r1
    2776:	c0 cf       	rjmp	.-128    	; 0x26f8 <vfprintf+0x672>
    2778:	60 96       	adiw	r28, 0x10	; 16
    277a:	e2 e1       	ldi	r30, 0x12	; 18
    277c:	0c 94 dc 13 	jmp	0x27b8	; 0x27b8 <__epilogue_restores__>

00002780 <__prologue_saves__>:
    2780:	2f 92       	push	r2
    2782:	3f 92       	push	r3
    2784:	4f 92       	push	r4
    2786:	5f 92       	push	r5
    2788:	6f 92       	push	r6
    278a:	7f 92       	push	r7
    278c:	8f 92       	push	r8
    278e:	9f 92       	push	r9
    2790:	af 92       	push	r10
    2792:	bf 92       	push	r11
    2794:	cf 92       	push	r12
    2796:	df 92       	push	r13
    2798:	ef 92       	push	r14
    279a:	ff 92       	push	r15
    279c:	0f 93       	push	r16
    279e:	1f 93       	push	r17
    27a0:	cf 93       	push	r28
    27a2:	df 93       	push	r29
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	ca 1b       	sub	r28, r26
    27aa:	db 0b       	sbc	r29, r27
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	09 94       	ijmp

000027b8 <__epilogue_restores__>:
    27b8:	2a 88       	ldd	r2, Y+18	; 0x12
    27ba:	39 88       	ldd	r3, Y+17	; 0x11
    27bc:	48 88       	ldd	r4, Y+16	; 0x10
    27be:	5f 84       	ldd	r5, Y+15	; 0x0f
    27c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ca:	b9 84       	ldd	r11, Y+9	; 0x09
    27cc:	c8 84       	ldd	r12, Y+8	; 0x08
    27ce:	df 80       	ldd	r13, Y+7	; 0x07
    27d0:	ee 80       	ldd	r14, Y+6	; 0x06
    27d2:	fd 80       	ldd	r15, Y+5	; 0x05
    27d4:	0c 81       	ldd	r16, Y+4	; 0x04
    27d6:	1b 81       	ldd	r17, Y+3	; 0x03
    27d8:	aa 81       	ldd	r26, Y+2	; 0x02
    27da:	b9 81       	ldd	r27, Y+1	; 0x01
    27dc:	ce 0f       	add	r28, r30
    27de:	d1 1d       	adc	r29, r1
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	ed 01       	movw	r28, r26
    27ec:	08 95       	ret

000027ee <__adddi3>:
    27ee:	2a 0d       	add	r18, r10
    27f0:	3b 1d       	adc	r19, r11
    27f2:	4c 1d       	adc	r20, r12
    27f4:	5d 1d       	adc	r21, r13
    27f6:	6e 1d       	adc	r22, r14
    27f8:	7f 1d       	adc	r23, r15
    27fa:	80 1f       	adc	r24, r16
    27fc:	91 1f       	adc	r25, r17
    27fe:	08 95       	ret

00002800 <__subdi3>:
    2800:	2a 19       	sub	r18, r10
    2802:	3b 09       	sbc	r19, r11
    2804:	4c 09       	sbc	r20, r12
    2806:	5d 09       	sbc	r21, r13
    2808:	6e 09       	sbc	r22, r14
    280a:	7f 09       	sbc	r23, r15
    280c:	80 0b       	sbc	r24, r16
    280e:	91 0b       	sbc	r25, r17
    2810:	08 95       	ret

00002812 <__cmpdi2>:
    2812:	2a 15       	cp	r18, r10
    2814:	3b 05       	cpc	r19, r11
    2816:	4c 05       	cpc	r20, r12
    2818:	5d 05       	cpc	r21, r13
    281a:	6e 05       	cpc	r22, r14
    281c:	7f 05       	cpc	r23, r15
    281e:	80 07       	cpc	r24, r16
    2820:	91 07       	cpc	r25, r17
    2822:	08 95       	ret

00002824 <__cmpdi2_s8>:
    2824:	00 24       	eor	r0, r0
    2826:	a7 fd       	sbrc	r26, 7
    2828:	00 94       	com	r0
    282a:	2a 17       	cp	r18, r26
    282c:	30 05       	cpc	r19, r0
    282e:	40 05       	cpc	r20, r0
    2830:	50 05       	cpc	r21, r0
    2832:	60 05       	cpc	r22, r0
    2834:	70 05       	cpc	r23, r0
    2836:	80 05       	cpc	r24, r0
    2838:	90 05       	cpc	r25, r0
    283a:	08 95       	ret

0000283c <__ftoa_engine>:
    283c:	28 30       	cpi	r18, 0x08	; 8
    283e:	08 f0       	brcs	.+2      	; 0x2842 <__ftoa_engine+0x6>
    2840:	27 e0       	ldi	r18, 0x07	; 7
    2842:	33 27       	eor	r19, r19
    2844:	da 01       	movw	r26, r20
    2846:	99 0f       	add	r25, r25
    2848:	31 1d       	adc	r19, r1
    284a:	87 fd       	sbrc	r24, 7
    284c:	91 60       	ori	r25, 0x01	; 1
    284e:	00 96       	adiw	r24, 0x00	; 0
    2850:	61 05       	cpc	r22, r1
    2852:	71 05       	cpc	r23, r1
    2854:	39 f4       	brne	.+14     	; 0x2864 <__ftoa_engine+0x28>
    2856:	32 60       	ori	r19, 0x02	; 2
    2858:	2e 5f       	subi	r18, 0xFE	; 254
    285a:	3d 93       	st	X+, r19
    285c:	30 e3       	ldi	r19, 0x30	; 48
    285e:	2a 95       	dec	r18
    2860:	e1 f7       	brne	.-8      	; 0x285a <__ftoa_engine+0x1e>
    2862:	08 95       	ret
    2864:	9f 3f       	cpi	r25, 0xFF	; 255
    2866:	30 f0       	brcs	.+12     	; 0x2874 <__ftoa_engine+0x38>
    2868:	80 38       	cpi	r24, 0x80	; 128
    286a:	71 05       	cpc	r23, r1
    286c:	61 05       	cpc	r22, r1
    286e:	09 f0       	breq	.+2      	; 0x2872 <__ftoa_engine+0x36>
    2870:	3c 5f       	subi	r19, 0xFC	; 252
    2872:	3c 5f       	subi	r19, 0xFC	; 252
    2874:	3d 93       	st	X+, r19
    2876:	91 30       	cpi	r25, 0x01	; 1
    2878:	08 f0       	brcs	.+2      	; 0x287c <__ftoa_engine+0x40>
    287a:	80 68       	ori	r24, 0x80	; 128
    287c:	91 1d       	adc	r25, r1
    287e:	df 93       	push	r29
    2880:	cf 93       	push	r28
    2882:	1f 93       	push	r17
    2884:	0f 93       	push	r16
    2886:	ff 92       	push	r15
    2888:	ef 92       	push	r14
    288a:	19 2f       	mov	r17, r25
    288c:	98 7f       	andi	r25, 0xF8	; 248
    288e:	96 95       	lsr	r25
    2890:	e9 2f       	mov	r30, r25
    2892:	96 95       	lsr	r25
    2894:	96 95       	lsr	r25
    2896:	e9 0f       	add	r30, r25
    2898:	ff 27       	eor	r31, r31
    289a:	e6 53       	subi	r30, 0x36	; 54
    289c:	ff 4f       	sbci	r31, 0xFF	; 255
    289e:	99 27       	eor	r25, r25
    28a0:	33 27       	eor	r19, r19
    28a2:	ee 24       	eor	r14, r14
    28a4:	ff 24       	eor	r15, r15
    28a6:	a7 01       	movw	r20, r14
    28a8:	e7 01       	movw	r28, r14
    28aa:	05 90       	lpm	r0, Z+
    28ac:	08 94       	sec
    28ae:	07 94       	ror	r0
    28b0:	28 f4       	brcc	.+10     	; 0x28bc <__ftoa_engine+0x80>
    28b2:	36 0f       	add	r19, r22
    28b4:	e7 1e       	adc	r14, r23
    28b6:	f8 1e       	adc	r15, r24
    28b8:	49 1f       	adc	r20, r25
    28ba:	51 1d       	adc	r21, r1
    28bc:	66 0f       	add	r22, r22
    28be:	77 1f       	adc	r23, r23
    28c0:	88 1f       	adc	r24, r24
    28c2:	99 1f       	adc	r25, r25
    28c4:	06 94       	lsr	r0
    28c6:	a1 f7       	brne	.-24     	; 0x28b0 <__ftoa_engine+0x74>
    28c8:	05 90       	lpm	r0, Z+
    28ca:	07 94       	ror	r0
    28cc:	28 f4       	brcc	.+10     	; 0x28d8 <__ftoa_engine+0x9c>
    28ce:	e7 0e       	add	r14, r23
    28d0:	f8 1e       	adc	r15, r24
    28d2:	49 1f       	adc	r20, r25
    28d4:	56 1f       	adc	r21, r22
    28d6:	c1 1d       	adc	r28, r1
    28d8:	77 0f       	add	r23, r23
    28da:	88 1f       	adc	r24, r24
    28dc:	99 1f       	adc	r25, r25
    28de:	66 1f       	adc	r22, r22
    28e0:	06 94       	lsr	r0
    28e2:	a1 f7       	brne	.-24     	; 0x28cc <__ftoa_engine+0x90>
    28e4:	05 90       	lpm	r0, Z+
    28e6:	07 94       	ror	r0
    28e8:	28 f4       	brcc	.+10     	; 0x28f4 <__ftoa_engine+0xb8>
    28ea:	f8 0e       	add	r15, r24
    28ec:	49 1f       	adc	r20, r25
    28ee:	56 1f       	adc	r21, r22
    28f0:	c7 1f       	adc	r28, r23
    28f2:	d1 1d       	adc	r29, r1
    28f4:	88 0f       	add	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	66 1f       	adc	r22, r22
    28fa:	77 1f       	adc	r23, r23
    28fc:	06 94       	lsr	r0
    28fe:	a1 f7       	brne	.-24     	; 0x28e8 <__ftoa_engine+0xac>
    2900:	05 90       	lpm	r0, Z+
    2902:	07 94       	ror	r0
    2904:	20 f4       	brcc	.+8      	; 0x290e <__ftoa_engine+0xd2>
    2906:	49 0f       	add	r20, r25
    2908:	56 1f       	adc	r21, r22
    290a:	c7 1f       	adc	r28, r23
    290c:	d8 1f       	adc	r29, r24
    290e:	99 0f       	add	r25, r25
    2910:	66 1f       	adc	r22, r22
    2912:	77 1f       	adc	r23, r23
    2914:	88 1f       	adc	r24, r24
    2916:	06 94       	lsr	r0
    2918:	a9 f7       	brne	.-22     	; 0x2904 <__ftoa_engine+0xc8>
    291a:	84 91       	lpm	r24, Z
    291c:	10 95       	com	r17
    291e:	17 70       	andi	r17, 0x07	; 7
    2920:	41 f0       	breq	.+16     	; 0x2932 <__ftoa_engine+0xf6>
    2922:	d6 95       	lsr	r29
    2924:	c7 95       	ror	r28
    2926:	57 95       	ror	r21
    2928:	47 95       	ror	r20
    292a:	f7 94       	ror	r15
    292c:	e7 94       	ror	r14
    292e:	1a 95       	dec	r17
    2930:	c1 f7       	brne	.-16     	; 0x2922 <__ftoa_engine+0xe6>
    2932:	e0 e7       	ldi	r30, 0x70	; 112
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	68 94       	set
    2938:	15 90       	lpm	r1, Z+
    293a:	15 91       	lpm	r17, Z+
    293c:	35 91       	lpm	r19, Z+
    293e:	65 91       	lpm	r22, Z+
    2940:	95 91       	lpm	r25, Z+
    2942:	05 90       	lpm	r0, Z+
    2944:	7f e2       	ldi	r23, 0x2F	; 47
    2946:	73 95       	inc	r23
    2948:	e1 18       	sub	r14, r1
    294a:	f1 0a       	sbc	r15, r17
    294c:	43 0b       	sbc	r20, r19
    294e:	56 0b       	sbc	r21, r22
    2950:	c9 0b       	sbc	r28, r25
    2952:	d0 09       	sbc	r29, r0
    2954:	c0 f7       	brcc	.-16     	; 0x2946 <__ftoa_engine+0x10a>
    2956:	e1 0c       	add	r14, r1
    2958:	f1 1e       	adc	r15, r17
    295a:	43 1f       	adc	r20, r19
    295c:	56 1f       	adc	r21, r22
    295e:	c9 1f       	adc	r28, r25
    2960:	d0 1d       	adc	r29, r0
    2962:	7e f4       	brtc	.+30     	; 0x2982 <__ftoa_engine+0x146>
    2964:	70 33       	cpi	r23, 0x30	; 48
    2966:	11 f4       	brne	.+4      	; 0x296c <__ftoa_engine+0x130>
    2968:	8a 95       	dec	r24
    296a:	e6 cf       	rjmp	.-52     	; 0x2938 <__ftoa_engine+0xfc>
    296c:	e8 94       	clt
    296e:	01 50       	subi	r16, 0x01	; 1
    2970:	30 f0       	brcs	.+12     	; 0x297e <__ftoa_engine+0x142>
    2972:	08 0f       	add	r16, r24
    2974:	0a f4       	brpl	.+2      	; 0x2978 <__ftoa_engine+0x13c>
    2976:	00 27       	eor	r16, r16
    2978:	02 17       	cp	r16, r18
    297a:	08 f4       	brcc	.+2      	; 0x297e <__ftoa_engine+0x142>
    297c:	20 2f       	mov	r18, r16
    297e:	23 95       	inc	r18
    2980:	02 2f       	mov	r16, r18
    2982:	7a 33       	cpi	r23, 0x3A	; 58
    2984:	28 f0       	brcs	.+10     	; 0x2990 <__ftoa_engine+0x154>
    2986:	79 e3       	ldi	r23, 0x39	; 57
    2988:	7d 93       	st	X+, r23
    298a:	2a 95       	dec	r18
    298c:	e9 f7       	brne	.-6      	; 0x2988 <__ftoa_engine+0x14c>
    298e:	10 c0       	rjmp	.+32     	; 0x29b0 <__ftoa_engine+0x174>
    2990:	7d 93       	st	X+, r23
    2992:	2a 95       	dec	r18
    2994:	89 f6       	brne	.-94     	; 0x2938 <__ftoa_engine+0xfc>
    2996:	06 94       	lsr	r0
    2998:	97 95       	ror	r25
    299a:	67 95       	ror	r22
    299c:	37 95       	ror	r19
    299e:	17 95       	ror	r17
    29a0:	17 94       	ror	r1
    29a2:	e1 18       	sub	r14, r1
    29a4:	f1 0a       	sbc	r15, r17
    29a6:	43 0b       	sbc	r20, r19
    29a8:	56 0b       	sbc	r21, r22
    29aa:	c9 0b       	sbc	r28, r25
    29ac:	d0 09       	sbc	r29, r0
    29ae:	98 f0       	brcs	.+38     	; 0x29d6 <__ftoa_engine+0x19a>
    29b0:	23 95       	inc	r18
    29b2:	7e 91       	ld	r23, -X
    29b4:	73 95       	inc	r23
    29b6:	7a 33       	cpi	r23, 0x3A	; 58
    29b8:	08 f0       	brcs	.+2      	; 0x29bc <__ftoa_engine+0x180>
    29ba:	70 e3       	ldi	r23, 0x30	; 48
    29bc:	7c 93       	st	X, r23
    29be:	20 13       	cpse	r18, r16
    29c0:	b8 f7       	brcc	.-18     	; 0x29b0 <__ftoa_engine+0x174>
    29c2:	7e 91       	ld	r23, -X
    29c4:	70 61       	ori	r23, 0x10	; 16
    29c6:	7d 93       	st	X+, r23
    29c8:	30 f0       	brcs	.+12     	; 0x29d6 <__ftoa_engine+0x19a>
    29ca:	83 95       	inc	r24
    29cc:	71 e3       	ldi	r23, 0x31	; 49
    29ce:	7d 93       	st	X+, r23
    29d0:	70 e3       	ldi	r23, 0x30	; 48
    29d2:	2a 95       	dec	r18
    29d4:	e1 f7       	brne	.-8      	; 0x29ce <__ftoa_engine+0x192>
    29d6:	11 24       	eor	r1, r1
    29d8:	ef 90       	pop	r14
    29da:	ff 90       	pop	r15
    29dc:	0f 91       	pop	r16
    29de:	1f 91       	pop	r17
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	99 27       	eor	r25, r25
    29e6:	87 fd       	sbrc	r24, 7
    29e8:	90 95       	com	r25
    29ea:	08 95       	ret

000029ec <strnlen_P>:
    29ec:	fc 01       	movw	r30, r24
    29ee:	05 90       	lpm	r0, Z+
    29f0:	61 50       	subi	r22, 0x01	; 1
    29f2:	70 40       	sbci	r23, 0x00	; 0
    29f4:	01 10       	cpse	r0, r1
    29f6:	d8 f7       	brcc	.-10     	; 0x29ee <strnlen_P+0x2>
    29f8:	80 95       	com	r24
    29fa:	90 95       	com	r25
    29fc:	8e 0f       	add	r24, r30
    29fe:	9f 1f       	adc	r25, r31
    2a00:	08 95       	ret

00002a02 <strnlen>:
    2a02:	fc 01       	movw	r30, r24
    2a04:	61 50       	subi	r22, 0x01	; 1
    2a06:	70 40       	sbci	r23, 0x00	; 0
    2a08:	01 90       	ld	r0, Z+
    2a0a:	01 10       	cpse	r0, r1
    2a0c:	d8 f7       	brcc	.-10     	; 0x2a04 <strnlen+0x2>
    2a0e:	80 95       	com	r24
    2a10:	90 95       	com	r25
    2a12:	8e 0f       	add	r24, r30
    2a14:	9f 1f       	adc	r25, r31
    2a16:	08 95       	ret

00002a18 <fputc>:
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	fb 01       	movw	r30, r22
    2a22:	23 81       	ldd	r18, Z+3	; 0x03
    2a24:	21 fd       	sbrc	r18, 1
    2a26:	03 c0       	rjmp	.+6      	; 0x2a2e <fputc+0x16>
    2a28:	8f ef       	ldi	r24, 0xFF	; 255
    2a2a:	9f ef       	ldi	r25, 0xFF	; 255
    2a2c:	2c c0       	rjmp	.+88     	; 0x2a86 <fputc+0x6e>
    2a2e:	22 ff       	sbrs	r18, 2
    2a30:	16 c0       	rjmp	.+44     	; 0x2a5e <fputc+0x46>
    2a32:	46 81       	ldd	r20, Z+6	; 0x06
    2a34:	57 81       	ldd	r21, Z+7	; 0x07
    2a36:	24 81       	ldd	r18, Z+4	; 0x04
    2a38:	35 81       	ldd	r19, Z+5	; 0x05
    2a3a:	42 17       	cp	r20, r18
    2a3c:	53 07       	cpc	r21, r19
    2a3e:	44 f4       	brge	.+16     	; 0x2a50 <fputc+0x38>
    2a40:	a0 81       	ld	r26, Z
    2a42:	b1 81       	ldd	r27, Z+1	; 0x01
    2a44:	9d 01       	movw	r18, r26
    2a46:	2f 5f       	subi	r18, 0xFF	; 255
    2a48:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4a:	31 83       	std	Z+1, r19	; 0x01
    2a4c:	20 83       	st	Z, r18
    2a4e:	8c 93       	st	X, r24
    2a50:	26 81       	ldd	r18, Z+6	; 0x06
    2a52:	37 81       	ldd	r19, Z+7	; 0x07
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	37 83       	std	Z+7, r19	; 0x07
    2a5a:	26 83       	std	Z+6, r18	; 0x06
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <fputc+0x6e>
    2a5e:	8b 01       	movw	r16, r22
    2a60:	ec 01       	movw	r28, r24
    2a62:	fb 01       	movw	r30, r22
    2a64:	00 84       	ldd	r0, Z+8	; 0x08
    2a66:	f1 85       	ldd	r31, Z+9	; 0x09
    2a68:	e0 2d       	mov	r30, r0
    2a6a:	09 95       	icall
    2a6c:	89 2b       	or	r24, r25
    2a6e:	e1 f6       	brne	.-72     	; 0x2a28 <fputc+0x10>
    2a70:	d8 01       	movw	r26, r16
    2a72:	16 96       	adiw	r26, 0x06	; 6
    2a74:	8d 91       	ld	r24, X+
    2a76:	9c 91       	ld	r25, X
    2a78:	17 97       	sbiw	r26, 0x07	; 7
    2a7a:	01 96       	adiw	r24, 0x01	; 1
    2a7c:	17 96       	adiw	r26, 0x07	; 7
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
    2a82:	16 97       	sbiw	r26, 0x06	; 6
    2a84:	ce 01       	movw	r24, r28
    2a86:	df 91       	pop	r29
    2a88:	cf 91       	pop	r28
    2a8a:	1f 91       	pop	r17
    2a8c:	0f 91       	pop	r16
    2a8e:	08 95       	ret

00002a90 <sprintf>:
    2a90:	ae e0       	ldi	r26, 0x0E	; 14
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	ee e4       	ldi	r30, 0x4E	; 78
    2a96:	f5 e1       	ldi	r31, 0x15	; 21
    2a98:	0c 94 ce 13 	jmp	0x279c	; 0x279c <__prologue_saves__+0x1c>
    2a9c:	0d 89       	ldd	r16, Y+21	; 0x15
    2a9e:	1e 89       	ldd	r17, Y+22	; 0x16
    2aa0:	86 e0       	ldi	r24, 0x06	; 6
    2aa2:	8c 83       	std	Y+4, r24	; 0x04
    2aa4:	1a 83       	std	Y+2, r17	; 0x02
    2aa6:	09 83       	std	Y+1, r16	; 0x01
    2aa8:	8f ef       	ldi	r24, 0xFF	; 255
    2aaa:	9f e7       	ldi	r25, 0x7F	; 127
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
    2ab0:	ae 01       	movw	r20, r28
    2ab2:	47 5e       	subi	r20, 0xE7	; 231
    2ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ab6:	6f 89       	ldd	r22, Y+23	; 0x17
    2ab8:	78 8d       	ldd	r23, Y+24	; 0x18
    2aba:	ce 01       	movw	r24, r28
    2abc:	01 96       	adiw	r24, 0x01	; 1
    2abe:	0e 94 43 10 	call	0x2086	; 0x2086 <vfprintf>
    2ac2:	ef 81       	ldd	r30, Y+7	; 0x07
    2ac4:	f8 85       	ldd	r31, Y+8	; 0x08
    2ac6:	e0 0f       	add	r30, r16
    2ac8:	f1 1f       	adc	r31, r17
    2aca:	10 82       	st	Z, r1
    2acc:	2e 96       	adiw	r28, 0x0e	; 14
    2ace:	e4 e0       	ldi	r30, 0x04	; 4
    2ad0:	0c 94 ea 13 	jmp	0x27d4	; 0x27d4 <__epilogue_restores__+0x1c>

00002ad4 <__ultoa_invert>:
    2ad4:	fa 01       	movw	r30, r20
    2ad6:	aa 27       	eor	r26, r26
    2ad8:	28 30       	cpi	r18, 0x08	; 8
    2ada:	51 f1       	breq	.+84     	; 0x2b30 <__ultoa_invert+0x5c>
    2adc:	20 31       	cpi	r18, 0x10	; 16
    2ade:	81 f1       	breq	.+96     	; 0x2b40 <__ultoa_invert+0x6c>
    2ae0:	e8 94       	clt
    2ae2:	6f 93       	push	r22
    2ae4:	6e 7f       	andi	r22, 0xFE	; 254
    2ae6:	6e 5f       	subi	r22, 0xFE	; 254
    2ae8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aea:	8f 4f       	sbci	r24, 0xFF	; 255
    2aec:	9f 4f       	sbci	r25, 0xFF	; 255
    2aee:	af 4f       	sbci	r26, 0xFF	; 255
    2af0:	b1 e0       	ldi	r27, 0x01	; 1
    2af2:	3e d0       	rcall	.+124    	; 0x2b70 <__ultoa_invert+0x9c>
    2af4:	b4 e0       	ldi	r27, 0x04	; 4
    2af6:	3c d0       	rcall	.+120    	; 0x2b70 <__ultoa_invert+0x9c>
    2af8:	67 0f       	add	r22, r23
    2afa:	78 1f       	adc	r23, r24
    2afc:	89 1f       	adc	r24, r25
    2afe:	9a 1f       	adc	r25, r26
    2b00:	a1 1d       	adc	r26, r1
    2b02:	68 0f       	add	r22, r24
    2b04:	79 1f       	adc	r23, r25
    2b06:	8a 1f       	adc	r24, r26
    2b08:	91 1d       	adc	r25, r1
    2b0a:	a1 1d       	adc	r26, r1
    2b0c:	6a 0f       	add	r22, r26
    2b0e:	71 1d       	adc	r23, r1
    2b10:	81 1d       	adc	r24, r1
    2b12:	91 1d       	adc	r25, r1
    2b14:	a1 1d       	adc	r26, r1
    2b16:	20 d0       	rcall	.+64     	; 0x2b58 <__ultoa_invert+0x84>
    2b18:	09 f4       	brne	.+2      	; 0x2b1c <__ultoa_invert+0x48>
    2b1a:	68 94       	set
    2b1c:	3f 91       	pop	r19
    2b1e:	2a e0       	ldi	r18, 0x0A	; 10
    2b20:	26 9f       	mul	r18, r22
    2b22:	11 24       	eor	r1, r1
    2b24:	30 19       	sub	r19, r0
    2b26:	30 5d       	subi	r19, 0xD0	; 208
    2b28:	31 93       	st	Z+, r19
    2b2a:	de f6       	brtc	.-74     	; 0x2ae2 <__ultoa_invert+0xe>
    2b2c:	cf 01       	movw	r24, r30
    2b2e:	08 95       	ret
    2b30:	46 2f       	mov	r20, r22
    2b32:	47 70       	andi	r20, 0x07	; 7
    2b34:	40 5d       	subi	r20, 0xD0	; 208
    2b36:	41 93       	st	Z+, r20
    2b38:	b3 e0       	ldi	r27, 0x03	; 3
    2b3a:	0f d0       	rcall	.+30     	; 0x2b5a <__ultoa_invert+0x86>
    2b3c:	c9 f7       	brne	.-14     	; 0x2b30 <__ultoa_invert+0x5c>
    2b3e:	f6 cf       	rjmp	.-20     	; 0x2b2c <__ultoa_invert+0x58>
    2b40:	46 2f       	mov	r20, r22
    2b42:	4f 70       	andi	r20, 0x0F	; 15
    2b44:	40 5d       	subi	r20, 0xD0	; 208
    2b46:	4a 33       	cpi	r20, 0x3A	; 58
    2b48:	18 f0       	brcs	.+6      	; 0x2b50 <__ultoa_invert+0x7c>
    2b4a:	49 5d       	subi	r20, 0xD9	; 217
    2b4c:	31 fd       	sbrc	r19, 1
    2b4e:	40 52       	subi	r20, 0x20	; 32
    2b50:	41 93       	st	Z+, r20
    2b52:	02 d0       	rcall	.+4      	; 0x2b58 <__ultoa_invert+0x84>
    2b54:	a9 f7       	brne	.-22     	; 0x2b40 <__ultoa_invert+0x6c>
    2b56:	ea cf       	rjmp	.-44     	; 0x2b2c <__ultoa_invert+0x58>
    2b58:	b4 e0       	ldi	r27, 0x04	; 4
    2b5a:	a6 95       	lsr	r26
    2b5c:	97 95       	ror	r25
    2b5e:	87 95       	ror	r24
    2b60:	77 95       	ror	r23
    2b62:	67 95       	ror	r22
    2b64:	ba 95       	dec	r27
    2b66:	c9 f7       	brne	.-14     	; 0x2b5a <__ultoa_invert+0x86>
    2b68:	00 97       	sbiw	r24, 0x00	; 0
    2b6a:	61 05       	cpc	r22, r1
    2b6c:	71 05       	cpc	r23, r1
    2b6e:	08 95       	ret
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	0a 2e       	mov	r0, r26
    2b76:	06 94       	lsr	r0
    2b78:	57 95       	ror	r21
    2b7a:	47 95       	ror	r20
    2b7c:	37 95       	ror	r19
    2b7e:	27 95       	ror	r18
    2b80:	ba 95       	dec	r27
    2b82:	c9 f7       	brne	.-14     	; 0x2b76 <__ultoa_invert+0xa2>
    2b84:	62 0f       	add	r22, r18
    2b86:	73 1f       	adc	r23, r19
    2b88:	84 1f       	adc	r24, r20
    2b8a:	95 1f       	adc	r25, r21
    2b8c:	a0 1d       	adc	r26, r0
    2b8e:	08 95       	ret

00002b90 <_exit>:
    2b90:	f8 94       	cli

00002b92 <__stop_program>:
    2b92:	ff cf       	rjmp	.-2      	; 0x2b92 <__stop_program>
