
MultitaskingAusDemUnterricht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000010e  000001a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  000001a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ae  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000609  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000222  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000353  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001487  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

uint8_t t=254, t1=0, t2=0;	// Zeitticker

int main(void)
{
	DDRB = (1<<ROT) | (1<<GELB) | (1<<GRUEN);
  a6:	86 e2       	ldi	r24, 0x26	; 38
  a8:	84 b9       	out	0x04, r24	; 4
	PORTB = PORTB | (1<<T);
  aa:	28 9a       	sbi	0x05, 0	; 5
		//_delay_ms(1);		// Fälschung einer Systemzeituhr
		t++;

		// 1. Blinker, ROT:  f=5Hz T=1/f=Periodendauer=0.2s=200ms
		if( t-t1 >= 100 ){				// t >= t1+100
			PORTB = PORTB ^ (1<<ROT);	// ^ ist XOR, toggelt
  ac:	42 e0       	ldi	r20, 0x02	; 2
		}


		// 2. Blinker, GELB:  6 Hz T=166ms
		if( t-t2 >= 83 ){
			PORTB = PORTB ^ (1<<GELB);	// ^ ist XOR, toggelt
  ae:	34 e0       	ldi	r19, 0x04	; 4
	PORTB = PORTB | (1<<T);

    while (1) 
    {
		//_delay_ms(1);		// Fälschung einer Systemzeituhr
		t++;
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  b4:	8f 5f       	subi	r24, 0xFF	; 255
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

		// 1. Blinker, ROT:  f=5Hz T=1/f=Periodendauer=0.2s=200ms
		if( t-t1 >= 100 ){				// t >= t1+100
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <t1>
  c0:	82 1b       	sub	r24, r18
  c2:	91 09       	sbc	r25, r1
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	91 05       	cpc	r25, r1
  c8:	44 f0       	brlt	.+16     	; 0xda <main+0x34>
			PORTB = PORTB ^ (1<<ROT);	// ^ ist XOR, toggelt
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	84 27       	eor	r24, r20
  ce:	85 b9       	out	0x05, r24	; 5
			t1 = t1 + 100;				// Zwischenzeit
  d0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <t1>
  d4:	8c 59       	subi	r24, 0x9C	; 156
  d6:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <t1>
		}


		// 2. Blinker, GELB:  6 Hz T=166ms
		if( t-t2 >= 83 ){
  da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
  e4:	82 1b       	sub	r24, r18
  e6:	91 09       	sbc	r25, r1
  e8:	83 35       	cpi	r24, 0x53	; 83
  ea:	91 05       	cpc	r25, r1
  ec:	44 f0       	brlt	.+16     	; 0xfe <main+0x58>
			PORTB = PORTB ^ (1<<GELB);	// ^ ist XOR, toggelt
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	83 27       	eor	r24, r19
  f2:	85 b9       	out	0x05, r24	; 5
			t2 = t2 + 83;
  f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f8:	8d 5a       	subi	r24, 0xAD	; 173
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		}
	
		// 3. Fingermelder
		if( (PINB & (1<<T)) == 0 )
  fe:	18 99       	sbic	0x03, 0	; 3
 100:	02 c0       	rjmp	.+4      	; 0x106 <main+0x60>
			PORTB = PORTB | (1<<GRUEN);
 102:	2d 9a       	sbi	0x05, 5	; 5
 104:	d5 cf       	rjmp	.-86     	; 0xb0 <main+0xa>
		else
			PORTB = PORTB &~(1<<GRUEN);
 106:	2d 98       	cbi	0x05, 5	; 5
 108:	d3 cf       	rjmp	.-90     	; 0xb0 <main+0xa>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
