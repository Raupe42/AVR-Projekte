
Periodische_Ereignisse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000180  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000180  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001f6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000228  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006a8  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000625  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000022c  00000000  00000000  00000f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  0000118c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000368  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000164e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_16>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 7c 00 	call	0xf8	; 0xf8 <main>
  8e:	0c 94 be 00 	jmp	0x17c	; 0x17c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <__vector_16>:
//125 Tiks für 500µs
//Vorladewert ist 256 - 125 = 131

//int preload_val = 256 - F_CPU / PRESCALER / F_OVF;
volatile int preload_val = 256 - F_CPU / PRESCALER / F_OVF; //volatile ist hier wichtig!!
ISR(TIMER0_OVF_vect){
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	3f 93       	push	r19
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
  aa:	ef 93       	push	r30
  ac:	ff 93       	push	r31
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	cd b7       	in	r28, 0x3d	; 61
  b4:	de b7       	in	r29, 0x3e	; 62

	TCNT0 = preload_val;
  b6:	86 e4       	ldi	r24, 0x46	; 70
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
  be:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
  c2:	fc 01       	movw	r30, r24
  c4:	20 83       	st	Z, r18
	PORTD ^= (1<<7);		// Bit 7 toggeln über XOR
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2b e2       	ldi	r18, 0x2B	; 43
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	30 81       	ld	r19, Z
  d2:	20 e8       	ldi	r18, 0x80	; 128
  d4:	23 27       	eor	r18, r19
  d6:	fc 01       	movw	r30, r24
  d8:	20 83       	st	Z, r18
}
  da:	00 00       	nop
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	ff 91       	pop	r31
  e2:	ef 91       	pop	r30
  e4:	9f 91       	pop	r25
  e6:	8f 91       	pop	r24
  e8:	3f 91       	pop	r19
  ea:	2f 91       	pop	r18
  ec:	0f 90       	pop	r0
  ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  f2:	0f 90       	pop	r0
  f4:	1f 90       	pop	r1
  f6:	18 95       	reti

000000f8 <main>:

int main(void){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62

	DDRD |= (1<<7);			// Treiber für Buzzer an
 100:	8a e2       	ldi	r24, 0x2A	; 42
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	2a e2       	ldi	r18, 0x2A	; 42
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	f9 01       	movw	r30, r18
 10a:	20 81       	ld	r18, Z
 10c:	20 68       	ori	r18, 0x80	; 128
 10e:	fc 01       	movw	r30, r24
 110:	20 83       	st	Z, r18
	PORTD |= (1<<TASTER);
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	2b e2       	ldi	r18, 0x2B	; 43
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	24 60       	ori	r18, 0x04	; 4
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	TCNT0 = PRELOAD;
 124:	86 e4       	ldi	r24, 0x46	; 70
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	23 e8       	ldi	r18, 0x83	; 131
 12a:	fc 01       	movw	r30, r24
 12c:	20 83       	st	Z, r18
	TCCR0B = P_CODE_64;		// Vorteiler
 12e:	85 e4       	ldi	r24, 0x45	; 69
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	23 e0       	ldi	r18, 0x03	; 3
 134:	fc 01       	movw	r30, r24
 136:	20 83       	st	Z, r18
	TIMSK0 |= (1<<TOIE0);	// Überlauf Interrupt freigeben
 138:	8e e6       	ldi	r24, 0x6E	; 110
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2e e6       	ldi	r18, 0x6E	; 110
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	21 60       	ori	r18, 0x01	; 1
 146:	fc 01       	movw	r30, r24
 148:	20 83       	st	Z, r18
	sei();					// Interrupts global freigeben
 14a:	78 94       	sei
	
	while (1){
		if (!(PIND & (1<<TASTER)))
 14c:	89 e2       	ldi	r24, 0x29	; 41
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 2f       	mov	r24, r24
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	84 70       	andi	r24, 0x04	; 4
 15a:	99 27       	eor	r25, r25
 15c:	89 2b       	or	r24, r25
 15e:	39 f4       	brne	.+14     	; 0x16e <main+0x76>
			preload_val = PRELOAD / 2;
 160:	82 ec       	ldi	r24, 0xC2	; 194
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 168:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 16c:	ef cf       	rjmp	.-34     	; 0x14c <main+0x54>
		else
			preload_val = PRELOAD;
 16e:	83 e8       	ldi	r24, 0x83	; 131
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>

	}
 17a:	e8 cf       	rjmp	.-48     	; 0x14c <main+0x54>

0000017c <_exit>:
 17c:	f8 94       	cli

0000017e <__stop_program>:
 17e:	ff cf       	rjmp	.-2      	; 0x17e <__stop_program>
