
Timer-Ereignisse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000583  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000050e  00000000  00000000  0000077b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fa  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00000e84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002da  00000000  00000000  00000f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000de  00000000  00000000  000011da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000012b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_11>:
#define P_CODE_1024	(1<<CS00)| (1<<CS02);

// Vorladewert
#define PRELOAD		256 - F_CPU / PRESCALER / F_OVF

ISR(TIMER0_OVF_vect){
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  74:	0f 92       	push	r0
  76:	11 24       	eor	r1, r1
  78:	2f 93       	push	r18
  7a:	3f 93       	push	r19
  7c:	8f 93       	push	r24
  7e:	9f 93       	push	r25
  80:	ef 93       	push	r30
  82:	ff 93       	push	r31
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = PRELOAD;
  8c:	82 e5       	ldi	r24, 0x52	; 82
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	22 eb       	ldi	r18, 0xB2	; 178
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
	PORTD ^= (1<<7);	// Bit 7 toggeln über XOR
  96:	82 e3       	ldi	r24, 0x32	; 50
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	22 e3       	ldi	r18, 0x32	; 50
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	f9 01       	movw	r30, r18
  a0:	30 81       	ld	r19, Z
  a2:	20 e8       	ldi	r18, 0x80	; 128
  a4:	23 27       	eor	r18, r19
  a6:	fc 01       	movw	r30, r24
  a8:	20 83       	st	Z, r18
}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	ff 91       	pop	r31
  b0:	ef 91       	pop	r30
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	3f 91       	pop	r19
  b8:	2f 91       	pop	r18
  ba:	0f 90       	pop	r0
  bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  c0:	0f 90       	pop	r0
  c2:	1f 90       	pop	r1
  c4:	18 95       	reti

000000c6 <main>:

int main(void){
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62

	DDRD |= (1<<7);			// Treiber für Buzzer an
  ce:	81 e3       	ldi	r24, 0x31	; 49
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	21 e3       	ldi	r18, 0x31	; 49
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	f9 01       	movw	r30, r18
  d8:	20 81       	ld	r18, Z
  da:	20 68       	ori	r18, 0x80	; 128
  dc:	fc 01       	movw	r30, r24
  de:	20 83       	st	Z, r18
	TCNT0 = PRELOAD;
  e0:	82 e5       	ldi	r24, 0x52	; 82
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	22 eb       	ldi	r18, 0xB2	; 178
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	TCCR0 = P_CODE_1024;	// Vorteiler
  ea:	83 e5       	ldi	r24, 0x53	; 83
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	25 e0       	ldi	r18, 0x05	; 5
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	TIMSK |= (1<<TOIE0);	// Überlauf Interrupt freigeben
  f4:	89 e5       	ldi	r24, 0x59	; 89
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	29 e5       	ldi	r18, 0x59	; 89
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	f9 01       	movw	r30, r18
  fe:	20 81       	ld	r18, Z
 100:	21 60       	ori	r18, 0x01	; 1
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
	sei();					// Interrupts global freigeben
 106:	78 94       	sei

	while (1){
	}
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x42>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
