
Periodische_Ereignisse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a3  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000061e  00000000  00000000  0000092b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022c  00000000  00000000  00000f49  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000368  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000de  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000163a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  88:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_16>:
//125 Tiks für 500µs
//Vorladewert ist 256 - 125 = 131

//int preload_val = 256 - F_CPU / PRESCALER / F_OVF;
int preload_val = 0;
ISR(TIMER0_OVF_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	3f 93       	push	r19
  a0:	8f 93       	push	r24
  a2:	9f 93       	push	r25
  a4:	ef 93       	push	r30
  a6:	ff 93       	push	r31
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62

	TCNT0 = preload_val;
  b0:	86 e4       	ldi	r24, 0x46	; 70
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  b8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  bc:	fc 01       	movw	r30, r24
  be:	20 83       	st	Z, r18
	PORTD ^= (1<<7);		// Bit 7 toggeln über XOR
  c0:	8b e2       	ldi	r24, 0x2B	; 43
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	2b e2       	ldi	r18, 0x2B	; 43
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	30 81       	ld	r19, Z
  cc:	20 e8       	ldi	r18, 0x80	; 128
  ce:	23 27       	eor	r18, r19
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
}
  d4:	00 00       	nop
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	9f 91       	pop	r25
  e0:	8f 91       	pop	r24
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <main>:

int main(void){
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62

	DDRD |= (1<<7);			// Treiber für Buzzer an
  fa:	8a e2       	ldi	r24, 0x2A	; 42
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	2a e2       	ldi	r18, 0x2A	; 42
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	f9 01       	movw	r30, r18
 104:	20 81       	ld	r18, Z
 106:	20 68       	ori	r18, 0x80	; 128
 108:	fc 01       	movw	r30, r24
 10a:	20 83       	st	Z, r18
	PORTD |= (1<<TASTER);
 10c:	8b e2       	ldi	r24, 0x2B	; 43
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	2b e2       	ldi	r18, 0x2B	; 43
 112:	30 e0       	ldi	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	20 81       	ld	r18, Z
 118:	24 60       	ori	r18, 0x04	; 4
 11a:	fc 01       	movw	r30, r24
 11c:	20 83       	st	Z, r18
	TCNT0 = PRELOAD;
 11e:	86 e4       	ldi	r24, 0x46	; 70
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	23 e8       	ldi	r18, 0x83	; 131
 124:	fc 01       	movw	r30, r24
 126:	20 83       	st	Z, r18
	TCCR0B = P_CODE_64;		// Vorteiler
 128:	85 e4       	ldi	r24, 0x45	; 69
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	23 e0       	ldi	r18, 0x03	; 3
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	TIMSK0 |= (1<<TOIE0);	// Überlauf Interrupt freigeben
 132:	8e e6       	ldi	r24, 0x6E	; 110
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	2e e6       	ldi	r18, 0x6E	; 110
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	21 60       	ori	r18, 0x01	; 1
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18
	sei();					// Interrupts global freigeben
 144:	78 94       	sei
	
	while (1){
		if (!(PIND & (1<<TASTER)))
 146:	89 e2       	ldi	r24, 0x29	; 41
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fc 01       	movw	r30, r24
 14c:	80 81       	ld	r24, Z
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	84 70       	andi	r24, 0x04	; 4
 154:	99 27       	eor	r25, r25
 156:	89 2b       	or	r24, r25
 158:	39 f4       	brne	.+14     	; 0x168 <main+0x76>
			preload_val = PRELOAD / 2;
 15a:	82 ec       	ldi	r24, 0xC2	; 194
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 166:	ef cf       	rjmp	.-34     	; 0x146 <main+0x54>
		else
			preload_val = PRELOAD;
 168:	83 e8       	ldi	r24, 0x83	; 131
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>

	}
 174:	e8 cf       	rjmp	.-48     	; 0x146 <main+0x54>

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
