
Wechselblinker.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000015d  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e8  00000000  00000000  00000331  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000124  00000000  00000000  00000419  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000018c  00000000  00000000  00000564  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000124  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:



int main(void)
{
	DDRB = 0b00110000;
  80:	80 e3       	ldi	r24, 0x30	; 48
  82:	84 b9       	out	0x04, r24	; 4
	int value = 5;
  84:	25 e0       	ldi	r18, 0x05	; 5
  86:	30 e0       	ldi	r19, 0x00	; 0
	int i;
    /* Replace with your application code */
    while (1)
    {
		PORTB = 0b00100000;
  88:	70 e2       	ldi	r23, 0x20	; 32
		for (i = 0; i < value; i++)
			_delay_ms(20);

		PORTB = 0b00010000;
  8a:	60 e1       	ldi	r22, 0x10	; 16
	int i;
    /* Replace with your application code */
    while (1)
    {
		PORTB = 0b00100000;
		for (i = 0; i < value; i++)
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
	int value = 5;
	int i;
    /* Replace with your application code */
    while (1)
    {
		PORTB = 0b00100000;
  90:	75 b9       	out	0x05, r23	; 5
		for (i = 0; i < value; i++)
  92:	12 16       	cp	r1, r18
  94:	13 06       	cpc	r1, r19
  96:	44 f5       	brge	.+80     	; 0xe8 <main+0x68>
  98:	85 2f       	mov	r24, r21
  9a:	94 2f       	mov	r25, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9c:	af ef       	ldi	r26, 0xFF	; 255
  9e:	e9 ef       	ldi	r30, 0xF9	; 249
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	a1 50       	subi	r26, 0x01	; 1
  a4:	e0 40       	sbci	r30, 0x00	; 0
  a6:	f0 40       	sbci	r31, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x22>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x2c>
  ac:	00 00       	nop
  ae:	01 96       	adiw	r24, 0x01	; 1
  b0:	82 17       	cp	r24, r18
  b2:	93 07       	cpc	r25, r19
  b4:	99 f7       	brne	.-26     	; 0x9c <main+0x1c>
  b6:	14 c0       	rjmp	.+40     	; 0xe0 <main+0x60>
  b8:	af ef       	ldi	r26, 0xFF	; 255
  ba:	e9 ef       	ldi	r30, 0xF9	; 249
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	a1 50       	subi	r26, 0x01	; 1
  c0:	e0 40       	sbci	r30, 0x00	; 0
  c2:	f0 40       	sbci	r31, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x3e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x48>
  c8:	00 00       	nop
			_delay_ms(20);

		PORTB = 0b00010000;
		for (i = 0; i < value; i++)
  ca:	01 96       	adiw	r24, 0x01	; 1
  cc:	82 17       	cp	r24, r18
  ce:	93 07       	cpc	r25, r19
  d0:	99 f7       	brne	.-26     	; 0xb8 <main+0x38>
			_delay_ms(20);

		if (PORTB % 8 == 1)
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	87 70       	andi	r24, 0x07	; 7
  d6:	81 30       	cpi	r24, 0x01	; 1
  d8:	d9 f6       	brne	.-74     	; 0x90 <main+0x10>
		{
			value ++;
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	3f 4f       	sbci	r19, 0xFF	; 255
  de:	d8 cf       	rjmp	.-80     	; 0x90 <main+0x10>
    {
		PORTB = 0b00100000;
		for (i = 0; i < value; i++)
			_delay_ms(20);

		PORTB = 0b00010000;
  e0:	65 b9       	out	0x05, r22	; 5
  e2:	85 2f       	mov	r24, r21
  e4:	94 2f       	mov	r25, r20
  e6:	e8 cf       	rjmp	.-48     	; 0xb8 <main+0x38>
  e8:	65 b9       	out	0x05, r22	; 5
  ea:	f3 cf       	rjmp	.-26     	; 0xd2 <main+0x52>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
