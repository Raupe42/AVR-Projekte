
Demo sytemtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000770  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072a  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000661  00000000  00000000  00000f42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002b2  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  00001858  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000326  00000000  00000000  00001d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000206d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bb 01 	call	0x376	; 0x376 <main>
  88:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:
volatile uint64_t t2_soft;		// Zählt 0.5us-Ticks

#define SEC	0.0000005

ISR( TIMER2_OVF_vect )
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	af 92       	push	r10
  9e:	bf 92       	push	r11
  a0:	cf 92       	push	r12
  a2:	df 92       	push	r13
  a4:	ef 92       	push	r14
  a6:	ff 92       	push	r15
  a8:	0f 93       	push	r16
  aa:	1f 93       	push	r17
  ac:	2f 93       	push	r18
  ae:	3f 93       	push	r19
  b0:	4f 93       	push	r20
  b2:	5f 93       	push	r21
  b4:	6f 93       	push	r22
  b6:	7f 93       	push	r23
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
	t2_soft += 256;
  c4:	a0 90 00 01 	lds	r10, 0x0100	; 0x800100 <_edata>
  c8:	b0 90 01 01 	lds	r11, 0x0101	; 0x800101 <_edata+0x1>
  cc:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <_edata+0x2>
  d0:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <_edata+0x3>
  d4:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <_edata+0x4>
  d8:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <_edata+0x5>
  dc:	00 91 06 01 	lds	r16, 0x0106	; 0x800106 <_edata+0x6>
  e0:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <_edata+0x7>
  e4:	2a 2d       	mov	r18, r10
  e6:	3b 2d       	mov	r19, r11
  e8:	4c 2d       	mov	r20, r12
  ea:	5d 2d       	mov	r21, r13
  ec:	6e 2d       	mov	r22, r14
  ee:	7f 2d       	mov	r23, r15
  f0:	80 2f       	mov	r24, r16
  f2:	91 2f       	mov	r25, r17
  f4:	3f 5f       	subi	r19, 0xFF	; 255
  f6:	4f 4f       	sbci	r20, 0xFF	; 255
  f8:	5f 4f       	sbci	r21, 0xFF	; 255
  fa:	6f 4f       	sbci	r22, 0xFF	; 255
  fc:	7f 4f       	sbci	r23, 0xFF	; 255
  fe:	8f 4f       	sbci	r24, 0xFF	; 255
 100:	9f 4f       	sbci	r25, 0xFF	; 255
 102:	a2 2e       	mov	r10, r18
 104:	b3 2e       	mov	r11, r19
 106:	c4 2e       	mov	r12, r20
 108:	d5 2e       	mov	r13, r21
 10a:	e6 2e       	mov	r14, r22
 10c:	f7 2e       	mov	r15, r23
 10e:	08 2f       	mov	r16, r24
 110:	19 2f       	mov	r17, r25
 112:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <_edata>
 116:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <_edata+0x1>
 11a:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <_edata+0x2>
 11e:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <_edata+0x3>
 122:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <_edata+0x4>
 126:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <_edata+0x5>
 12a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <_edata+0x6>
 12e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <_edata+0x7>
}
 132:	00 00       	nop
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	9f 91       	pop	r25
 13a:	8f 91       	pop	r24
 13c:	7f 91       	pop	r23
 13e:	6f 91       	pop	r22
 140:	5f 91       	pop	r21
 142:	4f 91       	pop	r20
 144:	3f 91       	pop	r19
 146:	2f 91       	pop	r18
 148:	1f 91       	pop	r17
 14a:	0f 91       	pop	r16
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
 154:	bf 90       	pop	r11
 156:	af 90       	pop	r10
 158:	0f 90       	pop	r0
 15a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <t2_init>:

void t2_init( void )
{
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	t2_soft = 0;
 16c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 170:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 174:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
 178:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
 17c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
 180:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>
 184:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>
 188:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>
	TCCR2B = 1<<CS21;		// mode 0, prescaler 8
 18c:	81 eb       	ldi	r24, 0xB1	; 177
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	22 e0       	ldi	r18, 0x02	; 2
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	TIMSK2 |= 1<<TOIE2;		// enable overflow interrupt
 196:	80 e7       	ldi	r24, 0x70	; 112
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	20 e7       	ldi	r18, 0x70	; 112
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	21 60       	ori	r18, 0x01	; 1
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18
	sei();					// Globale Interrupt Freigabe
 1a8:	78 94       	sei
}
 1aa:	00 00       	nop
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <get_ticks>:


uint64_t get_ticks( void )  // read T2 as 64 bit timer
{
 1b2:	2f 92       	push	r2
 1b4:	3f 92       	push	r3
 1b6:	4f 92       	push	r4
 1b8:	5f 92       	push	r5
 1ba:	6f 92       	push	r6
 1bc:	7f 92       	push	r7
 1be:	8f 92       	push	r8
 1c0:	9f 92       	push	r9
 1c2:	af 92       	push	r10
 1c4:	bf 92       	push	r11
 1c6:	cf 92       	push	r12
 1c8:	df 92       	push	r13
 1ca:	ef 92       	push	r14
 1cc:	ff 92       	push	r15
 1ce:	0f 93       	push	r16
 1d0:	1f 93       	push	r17
 1d2:	cf 93       	push	r28
 1d4:	df 93       	push	r29
 1d6:	cd b7       	in	r28, 0x3d	; 61
 1d8:	de b7       	in	r29, 0x3e	; 62
 1da:	61 97       	sbiw	r28, 0x11	; 17
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
	uint64_t val;
	uint8_t tifr;

	cli();					// Interrupts global sperren
 1e6:	f8 94       	cli
	val = t2_soft + TCNT2;	// val enthält den Zeitstempel
 1e8:	82 eb       	ldi	r24, 0xB2	; 178
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	fc 01       	movw	r30, r24
 1ee:	80 81       	ld	r24, Z
 1f0:	a8 2e       	mov	r10, r24
 1f2:	b1 2c       	mov	r11, r1
 1f4:	c1 2c       	mov	r12, r1
 1f6:	d1 2c       	mov	r13, r1
 1f8:	e1 2c       	mov	r14, r1
 1fa:	f1 2c       	mov	r15, r1
 1fc:	87 01       	movw	r16, r14
 1fe:	f0 91 00 01 	lds	r31, 0x0100	; 0x800100 <_edata>
 202:	fa 87       	std	Y+10, r31	; 0x0a
 204:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <_edata+0x1>
 208:	8b 87       	std	Y+11, r24	; 0x0b
 20a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <_edata+0x2>
 20e:	9c 87       	std	Y+12, r25	; 0x0c
 210:	e0 91 03 01 	lds	r30, 0x0103	; 0x800103 <_edata+0x3>
 214:	ed 87       	std	Y+13, r30	; 0x0d
 216:	f0 91 04 01 	lds	r31, 0x0104	; 0x800104 <_edata+0x4>
 21a:	fe 87       	std	Y+14, r31	; 0x0e
 21c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <_edata+0x5>
 220:	8f 87       	std	Y+15, r24	; 0x0f
 222:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <_edata+0x6>
 226:	98 8b       	std	Y+16, r25	; 0x10
 228:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <_edata+0x7>
 22c:	e9 8b       	std	Y+17, r30	; 0x11
 22e:	2a 2d       	mov	r18, r10
 230:	3b 2d       	mov	r19, r11
 232:	4c 2d       	mov	r20, r12
 234:	5d 2d       	mov	r21, r13
 236:	6e 2d       	mov	r22, r14
 238:	7f 2d       	mov	r23, r15
 23a:	80 2f       	mov	r24, r16
 23c:	91 2f       	mov	r25, r17
 23e:	aa 84       	ldd	r10, Y+10	; 0x0a
 240:	bb 84       	ldd	r11, Y+11	; 0x0b
 242:	cc 84       	ldd	r12, Y+12	; 0x0c
 244:	dd 84       	ldd	r13, Y+13	; 0x0d
 246:	ee 84       	ldd	r14, Y+14	; 0x0e
 248:	ff 84       	ldd	r15, Y+15	; 0x0f
 24a:	08 89       	ldd	r16, Y+16	; 0x10
 24c:	19 89       	ldd	r17, Y+17	; 0x11
 24e:	0e 94 67 03 	call	0x6ce	; 0x6ce <__adddi3>
 252:	29 83       	std	Y+1, r18	; 0x01
 254:	3a 83       	std	Y+2, r19	; 0x02
 256:	4b 83       	std	Y+3, r20	; 0x03
 258:	5c 83       	std	Y+4, r21	; 0x04
 25a:	6d 83       	std	Y+5, r22	; 0x05
 25c:	7e 83       	std	Y+6, r23	; 0x06
 25e:	8f 83       	std	Y+7, r24	; 0x07
 260:	98 87       	std	Y+8, r25	; 0x08
	tifr = TIFR2;			// read interrupt flags
 262:	87 e3       	ldi	r24, 0x37	; 55
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	80 81       	ld	r24, Z
 26a:	89 87       	std	Y+9, r24	; 0x09
	sei();					// Interrupts wieder an
 26c:	78 94       	sei
	if( (tifr & (1<<TOV2) ) && !(val & 0x80) ) // overflow prior reading TCNT2 ?
 26e:	89 85       	ldd	r24, Y+9	; 0x09
 270:	88 2f       	mov	r24, r24
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	81 70       	andi	r24, 0x01	; 1
 276:	99 27       	eor	r25, r25
 278:	89 2b       	or	r24, r25
 27a:	09 f4       	brne	.+2      	; 0x27e <get_ticks+0xcc>
 27c:	4b c0       	rjmp	.+150    	; 0x314 <get_ticks+0x162>
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	f8 2f       	mov	r31, r24
 282:	f0 78       	andi	r31, 0x80	; 128
 284:	2f 2e       	mov	r2, r31
 286:	8a 81       	ldd	r24, Y+2	; 0x02
 288:	98 2f       	mov	r25, r24
 28a:	90 70       	andi	r25, 0x00	; 0
 28c:	39 2e       	mov	r3, r25
 28e:	8b 81       	ldd	r24, Y+3	; 0x03
 290:	e8 2f       	mov	r30, r24
 292:	e0 70       	andi	r30, 0x00	; 0
 294:	4e 2e       	mov	r4, r30
 296:	8c 81       	ldd	r24, Y+4	; 0x04
 298:	f8 2f       	mov	r31, r24
 29a:	f0 70       	andi	r31, 0x00	; 0
 29c:	5f 2e       	mov	r5, r31
 29e:	8d 81       	ldd	r24, Y+5	; 0x05
 2a0:	98 2f       	mov	r25, r24
 2a2:	90 70       	andi	r25, 0x00	; 0
 2a4:	69 2e       	mov	r6, r25
 2a6:	8e 81       	ldd	r24, Y+6	; 0x06
 2a8:	e8 2f       	mov	r30, r24
 2aa:	e0 70       	andi	r30, 0x00	; 0
 2ac:	7e 2e       	mov	r7, r30
 2ae:	8f 81       	ldd	r24, Y+7	; 0x07
 2b0:	f8 2f       	mov	r31, r24
 2b2:	f0 70       	andi	r31, 0x00	; 0
 2b4:	8f 2e       	mov	r8, r31
 2b6:	88 85       	ldd	r24, Y+8	; 0x08
 2b8:	98 2f       	mov	r25, r24
 2ba:	90 70       	andi	r25, 0x00	; 0
 2bc:	99 2e       	mov	r9, r25
 2be:	22 2d       	mov	r18, r2
 2c0:	33 2d       	mov	r19, r3
 2c2:	44 2d       	mov	r20, r4
 2c4:	55 2d       	mov	r21, r5
 2c6:	66 2d       	mov	r22, r6
 2c8:	77 2d       	mov	r23, r7
 2ca:	88 2d       	mov	r24, r8
 2cc:	99 2d       	mov	r25, r9
 2ce:	a0 e0       	ldi	r26, 0x00	; 0
 2d0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__cmpdi2_s8>
 2d4:	f9 f4       	brne	.+62     	; 0x314 <get_ticks+0x162>
		val += 256;         // then add overflow
 2d6:	29 81       	ldd	r18, Y+1	; 0x01
 2d8:	3a 81       	ldd	r19, Y+2	; 0x02
 2da:	4b 81       	ldd	r20, Y+3	; 0x03
 2dc:	5c 81       	ldd	r21, Y+4	; 0x04
 2de:	6d 81       	ldd	r22, Y+5	; 0x05
 2e0:	7e 81       	ldd	r23, Y+6	; 0x06
 2e2:	8f 81       	ldd	r24, Y+7	; 0x07
 2e4:	98 85       	ldd	r25, Y+8	; 0x08
 2e6:	3f 5f       	subi	r19, 0xFF	; 255
 2e8:	4f 4f       	sbci	r20, 0xFF	; 255
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	6f 4f       	sbci	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	8f 4f       	sbci	r24, 0xFF	; 255
 2f2:	9f 4f       	sbci	r25, 0xFF	; 255
 2f4:	a2 2e       	mov	r10, r18
 2f6:	b3 2e       	mov	r11, r19
 2f8:	c4 2e       	mov	r12, r20
 2fa:	d5 2e       	mov	r13, r21
 2fc:	e6 2e       	mov	r14, r22
 2fe:	f7 2e       	mov	r15, r23
 300:	08 2f       	mov	r16, r24
 302:	19 2f       	mov	r17, r25
 304:	a9 82       	std	Y+1, r10	; 0x01
 306:	ba 82       	std	Y+2, r11	; 0x02
 308:	cb 82       	std	Y+3, r12	; 0x03
 30a:	dc 82       	std	Y+4, r13	; 0x04
 30c:	ed 82       	std	Y+5, r14	; 0x05
 30e:	fe 82       	std	Y+6, r15	; 0x06
 310:	0f 83       	std	Y+7, r16	; 0x07
 312:	18 87       	std	Y+8, r17	; 0x08
	return val;
 314:	29 81       	ldd	r18, Y+1	; 0x01
 316:	3a 81       	ldd	r19, Y+2	; 0x02
 318:	4b 81       	ldd	r20, Y+3	; 0x03
 31a:	5c 81       	ldd	r21, Y+4	; 0x04
 31c:	6d 81       	ldd	r22, Y+5	; 0x05
 31e:	7e 81       	ldd	r23, Y+6	; 0x06
 320:	8f 81       	ldd	r24, Y+7	; 0x07
 322:	98 85       	ldd	r25, Y+8	; 0x08
 324:	a2 2e       	mov	r10, r18
 326:	b3 2e       	mov	r11, r19
 328:	c4 2e       	mov	r12, r20
 32a:	d5 2e       	mov	r13, r21
 32c:	e6 2e       	mov	r14, r22
 32e:	f7 2e       	mov	r15, r23
 330:	08 2f       	mov	r16, r24
 332:	19 2f       	mov	r17, r25
}
 334:	2a 2d       	mov	r18, r10
 336:	3b 2d       	mov	r19, r11
 338:	4c 2d       	mov	r20, r12
 33a:	5d 2d       	mov	r21, r13
 33c:	6e 2d       	mov	r22, r14
 33e:	7f 2d       	mov	r23, r15
 340:	80 2f       	mov	r24, r16
 342:	91 2f       	mov	r25, r17
 344:	61 96       	adiw	r28, 0x11	; 17
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	1f 91       	pop	r17
 356:	0f 91       	pop	r16
 358:	ff 90       	pop	r15
 35a:	ef 90       	pop	r14
 35c:	df 90       	pop	r13
 35e:	cf 90       	pop	r12
 360:	bf 90       	pop	r11
 362:	af 90       	pop	r10
 364:	9f 90       	pop	r9
 366:	8f 90       	pop	r8
 368:	7f 90       	pop	r7
 36a:	6f 90       	pop	r6
 36c:	5f 90       	pop	r5
 36e:	4f 90       	pop	r4
 370:	3f 90       	pop	r3
 372:	2f 90       	pop	r2
 374:	08 95       	ret

00000376 <main>:

// Neu: Anführungsstriche statt Spitzklammern, d.h. Suchpfad gleich Projektordner
#include "systemtime.h"

int main( void )
{
 376:	af 92       	push	r10
 378:	bf 92       	push	r11
 37a:	cf 92       	push	r12
 37c:	df 92       	push	r13
 37e:	ef 92       	push	r14
 380:	ff 92       	push	r15
 382:	0f 93       	push	r16
 384:	1f 93       	push	r17
 386:	cf 93       	push	r28
 388:	df 93       	push	r29
 38a:	cd b7       	in	r28, 0x3d	; 61
 38c:	de b7       	in	r29, 0x3e	; 62
 38e:	2c 97       	sbiw	r28, 0x0c	; 12
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
	uint64_t timerticks=0;			// Zeit in Timerticks seit Bootvorgang
 39a:	19 82       	std	Y+1, r1	; 0x01
 39c:	1a 82       	std	Y+2, r1	; 0x02
 39e:	1b 82       	std	Y+3, r1	; 0x03
 3a0:	1c 82       	std	Y+4, r1	; 0x04
 3a2:	1d 82       	std	Y+5, r1	; 0x05
 3a4:	1e 82       	std	Y+6, r1	; 0x06
 3a6:	1f 82       	std	Y+7, r1	; 0x07
 3a8:	18 86       	std	Y+8, r1	; 0x08
	double t=0;						// Zeit in Sekunden
 3aa:	19 86       	std	Y+9, r1	; 0x09
 3ac:	1a 86       	std	Y+10, r1	; 0x0a
 3ae:	1b 86       	std	Y+11, r1	; 0x0b
 3b0:	1c 86       	std	Y+12, r1	; 0x0c

	t2_init();						// siehe systemtime.h
 3b2:	0e 94 b2 00 	call	0x164	; 0x164 <t2_init>

	while(1){
		timerticks = get_ticks();	// Angabe in Vielfachen von 0.5us
 3b6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <get_ticks>
 3ba:	a2 2e       	mov	r10, r18
 3bc:	b3 2e       	mov	r11, r19
 3be:	c4 2e       	mov	r12, r20
 3c0:	d5 2e       	mov	r13, r21
 3c2:	e6 2e       	mov	r14, r22
 3c4:	f7 2e       	mov	r15, r23
 3c6:	08 2f       	mov	r16, r24
 3c8:	19 2f       	mov	r17, r25
 3ca:	a9 82       	std	Y+1, r10	; 0x01
 3cc:	ba 82       	std	Y+2, r11	; 0x02
 3ce:	cb 82       	std	Y+3, r12	; 0x03
 3d0:	dc 82       	std	Y+4, r13	; 0x04
 3d2:	ed 82       	std	Y+5, r14	; 0x05
 3d4:	fe 82       	std	Y+6, r15	; 0x06
 3d6:	0f 83       	std	Y+7, r16	; 0x07
 3d8:	18 87       	std	Y+8, r17	; 0x08
		t = get_ticks()*SEC;		// Angabe in Sekunden, SEC siehe systemtime.h
 3da:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <get_ticks>
 3de:	a2 2e       	mov	r10, r18
 3e0:	b3 2e       	mov	r11, r19
 3e2:	c4 2e       	mov	r12, r20
 3e4:	d5 2e       	mov	r13, r21
 3e6:	e6 2e       	mov	r14, r22
 3e8:	f7 2e       	mov	r15, r23
 3ea:	08 2f       	mov	r16, r24
 3ec:	19 2f       	mov	r17, r25
 3ee:	2a 2d       	mov	r18, r10
 3f0:	3b 2d       	mov	r19, r11
 3f2:	4c 2d       	mov	r20, r12
 3f4:	5d 2d       	mov	r21, r13
 3f6:	6e 2d       	mov	r22, r14
 3f8:	7f 2d       	mov	r23, r15
 3fa:	80 2f       	mov	r24, r16
 3fc:	91 2f       	mov	r25, r17
 3fe:	0e 94 42 02 	call	0x484	; 0x484 <__floatundisf>
 402:	dc 01       	movw	r26, r24
 404:	cb 01       	movw	r24, r22
 406:	2d eb       	ldi	r18, 0xBD	; 189
 408:	37 e3       	ldi	r19, 0x37	; 55
 40a:	46 e0       	ldi	r20, 0x06	; 6
 40c:	55 e3       	ldi	r21, 0x35	; 53
 40e:	bc 01       	movw	r22, r24
 410:	cd 01       	movw	r24, r26
 412:	0e 94 85 02 	call	0x50a	; 0x50a <__mulsf3>
 416:	dc 01       	movw	r26, r24
 418:	cb 01       	movw	r24, r22
 41a:	89 87       	std	Y+9, r24	; 0x09
 41c:	9a 87       	std	Y+10, r25	; 0x0a
 41e:	ab 87       	std	Y+11, r26	; 0x0b
 420:	bc 87       	std	Y+12, r27	; 0x0c
		
		if (timerticks >= 2000)		// sinnloses Demo für die Zeit in Timerticks
 422:	a9 80       	ldd	r10, Y+1	; 0x01
 424:	ba 80       	ldd	r11, Y+2	; 0x02
 426:	cb 80       	ldd	r12, Y+3	; 0x03
 428:	dc 80       	ldd	r13, Y+4	; 0x04
 42a:	ed 80       	ldd	r14, Y+5	; 0x05
 42c:	fe 80       	ldd	r15, Y+6	; 0x06
 42e:	0f 81       	ldd	r16, Y+7	; 0x07
 430:	18 85       	ldd	r17, Y+8	; 0x08
 432:	2a 2d       	mov	r18, r10
 434:	3b 2d       	mov	r19, r11
 436:	4c 2d       	mov	r20, r12
 438:	5d 2d       	mov	r21, r13
 43a:	6e 2d       	mov	r22, r14
 43c:	7f 2d       	mov	r23, r15
 43e:	80 2f       	mov	r24, r16
 440:	91 2f       	mov	r25, r17
 442:	2f 3c       	cpi	r18, 0xCF	; 207
 444:	37 40       	sbci	r19, 0x07	; 7
 446:	41 05       	cpc	r20, r1
 448:	51 05       	cpc	r21, r1
 44a:	61 05       	cpc	r22, r1
 44c:	71 05       	cpc	r23, r1
 44e:	81 05       	cpc	r24, r1
 450:	91 05       	cpc	r25, r1
 452:	31 f0       	breq	.+12     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 454:	28 f0       	brcs	.+10     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		{							// Vorteil: weniger Prozessorlast wg. Integer 
			DDRB = 1;
 456:	84 e2       	ldi	r24, 0x24	; 36
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	fc 01       	movw	r30, r24
 45e:	20 83       	st	Z, r18
		}

		if (t>=0.02)				// sinnloses Demo für die Zeit in Sekunden
 460:	2a e0       	ldi	r18, 0x0A	; 10
 462:	37 ed       	ldi	r19, 0xD7	; 215
 464:	43 ea       	ldi	r20, 0xA3	; 163
 466:	5c e3       	ldi	r21, 0x3C	; 60
 468:	69 85       	ldd	r22, Y+9	; 0x09
 46a:	7a 85       	ldd	r23, Y+10	; 0x0a
 46c:	8b 85       	ldd	r24, Y+11	; 0x0b
 46e:	9c 85       	ldd	r25, Y+12	; 0x0c
 470:	0e 94 80 02 	call	0x500	; 0x500 <__gesf2>
 474:	88 23       	and	r24, r24
 476:	2c f0       	brlt	.+10     	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
		{							// Vorteil: leicht lesbares Programm.
			DDRB = 2;
 478:	84 e2       	ldi	r24, 0x24	; 36
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	22 e0       	ldi	r18, 0x02	; 2
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
		}

	}
 482:	99 cf       	rjmp	.-206    	; 0x3b6 <main+0x40>

00000484 <__floatundisf>:
 484:	e8 94       	clt

00000486 <__fp_di2sf>:
 486:	f9 2f       	mov	r31, r25
 488:	96 eb       	ldi	r25, 0xB6	; 182
 48a:	ff 23       	and	r31, r31
 48c:	81 f0       	breq	.+32     	; 0x4ae <__fp_di2sf+0x28>
 48e:	12 16       	cp	r1, r18
 490:	13 06       	cpc	r1, r19
 492:	14 06       	cpc	r1, r20
 494:	44 0b       	sbc	r20, r20
 496:	93 95       	inc	r25
 498:	f6 95       	lsr	r31
 49a:	87 95       	ror	r24
 49c:	77 95       	ror	r23
 49e:	67 95       	ror	r22
 4a0:	57 95       	ror	r21
 4a2:	40 40       	sbci	r20, 0x00	; 0
 4a4:	ff 23       	and	r31, r31
 4a6:	b9 f7       	brne	.-18     	; 0x496 <__fp_di2sf+0x10>
 4a8:	1b c0       	rjmp	.+54     	; 0x4e0 <__fp_di2sf+0x5a>
 4aa:	99 27       	eor	r25, r25
 4ac:	08 95       	ret
 4ae:	88 23       	and	r24, r24
 4b0:	51 f4       	brne	.+20     	; 0x4c6 <__fp_di2sf+0x40>
 4b2:	98 50       	subi	r25, 0x08	; 8
 4b4:	d2 f7       	brpl	.-12     	; 0x4aa <__fp_di2sf+0x24>
 4b6:	87 2b       	or	r24, r23
 4b8:	76 2f       	mov	r23, r22
 4ba:	65 2f       	mov	r22, r21
 4bc:	54 2f       	mov	r21, r20
 4be:	43 2f       	mov	r20, r19
 4c0:	32 2f       	mov	r19, r18
 4c2:	20 e0       	ldi	r18, 0x00	; 0
 4c4:	b1 f3       	breq	.-20     	; 0x4b2 <__fp_di2sf+0x2c>
 4c6:	12 16       	cp	r1, r18
 4c8:	13 06       	cpc	r1, r19
 4ca:	14 06       	cpc	r1, r20
 4cc:	44 0b       	sbc	r20, r20
 4ce:	88 23       	and	r24, r24
 4d0:	3a f0       	brmi	.+14     	; 0x4e0 <__fp_di2sf+0x5a>
 4d2:	9a 95       	dec	r25
 4d4:	44 0f       	add	r20, r20
 4d6:	55 1f       	adc	r21, r21
 4d8:	66 1f       	adc	r22, r22
 4da:	77 1f       	adc	r23, r23
 4dc:	88 1f       	adc	r24, r24
 4de:	ca f7       	brpl	.-14     	; 0x4d2 <__fp_di2sf+0x4c>
 4e0:	55 23       	and	r21, r21
 4e2:	4a f4       	brpl	.+18     	; 0x4f6 <__fp_di2sf+0x70>
 4e4:	44 0f       	add	r20, r20
 4e6:	55 1f       	adc	r21, r21
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__fp_di2sf+0x68>
 4ea:	60 ff       	sbrs	r22, 0
 4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__fp_di2sf+0x70>
 4ee:	6f 5f       	subi	r22, 0xFF	; 255
 4f0:	7f 4f       	sbci	r23, 0xFF	; 255
 4f2:	8f 4f       	sbci	r24, 0xFF	; 255
 4f4:	9f 4f       	sbci	r25, 0xFF	; 255
 4f6:	88 0f       	add	r24, r24
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	97 f9       	bld	r25, 7
 4fe:	08 95       	ret

00000500 <__gesf2>:
 500:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__fp_cmp>
 504:	08 f4       	brcc	.+2      	; 0x508 <__gesf2+0x8>
 506:	8f ef       	ldi	r24, 0xFF	; 255
 508:	08 95       	ret

0000050a <__mulsf3>:
 50a:	0e 94 98 02 	call	0x530	; 0x530 <__mulsf3x>
 50e:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__fp_round>
 512:	0e 94 1f 03 	call	0x63e	; 0x63e <__fp_pscA>
 516:	38 f0       	brcs	.+14     	; 0x526 <__mulsf3+0x1c>
 518:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_pscB>
 51c:	20 f0       	brcs	.+8      	; 0x526 <__mulsf3+0x1c>
 51e:	95 23       	and	r25, r21
 520:	11 f0       	breq	.+4      	; 0x526 <__mulsf3+0x1c>
 522:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_inf>
 526:	0c 94 1c 03 	jmp	0x638	; 0x638 <__fp_nan>
 52a:	11 24       	eor	r1, r1
 52c:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_szero>

00000530 <__mulsf3x>:
 530:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_split3>
 534:	70 f3       	brcs	.-36     	; 0x512 <__mulsf3+0x8>

00000536 <__mulsf3_pse>:
 536:	95 9f       	mul	r25, r21
 538:	c1 f3       	breq	.-16     	; 0x52a <__mulsf3+0x20>
 53a:	95 0f       	add	r25, r21
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	55 1f       	adc	r21, r21
 540:	62 9f       	mul	r22, r18
 542:	f0 01       	movw	r30, r0
 544:	72 9f       	mul	r23, r18
 546:	bb 27       	eor	r27, r27
 548:	f0 0d       	add	r31, r0
 54a:	b1 1d       	adc	r27, r1
 54c:	63 9f       	mul	r22, r19
 54e:	aa 27       	eor	r26, r26
 550:	f0 0d       	add	r31, r0
 552:	b1 1d       	adc	r27, r1
 554:	aa 1f       	adc	r26, r26
 556:	64 9f       	mul	r22, r20
 558:	66 27       	eor	r22, r22
 55a:	b0 0d       	add	r27, r0
 55c:	a1 1d       	adc	r26, r1
 55e:	66 1f       	adc	r22, r22
 560:	82 9f       	mul	r24, r18
 562:	22 27       	eor	r18, r18
 564:	b0 0d       	add	r27, r0
 566:	a1 1d       	adc	r26, r1
 568:	62 1f       	adc	r22, r18
 56a:	73 9f       	mul	r23, r19
 56c:	b0 0d       	add	r27, r0
 56e:	a1 1d       	adc	r26, r1
 570:	62 1f       	adc	r22, r18
 572:	83 9f       	mul	r24, r19
 574:	a0 0d       	add	r26, r0
 576:	61 1d       	adc	r22, r1
 578:	22 1f       	adc	r18, r18
 57a:	74 9f       	mul	r23, r20
 57c:	33 27       	eor	r19, r19
 57e:	a0 0d       	add	r26, r0
 580:	61 1d       	adc	r22, r1
 582:	23 1f       	adc	r18, r19
 584:	84 9f       	mul	r24, r20
 586:	60 0d       	add	r22, r0
 588:	21 1d       	adc	r18, r1
 58a:	82 2f       	mov	r24, r18
 58c:	76 2f       	mov	r23, r22
 58e:	6a 2f       	mov	r22, r26
 590:	11 24       	eor	r1, r1
 592:	9f 57       	subi	r25, 0x7F	; 127
 594:	50 40       	sbci	r21, 0x00	; 0
 596:	9a f0       	brmi	.+38     	; 0x5be <__mulsf3_pse+0x88>
 598:	f1 f0       	breq	.+60     	; 0x5d6 <__mulsf3_pse+0xa0>
 59a:	88 23       	and	r24, r24
 59c:	4a f0       	brmi	.+18     	; 0x5b0 <__mulsf3_pse+0x7a>
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	bb 1f       	adc	r27, r27
 5a4:	66 1f       	adc	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	91 50       	subi	r25, 0x01	; 1
 5ac:	50 40       	sbci	r21, 0x00	; 0
 5ae:	a9 f7       	brne	.-22     	; 0x59a <__mulsf3_pse+0x64>
 5b0:	9e 3f       	cpi	r25, 0xFE	; 254
 5b2:	51 05       	cpc	r21, r1
 5b4:	80 f0       	brcs	.+32     	; 0x5d6 <__mulsf3_pse+0xa0>
 5b6:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_inf>
 5ba:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__fp_szero>
 5be:	5f 3f       	cpi	r21, 0xFF	; 255
 5c0:	e4 f3       	brlt	.-8      	; 0x5ba <__mulsf3_pse+0x84>
 5c2:	98 3e       	cpi	r25, 0xE8	; 232
 5c4:	d4 f3       	brlt	.-12     	; 0x5ba <__mulsf3_pse+0x84>
 5c6:	86 95       	lsr	r24
 5c8:	77 95       	ror	r23
 5ca:	67 95       	ror	r22
 5cc:	b7 95       	ror	r27
 5ce:	f7 95       	ror	r31
 5d0:	e7 95       	ror	r30
 5d2:	9f 5f       	subi	r25, 0xFF	; 255
 5d4:	c1 f7       	brne	.-16     	; 0x5c6 <__mulsf3_pse+0x90>
 5d6:	fe 2b       	or	r31, r30
 5d8:	88 0f       	add	r24, r24
 5da:	91 1d       	adc	r25, r1
 5dc:	96 95       	lsr	r25
 5de:	87 95       	ror	r24
 5e0:	97 f9       	bld	r25, 7
 5e2:	08 95       	ret

000005e4 <__fp_cmp>:
 5e4:	99 0f       	add	r25, r25
 5e6:	00 08       	sbc	r0, r0
 5e8:	55 0f       	add	r21, r21
 5ea:	aa 0b       	sbc	r26, r26
 5ec:	e0 e8       	ldi	r30, 0x80	; 128
 5ee:	fe ef       	ldi	r31, 0xFE	; 254
 5f0:	16 16       	cp	r1, r22
 5f2:	17 06       	cpc	r1, r23
 5f4:	e8 07       	cpc	r30, r24
 5f6:	f9 07       	cpc	r31, r25
 5f8:	c0 f0       	brcs	.+48     	; 0x62a <__fp_cmp+0x46>
 5fa:	12 16       	cp	r1, r18
 5fc:	13 06       	cpc	r1, r19
 5fe:	e4 07       	cpc	r30, r20
 600:	f5 07       	cpc	r31, r21
 602:	98 f0       	brcs	.+38     	; 0x62a <__fp_cmp+0x46>
 604:	62 1b       	sub	r22, r18
 606:	73 0b       	sbc	r23, r19
 608:	84 0b       	sbc	r24, r20
 60a:	95 0b       	sbc	r25, r21
 60c:	39 f4       	brne	.+14     	; 0x61c <__fp_cmp+0x38>
 60e:	0a 26       	eor	r0, r26
 610:	61 f0       	breq	.+24     	; 0x62a <__fp_cmp+0x46>
 612:	23 2b       	or	r18, r19
 614:	24 2b       	or	r18, r20
 616:	25 2b       	or	r18, r21
 618:	21 f4       	brne	.+8      	; 0x622 <__fp_cmp+0x3e>
 61a:	08 95       	ret
 61c:	0a 26       	eor	r0, r26
 61e:	09 f4       	brne	.+2      	; 0x622 <__fp_cmp+0x3e>
 620:	a1 40       	sbci	r26, 0x01	; 1
 622:	a6 95       	lsr	r26
 624:	8f ef       	ldi	r24, 0xFF	; 255
 626:	81 1d       	adc	r24, r1
 628:	81 1d       	adc	r24, r1
 62a:	08 95       	ret

0000062c <__fp_inf>:
 62c:	97 f9       	bld	r25, 7
 62e:	9f 67       	ori	r25, 0x7F	; 127
 630:	80 e8       	ldi	r24, 0x80	; 128
 632:	70 e0       	ldi	r23, 0x00	; 0
 634:	60 e0       	ldi	r22, 0x00	; 0
 636:	08 95       	ret

00000638 <__fp_nan>:
 638:	9f ef       	ldi	r25, 0xFF	; 255
 63a:	80 ec       	ldi	r24, 0xC0	; 192
 63c:	08 95       	ret

0000063e <__fp_pscA>:
 63e:	00 24       	eor	r0, r0
 640:	0a 94       	dec	r0
 642:	16 16       	cp	r1, r22
 644:	17 06       	cpc	r1, r23
 646:	18 06       	cpc	r1, r24
 648:	09 06       	cpc	r0, r25
 64a:	08 95       	ret

0000064c <__fp_pscB>:
 64c:	00 24       	eor	r0, r0
 64e:	0a 94       	dec	r0
 650:	12 16       	cp	r1, r18
 652:	13 06       	cpc	r1, r19
 654:	14 06       	cpc	r1, r20
 656:	05 06       	cpc	r0, r21
 658:	08 95       	ret

0000065a <__fp_round>:
 65a:	09 2e       	mov	r0, r25
 65c:	03 94       	inc	r0
 65e:	00 0c       	add	r0, r0
 660:	11 f4       	brne	.+4      	; 0x666 <__fp_round+0xc>
 662:	88 23       	and	r24, r24
 664:	52 f0       	brmi	.+20     	; 0x67a <__fp_round+0x20>
 666:	bb 0f       	add	r27, r27
 668:	40 f4       	brcc	.+16     	; 0x67a <__fp_round+0x20>
 66a:	bf 2b       	or	r27, r31
 66c:	11 f4       	brne	.+4      	; 0x672 <__fp_round+0x18>
 66e:	60 ff       	sbrs	r22, 0
 670:	04 c0       	rjmp	.+8      	; 0x67a <__fp_round+0x20>
 672:	6f 5f       	subi	r22, 0xFF	; 255
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	8f 4f       	sbci	r24, 0xFF	; 255
 678:	9f 4f       	sbci	r25, 0xFF	; 255
 67a:	08 95       	ret

0000067c <__fp_split3>:
 67c:	57 fd       	sbrc	r21, 7
 67e:	90 58       	subi	r25, 0x80	; 128
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	59 f0       	breq	.+22     	; 0x69c <__fp_splitA+0x10>
 686:	5f 3f       	cpi	r21, 0xFF	; 255
 688:	71 f0       	breq	.+28     	; 0x6a6 <__fp_splitA+0x1a>
 68a:	47 95       	ror	r20

0000068c <__fp_splitA>:
 68c:	88 0f       	add	r24, r24
 68e:	97 fb       	bst	r25, 7
 690:	99 1f       	adc	r25, r25
 692:	61 f0       	breq	.+24     	; 0x6ac <__fp_splitA+0x20>
 694:	9f 3f       	cpi	r25, 0xFF	; 255
 696:	79 f0       	breq	.+30     	; 0x6b6 <__fp_splitA+0x2a>
 698:	87 95       	ror	r24
 69a:	08 95       	ret
 69c:	12 16       	cp	r1, r18
 69e:	13 06       	cpc	r1, r19
 6a0:	14 06       	cpc	r1, r20
 6a2:	55 1f       	adc	r21, r21
 6a4:	f2 cf       	rjmp	.-28     	; 0x68a <__fp_split3+0xe>
 6a6:	46 95       	lsr	r20
 6a8:	f1 df       	rcall	.-30     	; 0x68c <__fp_splitA>
 6aa:	08 c0       	rjmp	.+16     	; 0x6bc <__fp_splitA+0x30>
 6ac:	16 16       	cp	r1, r22
 6ae:	17 06       	cpc	r1, r23
 6b0:	18 06       	cpc	r1, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	f1 cf       	rjmp	.-30     	; 0x698 <__fp_splitA+0xc>
 6b6:	86 95       	lsr	r24
 6b8:	71 05       	cpc	r23, r1
 6ba:	61 05       	cpc	r22, r1
 6bc:	08 94       	sec
 6be:	08 95       	ret

000006c0 <__fp_zero>:
 6c0:	e8 94       	clt

000006c2 <__fp_szero>:
 6c2:	bb 27       	eor	r27, r27
 6c4:	66 27       	eor	r22, r22
 6c6:	77 27       	eor	r23, r23
 6c8:	cb 01       	movw	r24, r22
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret

000006ce <__adddi3>:
 6ce:	2a 0d       	add	r18, r10
 6d0:	3b 1d       	adc	r19, r11
 6d2:	4c 1d       	adc	r20, r12
 6d4:	5d 1d       	adc	r21, r13
 6d6:	6e 1d       	adc	r22, r14
 6d8:	7f 1d       	adc	r23, r15
 6da:	80 1f       	adc	r24, r16
 6dc:	91 1f       	adc	r25, r17
 6de:	08 95       	ret

000006e0 <__cmpdi2_s8>:
 6e0:	00 24       	eor	r0, r0
 6e2:	a7 fd       	sbrc	r26, 7
 6e4:	00 94       	com	r0
 6e6:	2a 17       	cp	r18, r26
 6e8:	30 05       	cpc	r19, r0
 6ea:	40 05       	cpc	r20, r0
 6ec:	50 05       	cpc	r21, r0
 6ee:	60 05       	cpc	r22, r0
 6f0:	70 05       	cpc	r23, r0
 6f2:	80 05       	cpc	r24, r0
 6f4:	90 05       	cpc	r25, r0
 6f6:	08 95       	ret

000006f8 <_exit>:
 6f8:	f8 94       	cli

000006fa <__stop_program>:
 6fa:	ff cf       	rjmp	.-2      	; 0x6fa <__stop_program>
