
LCD_Demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00001efe  00001f72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001efe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00001f8a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001fe8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f9e  00000000  00000000  00002088  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000744  00000000  00000000  00003026  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007ff  00000000  00000000  0000376a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00003f6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000029e  00000000  00000000  000044c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00004765  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ee ef       	ldi	r30, 0xFE	; 254
      7c:	fe e1       	ldi	r31, 0x1E	; 30
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a8 31       	cpi	r26, 0x18	; 24
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 46 0a 	call	0x148c	; 0x148c <main>
      8e:	0c 94 7d 0f 	jmp	0x1efa	; 0x1efa <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <RS>:

//------------   Low-Level-Routinen ---------------------------------

// RS-Signal kontrollieren:
void RS(uint8_t x)
{	if( x ) PORT_RS |= (1<<RS_);	// Daten-Register wählen
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
      a2:	89 81       	ldd	r24, Y+1	; 0x01
      a4:	88 23       	and	r24, r24
      a6:	51 f0       	breq	.+20     	; 0xbc <RS+0x26>
      a8:	85 e2       	ldi	r24, 0x25	; 37
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	25 e2       	ldi	r18, 0x25	; 37
      ae:	30 e0       	ldi	r19, 0x00	; 0
      b0:	f9 01       	movw	r30, r18
      b2:	20 81       	ld	r18, Z
      b4:	20 61       	ori	r18, 0x10	; 16
      b6:	fc 01       	movw	r30, r24
      b8:	20 83       	st	Z, r18
	else	PORT_RS &= ~(1<<RS_);	// Befehls-Register wählen
}
      ba:	09 c0       	rjmp	.+18     	; 0xce <RS+0x38>
//------------   Low-Level-Routinen ---------------------------------

// RS-Signal kontrollieren:
void RS(uint8_t x)
{	if( x ) PORT_RS |= (1<<RS_);	// Daten-Register wählen
	else	PORT_RS &= ~(1<<RS_);	// Befehls-Register wählen
      bc:	85 e2       	ldi	r24, 0x25	; 37
      be:	90 e0       	ldi	r25, 0x00	; 0
      c0:	25 e2       	ldi	r18, 0x25	; 37
      c2:	30 e0       	ldi	r19, 0x00	; 0
      c4:	f9 01       	movw	r30, r18
      c6:	20 81       	ld	r18, Z
      c8:	2f 7e       	andi	r18, 0xEF	; 239
      ca:	fc 01       	movw	r30, r24
      cc:	20 83       	st	Z, r18
}
      ce:	00 00       	nop
      d0:	0f 90       	pop	r0
      d2:	df 91       	pop	r29
      d4:	cf 91       	pop	r28
      d6:	08 95       	ret

000000d8 <E_Pulse>:

// Enable-Puls erzeugen:
void E_Pulse(void)
{	PORT_E |= (1<<E_);
      d8:	cf 93       	push	r28
      da:	df 93       	push	r29
      dc:	cd b7       	in	r28, 0x3d	; 61
      de:	de b7       	in	r29, 0x3e	; 62
      e0:	a0 97       	sbiw	r28, 0x20	; 32
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	f8 94       	cli
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	cd bf       	out	0x3d, r28	; 61
      ec:	85 e2       	ldi	r24, 0x25	; 37
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	25 e2       	ldi	r18, 0x25	; 37
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	28 60       	ori	r18, 0x08	; 8
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	90 e0       	ldi	r25, 0x00	; 0
     102:	a0 e8       	ldi	r26, 0x80	; 128
     104:	bf e3       	ldi	r27, 0x3F	; 63
     106:	89 83       	std	Y+1, r24	; 0x01
     108:	9a 83       	std	Y+2, r25	; 0x02
     10a:	ab 83       	std	Y+3, r26	; 0x03
     10c:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     10e:	2b ea       	ldi	r18, 0xAB	; 171
     110:	3a ea       	ldi	r19, 0xAA	; 170
     112:	4a ea       	ldi	r20, 0xAA	; 170
     114:	50 e4       	ldi	r21, 0x40	; 64
     116:	69 81       	ldd	r22, Y+1	; 0x01
     118:	7a 81       	ldd	r23, Y+2	; 0x02
     11a:	8b 81       	ldd	r24, Y+3	; 0x03
     11c:	9c 81       	ldd	r25, Y+4	; 0x04
     11e:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     122:	dc 01       	movw	r26, r24
     124:	cb 01       	movw	r24, r22
     126:	8d 83       	std	Y+5, r24	; 0x05
     128:	9e 83       	std	Y+6, r25	; 0x06
     12a:	af 83       	std	Y+7, r26	; 0x07
     12c:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	40 e8       	ldi	r20, 0x80	; 128
     134:	50 e4       	ldi	r21, 0x40	; 64
     136:	69 81       	ldd	r22, Y+1	; 0x01
     138:	7a 81       	ldd	r23, Y+2	; 0x02
     13a:	8b 81       	ldd	r24, Y+3	; 0x03
     13c:	9c 81       	ldd	r25, Y+4	; 0x04
     13e:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     142:	dc 01       	movw	r26, r24
     144:	cb 01       	movw	r24, r22
     146:	89 87       	std	Y+9, r24	; 0x09
     148:	9a 87       	std	Y+10, r25	; 0x0a
     14a:	ab 87       	std	Y+11, r26	; 0x0b
     14c:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     14e:	20 e0       	ldi	r18, 0x00	; 0
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	40 e8       	ldi	r20, 0x80	; 128
     154:	5f e3       	ldi	r21, 0x3F	; 63
     156:	6d 81       	ldd	r22, Y+5	; 0x05
     158:	7e 81       	ldd	r23, Y+6	; 0x06
     15a:	8f 81       	ldd	r24, Y+7	; 0x07
     15c:	98 85       	ldd	r25, Y+8	; 0x08
     15e:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     162:	88 23       	and	r24, r24
     164:	1c f4       	brge	.+6      	; 0x16c <E_Pulse+0x94>
		__ticks = 1;
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	8d 87       	std	Y+13, r24	; 0x0d
     16a:	b2 c0       	rjmp	.+356    	; 0x2d0 <E_Pulse+0x1f8>
	else if (__tmp2 > 65535)
     16c:	20 e0       	ldi	r18, 0x00	; 0
     16e:	3f ef       	ldi	r19, 0xFF	; 255
     170:	4f e7       	ldi	r20, 0x7F	; 127
     172:	57 e4       	ldi	r21, 0x47	; 71
     174:	69 85       	ldd	r22, Y+9	; 0x09
     176:	7a 85       	ldd	r23, Y+10	; 0x0a
     178:	8b 85       	ldd	r24, Y+11	; 0x0b
     17a:	9c 85       	ldd	r25, Y+12	; 0x0c
     17c:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     180:	18 16       	cp	r1, r24
     182:	0c f0       	brlt	.+2      	; 0x186 <E_Pulse+0xae>
     184:	7b c0       	rjmp	.+246    	; 0x27c <E_Pulse+0x1a4>
	{
		_delay_ms(__us / 1000.0);
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	4a e7       	ldi	r20, 0x7A	; 122
     18c:	54 e4       	ldi	r21, 0x44	; 68
     18e:	69 81       	ldd	r22, Y+1	; 0x01
     190:	7a 81       	ldd	r23, Y+2	; 0x02
     192:	8b 81       	ldd	r24, Y+3	; 0x03
     194:	9c 81       	ldd	r25, Y+4	; 0x04
     196:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
     19a:	dc 01       	movw	r26, r24
     19c:	cb 01       	movw	r24, r22
     19e:	8e 87       	std	Y+14, r24	; 0x0e
     1a0:	9f 87       	std	Y+15, r25	; 0x0f
     1a2:	a8 8b       	std	Y+16, r26	; 0x10
     1a4:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     1a6:	20 e0       	ldi	r18, 0x00	; 0
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	4a e7       	ldi	r20, 0x7A	; 122
     1ac:	55 e4       	ldi	r21, 0x45	; 69
     1ae:	6e 85       	ldd	r22, Y+14	; 0x0e
     1b0:	7f 85       	ldd	r23, Y+15	; 0x0f
     1b2:	88 89       	ldd	r24, Y+16	; 0x10
     1b4:	99 89       	ldd	r25, Y+17	; 0x11
     1b6:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     1ba:	dc 01       	movw	r26, r24
     1bc:	cb 01       	movw	r24, r22
     1be:	8a 8b       	std	Y+18, r24	; 0x12
     1c0:	9b 8b       	std	Y+19, r25	; 0x13
     1c2:	ac 8b       	std	Y+20, r26	; 0x14
     1c4:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e8       	ldi	r20, 0x80	; 128
     1cc:	5f e3       	ldi	r21, 0x3F	; 63
     1ce:	6a 89       	ldd	r22, Y+18	; 0x12
     1d0:	7b 89       	ldd	r23, Y+19	; 0x13
     1d2:	8c 89       	ldd	r24, Y+20	; 0x14
     1d4:	9d 89       	ldd	r25, Y+21	; 0x15
     1d6:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     1da:	88 23       	and	r24, r24
     1dc:	2c f4       	brge	.+10     	; 0x1e8 <E_Pulse+0x110>
		__ticks = 1;
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	9f 8b       	std	Y+23, r25	; 0x17
     1e4:	8e 8b       	std	Y+22, r24	; 0x16
     1e6:	3f c0       	rjmp	.+126    	; 0x266 <E_Pulse+0x18e>
	else if (__tmp > 65535)
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	3f ef       	ldi	r19, 0xFF	; 255
     1ec:	4f e7       	ldi	r20, 0x7F	; 127
     1ee:	57 e4       	ldi	r21, 0x47	; 71
     1f0:	6a 89       	ldd	r22, Y+18	; 0x12
     1f2:	7b 89       	ldd	r23, Y+19	; 0x13
     1f4:	8c 89       	ldd	r24, Y+20	; 0x14
     1f6:	9d 89       	ldd	r25, Y+21	; 0x15
     1f8:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     1fc:	18 16       	cp	r1, r24
     1fe:	4c f5       	brge	.+82     	; 0x252 <E_Pulse+0x17a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     200:	20 e0       	ldi	r18, 0x00	; 0
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	40 e2       	ldi	r20, 0x20	; 32
     206:	51 e4       	ldi	r21, 0x41	; 65
     208:	6e 85       	ldd	r22, Y+14	; 0x0e
     20a:	7f 85       	ldd	r23, Y+15	; 0x0f
     20c:	88 89       	ldd	r24, Y+16	; 0x10
     20e:	99 89       	ldd	r25, Y+17	; 0x11
     210:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     214:	dc 01       	movw	r26, r24
     216:	cb 01       	movw	r24, r22
     218:	bc 01       	movw	r22, r24
     21a:	cd 01       	movw	r24, r26
     21c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     220:	dc 01       	movw	r26, r24
     222:	cb 01       	movw	r24, r22
     224:	9f 8b       	std	Y+23, r25	; 0x17
     226:	8e 8b       	std	Y+22, r24	; 0x16
     228:	0f c0       	rjmp	.+30     	; 0x248 <E_Pulse+0x170>
     22a:	80 e9       	ldi	r24, 0x90	; 144
     22c:	91 e0       	ldi	r25, 0x01	; 1
     22e:	99 8f       	std	Y+25, r25	; 0x19
     230:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     232:	88 8d       	ldd	r24, Y+24	; 0x18
     234:	99 8d       	ldd	r25, Y+25	; 0x19
     236:	01 97       	sbiw	r24, 0x01	; 1
     238:	f1 f7       	brne	.-4      	; 0x236 <E_Pulse+0x15e>
     23a:	99 8f       	std	Y+25, r25	; 0x19
     23c:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     23e:	8e 89       	ldd	r24, Y+22	; 0x16
     240:	9f 89       	ldd	r25, Y+23	; 0x17
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	9f 8b       	std	Y+23, r25	; 0x17
     246:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     248:	8e 89       	ldd	r24, Y+22	; 0x16
     24a:	9f 89       	ldd	r25, Y+23	; 0x17
     24c:	89 2b       	or	r24, r25
     24e:	69 f7       	brne	.-38     	; 0x22a <E_Pulse+0x152>
     250:	3f c0       	rjmp	.+126    	; 0x2d0 <E_Pulse+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     252:	6a 89       	ldd	r22, Y+18	; 0x12
     254:	7b 89       	ldd	r23, Y+19	; 0x13
     256:	8c 89       	ldd	r24, Y+20	; 0x14
     258:	9d 89       	ldd	r25, Y+21	; 0x15
     25a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     25e:	dc 01       	movw	r26, r24
     260:	cb 01       	movw	r24, r22
     262:	9f 8b       	std	Y+23, r25	; 0x17
     264:	8e 8b       	std	Y+22, r24	; 0x16
     266:	8e 89       	ldd	r24, Y+22	; 0x16
     268:	9f 89       	ldd	r25, Y+23	; 0x17
     26a:	9b 8f       	std	Y+27, r25	; 0x1b
     26c:	8a 8f       	std	Y+26, r24	; 0x1a
     26e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     270:	9b 8d       	ldd	r25, Y+27	; 0x1b
     272:	01 97       	sbiw	r24, 0x01	; 1
     274:	f1 f7       	brne	.-4      	; 0x272 <E_Pulse+0x19a>
     276:	9b 8f       	std	Y+27, r25	; 0x1b
     278:	8a 8f       	std	Y+26, r24	; 0x1a
     27a:	2a c0       	rjmp	.+84     	; 0x2d0 <E_Pulse+0x1f8>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     27c:	20 e0       	ldi	r18, 0x00	; 0
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	4f e7       	ldi	r20, 0x7F	; 127
     282:	53 e4       	ldi	r21, 0x43	; 67
     284:	6d 81       	ldd	r22, Y+5	; 0x05
     286:	7e 81       	ldd	r23, Y+6	; 0x06
     288:	8f 81       	ldd	r24, Y+7	; 0x07
     28a:	98 85       	ldd	r25, Y+8	; 0x08
     28c:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     290:	18 16       	cp	r1, r24
     292:	ac f4       	brge	.+42     	; 0x2be <E_Pulse+0x1e6>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     294:	69 85       	ldd	r22, Y+9	; 0x09
     296:	7a 85       	ldd	r23, Y+10	; 0x0a
     298:	8b 85       	ldd	r24, Y+11	; 0x0b
     29a:	9c 85       	ldd	r25, Y+12	; 0x0c
     29c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	9d 8f       	std	Y+29, r25	; 0x1d
     2a6:	8c 8f       	std	Y+28, r24	; 0x1c
     2a8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     2aa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     2ac:	9f 8f       	std	Y+31, r25	; 0x1f
     2ae:	8e 8f       	std	Y+30, r24	; 0x1e
     2b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2b2:	9f 8d       	ldd	r25, Y+31	; 0x1f
     2b4:	01 97       	sbiw	r24, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <E_Pulse+0x1dc>
     2b8:	9f 8f       	std	Y+31, r25	; 0x1f
     2ba:	8e 8f       	std	Y+30, r24	; 0x1e
     2bc:	0f c0       	rjmp	.+30     	; 0x2dc <E_Pulse+0x204>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     2be:	6d 81       	ldd	r22, Y+5	; 0x05
     2c0:	7e 81       	ldd	r23, Y+6	; 0x06
     2c2:	8f 81       	ldd	r24, Y+7	; 0x07
     2c4:	98 85       	ldd	r25, Y+8	; 0x08
     2c6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     2ca:	dc 01       	movw	r26, r24
     2cc:	cb 01       	movw	r24, r22
     2ce:	8d 87       	std	Y+13, r24	; 0x0d
     2d0:	8d 85       	ldd	r24, Y+13	; 0x0d
     2d2:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2d4:	88 a1       	ldd	r24, Y+32	; 0x20
     2d6:	8a 95       	dec	r24
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <E_Pulse+0x1fe>
     2da:	88 a3       	std	Y+32, r24	; 0x20
	_delay_us( 1 );			// 1us
	PORT_E &= ~(1<<E_);		// Übernahme mit fallender Flanke
     2dc:	85 e2       	ldi	r24, 0x25	; 37
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e2       	ldi	r18, 0x25	; 37
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	27 7f       	andi	r18, 0xF7	; 247
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
}
     2ee:	00 00       	nop
     2f0:	a0 96       	adiw	r28, 0x20	; 32
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	de bf       	out	0x3e, r29	; 62
     2f8:	0f be       	out	0x3f, r0	; 63
     2fa:	cd bf       	out	0x3d, r28	; 61
     2fc:	df 91       	pop	r29
     2fe:	cf 91       	pop	r28
     300:	08 95       	ret

00000302 <lcd_nibble>:

// Halb-Byte übertragen
static void lcd_nibble( uint8_t d )
{	// Das obere Nibble von d wird auf den 4-Bit-Bus abgebildet:
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	1f 92       	push	r1
     308:	cd b7       	in	r28, 0x3d	; 61
     30a:	de b7       	in	r29, 0x3e	; 62
     30c:	89 83       	std	Y+1, r24	; 0x01
	if(d & (1<<4)) PORT_DAT |= (1<<D4_); else PORT_DAT &= ~(1<<D4_);
     30e:	89 81       	ldd	r24, Y+1	; 0x01
     310:	88 2f       	mov	r24, r24
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	80 71       	andi	r24, 0x10	; 16
     316:	99 27       	eor	r25, r25
     318:	89 2b       	or	r24, r25
     31a:	51 f0       	breq	.+20     	; 0x330 <lcd_nibble+0x2e>
     31c:	8b e2       	ldi	r24, 0x2B	; 43
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	2b e2       	ldi	r18, 0x2B	; 43
     322:	30 e0       	ldi	r19, 0x00	; 0
     324:	f9 01       	movw	r30, r18
     326:	20 81       	ld	r18, Z
     328:	20 62       	ori	r18, 0x20	; 32
     32a:	fc 01       	movw	r30, r24
     32c:	20 83       	st	Z, r18
     32e:	09 c0       	rjmp	.+18     	; 0x342 <lcd_nibble+0x40>
     330:	8b e2       	ldi	r24, 0x2B	; 43
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	2b e2       	ldi	r18, 0x2B	; 43
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	f9 01       	movw	r30, r18
     33a:	20 81       	ld	r18, Z
     33c:	2f 7d       	andi	r18, 0xDF	; 223
     33e:	fc 01       	movw	r30, r24
     340:	20 83       	st	Z, r18
	if(d & (1<<5)) PORT_DAT |= (1<<D5_); else PORT_DAT &= ~(1<<D5_);
     342:	89 81       	ldd	r24, Y+1	; 0x01
     344:	88 2f       	mov	r24, r24
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	80 72       	andi	r24, 0x20	; 32
     34a:	99 27       	eor	r25, r25
     34c:	89 2b       	or	r24, r25
     34e:	51 f0       	breq	.+20     	; 0x364 <lcd_nibble+0x62>
     350:	8b e2       	ldi	r24, 0x2B	; 43
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	2b e2       	ldi	r18, 0x2B	; 43
     356:	30 e0       	ldi	r19, 0x00	; 0
     358:	f9 01       	movw	r30, r18
     35a:	20 81       	ld	r18, Z
     35c:	20 61       	ori	r18, 0x10	; 16
     35e:	fc 01       	movw	r30, r24
     360:	20 83       	st	Z, r18
     362:	09 c0       	rjmp	.+18     	; 0x376 <lcd_nibble+0x74>
     364:	8b e2       	ldi	r24, 0x2B	; 43
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	2b e2       	ldi	r18, 0x2B	; 43
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	f9 01       	movw	r30, r18
     36e:	20 81       	ld	r18, Z
     370:	2f 7e       	andi	r18, 0xEF	; 239
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
	if(d & (1<<6)) PORT_DAT |= (1<<D6_); else PORT_DAT &= ~(1<<D6_);
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	88 2f       	mov	r24, r24
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	80 74       	andi	r24, 0x40	; 64
     37e:	99 27       	eor	r25, r25
     380:	89 2b       	or	r24, r25
     382:	51 f0       	breq	.+20     	; 0x398 <lcd_nibble+0x96>
     384:	8b e2       	ldi	r24, 0x2B	; 43
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	2b e2       	ldi	r18, 0x2B	; 43
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	f9 01       	movw	r30, r18
     38e:	20 81       	ld	r18, Z
     390:	28 60       	ori	r18, 0x08	; 8
     392:	fc 01       	movw	r30, r24
     394:	20 83       	st	Z, r18
     396:	09 c0       	rjmp	.+18     	; 0x3aa <lcd_nibble+0xa8>
     398:	8b e2       	ldi	r24, 0x2B	; 43
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2b e2       	ldi	r18, 0x2B	; 43
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	f9 01       	movw	r30, r18
     3a2:	20 81       	ld	r18, Z
     3a4:	27 7f       	andi	r18, 0xF7	; 247
     3a6:	fc 01       	movw	r30, r24
     3a8:	20 83       	st	Z, r18
	if(d & (1<<7)) PORT_DAT |= (1<<D7_); else PORT_DAT &= ~(1<<D7_);
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	88 23       	and	r24, r24
     3ae:	54 f4       	brge	.+20     	; 0x3c4 <lcd_nibble+0xc2>
     3b0:	8b e2       	ldi	r24, 0x2B	; 43
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	2b e2       	ldi	r18, 0x2B	; 43
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	f9 01       	movw	r30, r18
     3ba:	20 81       	ld	r18, Z
     3bc:	24 60       	ori	r18, 0x04	; 4
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
     3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <lcd_nibble+0xd4>
     3c4:	8b e2       	ldi	r24, 0x2B	; 43
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	2b e2       	ldi	r18, 0x2B	; 43
     3ca:	30 e0       	ldi	r19, 0x00	; 0
     3cc:	f9 01       	movw	r30, r18
     3ce:	20 81       	ld	r18, Z
     3d0:	2b 7f       	andi	r18, 0xFB	; 251
     3d2:	fc 01       	movw	r30, r24
     3d4:	20 83       	st	Z, r18
	E_Pulse();
     3d6:	0e 94 6c 00 	call	0xd8	; 0xd8 <E_Pulse>
}
     3da:	00 00       	nop
     3dc:	0f 90       	pop	r0
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <lcd_byte>:

// Befehls- oder Daten-Byte übertragen
static void lcd_byte( uint8_t d )
{	lcd_nibble( d );		// High nibble
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	a1 97       	sbiw	r28, 0x21	; 33
     3ee:	0f b6       	in	r0, 0x3f	; 63
     3f0:	f8 94       	cli
     3f2:	de bf       	out	0x3e, r29	; 62
     3f4:	0f be       	out	0x3f, r0	; 63
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	89 a3       	std	Y+33, r24	; 0x21
     3fa:	89 a1       	ldd	r24, Y+33	; 0x21
     3fc:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
	lcd_nibble( d<<4 );		// Low nibble	
     400:	89 a1       	ldd	r24, Y+33	; 0x21
     402:	82 95       	swap	r24
     404:	80 7f       	andi	r24, 0xF0	; 240
     406:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a4 e3       	ldi	r26, 0x34	; 52
     410:	b2 e4       	ldi	r27, 0x42	; 66
     412:	89 83       	std	Y+1, r24	; 0x01
     414:	9a 83       	std	Y+2, r25	; 0x02
     416:	ab 83       	std	Y+3, r26	; 0x03
     418:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     41a:	2b ea       	ldi	r18, 0xAB	; 171
     41c:	3a ea       	ldi	r19, 0xAA	; 170
     41e:	4a ea       	ldi	r20, 0xAA	; 170
     420:	50 e4       	ldi	r21, 0x40	; 64
     422:	69 81       	ldd	r22, Y+1	; 0x01
     424:	7a 81       	ldd	r23, Y+2	; 0x02
     426:	8b 81       	ldd	r24, Y+3	; 0x03
     428:	9c 81       	ldd	r25, Y+4	; 0x04
     42a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	8d 83       	std	Y+5, r24	; 0x05
     434:	9e 83       	std	Y+6, r25	; 0x06
     436:	af 83       	std	Y+7, r26	; 0x07
     438:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     43a:	20 e0       	ldi	r18, 0x00	; 0
     43c:	30 e0       	ldi	r19, 0x00	; 0
     43e:	40 e8       	ldi	r20, 0x80	; 128
     440:	50 e4       	ldi	r21, 0x40	; 64
     442:	69 81       	ldd	r22, Y+1	; 0x01
     444:	7a 81       	ldd	r23, Y+2	; 0x02
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     44e:	dc 01       	movw	r26, r24
     450:	cb 01       	movw	r24, r22
     452:	89 87       	std	Y+9, r24	; 0x09
     454:	9a 87       	std	Y+10, r25	; 0x0a
     456:	ab 87       	std	Y+11, r26	; 0x0b
     458:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e8       	ldi	r20, 0x80	; 128
     460:	5f e3       	ldi	r21, 0x3F	; 63
     462:	6d 81       	ldd	r22, Y+5	; 0x05
     464:	7e 81       	ldd	r23, Y+6	; 0x06
     466:	8f 81       	ldd	r24, Y+7	; 0x07
     468:	98 85       	ldd	r25, Y+8	; 0x08
     46a:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     46e:	88 23       	and	r24, r24
     470:	1c f4       	brge	.+6      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
		__ticks = 1;
     472:	81 e0       	ldi	r24, 0x01	; 1
     474:	8d 87       	std	Y+13, r24	; 0x0d
     476:	b2 c0       	rjmp	.+356    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
	else if (__tmp2 > 65535)
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	3f ef       	ldi	r19, 0xFF	; 255
     47c:	4f e7       	ldi	r20, 0x7F	; 127
     47e:	57 e4       	ldi	r21, 0x47	; 71
     480:	69 85       	ldd	r22, Y+9	; 0x09
     482:	7a 85       	ldd	r23, Y+10	; 0x0a
     484:	8b 85       	ldd	r24, Y+11	; 0x0b
     486:	9c 85       	ldd	r25, Y+12	; 0x0c
     488:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     48c:	18 16       	cp	r1, r24
     48e:	0c f0       	brlt	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	7b c0       	rjmp	.+246    	; 0x588 <__LOCK_REGION_LENGTH__+0x188>
	{
		_delay_ms(__us / 1000.0);
     492:	20 e0       	ldi	r18, 0x00	; 0
     494:	30 e0       	ldi	r19, 0x00	; 0
     496:	4a e7       	ldi	r20, 0x7A	; 122
     498:	54 e4       	ldi	r21, 0x44	; 68
     49a:	69 81       	ldd	r22, Y+1	; 0x01
     49c:	7a 81       	ldd	r23, Y+2	; 0x02
     49e:	8b 81       	ldd	r24, Y+3	; 0x03
     4a0:	9c 81       	ldd	r25, Y+4	; 0x04
     4a2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
     4a6:	dc 01       	movw	r26, r24
     4a8:	cb 01       	movw	r24, r22
     4aa:	8e 87       	std	Y+14, r24	; 0x0e
     4ac:	9f 87       	std	Y+15, r25	; 0x0f
     4ae:	a8 8b       	std	Y+16, r26	; 0x10
     4b0:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     4b2:	20 e0       	ldi	r18, 0x00	; 0
     4b4:	30 e0       	ldi	r19, 0x00	; 0
     4b6:	4a e7       	ldi	r20, 0x7A	; 122
     4b8:	55 e4       	ldi	r21, 0x45	; 69
     4ba:	6e 85       	ldd	r22, Y+14	; 0x0e
     4bc:	7f 85       	ldd	r23, Y+15	; 0x0f
     4be:	88 89       	ldd	r24, Y+16	; 0x10
     4c0:	99 89       	ldd	r25, Y+17	; 0x11
     4c2:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     4c6:	dc 01       	movw	r26, r24
     4c8:	cb 01       	movw	r24, r22
     4ca:	8a 8b       	std	Y+18, r24	; 0x12
     4cc:	9b 8b       	std	Y+19, r25	; 0x13
     4ce:	ac 8b       	std	Y+20, r26	; 0x14
     4d0:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e8       	ldi	r20, 0x80	; 128
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	6a 89       	ldd	r22, Y+18	; 0x12
     4dc:	7b 89       	ldd	r23, Y+19	; 0x13
     4de:	8c 89       	ldd	r24, Y+20	; 0x14
     4e0:	9d 89       	ldd	r25, Y+21	; 0x15
     4e2:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     4e6:	88 23       	and	r24, r24
     4e8:	2c f4       	brge	.+10     	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
		__ticks = 1;
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	9f 8b       	std	Y+23, r25	; 0x17
     4f0:	8e 8b       	std	Y+22, r24	; 0x16
     4f2:	3f c0       	rjmp	.+126    	; 0x572 <__LOCK_REGION_LENGTH__+0x172>
	else if (__tmp > 65535)
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	3f ef       	ldi	r19, 0xFF	; 255
     4f8:	4f e7       	ldi	r20, 0x7F	; 127
     4fa:	57 e4       	ldi	r21, 0x47	; 71
     4fc:	6a 89       	ldd	r22, Y+18	; 0x12
     4fe:	7b 89       	ldd	r23, Y+19	; 0x13
     500:	8c 89       	ldd	r24, Y+20	; 0x14
     502:	9d 89       	ldd	r25, Y+21	; 0x15
     504:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     508:	18 16       	cp	r1, r24
     50a:	4c f5       	brge	.+82     	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e2       	ldi	r20, 0x20	; 32
     512:	51 e4       	ldi	r21, 0x41	; 65
     514:	6e 85       	ldd	r22, Y+14	; 0x0e
     516:	7f 85       	ldd	r23, Y+15	; 0x0f
     518:	88 89       	ldd	r24, Y+16	; 0x10
     51a:	99 89       	ldd	r25, Y+17	; 0x11
     51c:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     520:	dc 01       	movw	r26, r24
     522:	cb 01       	movw	r24, r22
     524:	bc 01       	movw	r22, r24
     526:	cd 01       	movw	r24, r26
     528:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     52c:	dc 01       	movw	r26, r24
     52e:	cb 01       	movw	r24, r22
     530:	9f 8b       	std	Y+23, r25	; 0x17
     532:	8e 8b       	std	Y+22, r24	; 0x16
     534:	0f c0       	rjmp	.+30     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
     536:	80 e9       	ldi	r24, 0x90	; 144
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	99 8f       	std	Y+25, r25	; 0x19
     53c:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     53e:	88 8d       	ldd	r24, Y+24	; 0x18
     540:	99 8d       	ldd	r25, Y+25	; 0x19
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     546:	99 8f       	std	Y+25, r25	; 0x19
     548:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54a:	8e 89       	ldd	r24, Y+22	; 0x16
     54c:	9f 89       	ldd	r25, Y+23	; 0x17
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	9f 8b       	std	Y+23, r25	; 0x17
     552:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     554:	8e 89       	ldd	r24, Y+22	; 0x16
     556:	9f 89       	ldd	r25, Y+23	; 0x17
     558:	89 2b       	or	r24, r25
     55a:	69 f7       	brne	.-38     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     55c:	3f c0       	rjmp	.+126    	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     55e:	6a 89       	ldd	r22, Y+18	; 0x12
     560:	7b 89       	ldd	r23, Y+19	; 0x13
     562:	8c 89       	ldd	r24, Y+20	; 0x14
     564:	9d 89       	ldd	r25, Y+21	; 0x15
     566:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     56a:	dc 01       	movw	r26, r24
     56c:	cb 01       	movw	r24, r22
     56e:	9f 8b       	std	Y+23, r25	; 0x17
     570:	8e 8b       	std	Y+22, r24	; 0x16
     572:	8e 89       	ldd	r24, Y+22	; 0x16
     574:	9f 89       	ldd	r25, Y+23	; 0x17
     576:	9b 8f       	std	Y+27, r25	; 0x1b
     578:	8a 8f       	std	Y+26, r24	; 0x1a
     57a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     57c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     57e:	01 97       	sbiw	r24, 0x01	; 1
     580:	f1 f7       	brne	.-4      	; 0x57e <__LOCK_REGION_LENGTH__+0x17e>
     582:	9b 8f       	std	Y+27, r25	; 0x1b
     584:	8a 8f       	std	Y+26, r24	; 0x1a
     586:	2a c0       	rjmp	.+84     	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	4f e7       	ldi	r20, 0x7F	; 127
     58e:	53 e4       	ldi	r21, 0x43	; 67
     590:	6d 81       	ldd	r22, Y+5	; 0x05
     592:	7e 81       	ldd	r23, Y+6	; 0x06
     594:	8f 81       	ldd	r24, Y+7	; 0x07
     596:	98 85       	ldd	r25, Y+8	; 0x08
     598:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     59c:	18 16       	cp	r1, r24
     59e:	ac f4       	brge	.+42     	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     5a0:	69 85       	ldd	r22, Y+9	; 0x09
     5a2:	7a 85       	ldd	r23, Y+10	; 0x0a
     5a4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5a6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5a8:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     5ac:	dc 01       	movw	r26, r24
     5ae:	cb 01       	movw	r24, r22
     5b0:	9d 8f       	std	Y+29, r25	; 0x1d
     5b2:	8c 8f       	std	Y+28, r24	; 0x1c
     5b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5b8:	9f 8f       	std	Y+31, r25	; 0x1f
     5ba:	8e 8f       	std	Y+30, r24	; 0x1e
     5bc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     5be:	9f 8d       	ldd	r25, Y+31	; 0x1f
     5c0:	01 97       	sbiw	r24, 0x01	; 1
     5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
     5c4:	9f 8f       	std	Y+31, r25	; 0x1f
     5c6:	8e 8f       	std	Y+30, r24	; 0x1e
	_delay_us( 45 );
}
     5c8:	0f c0       	rjmp	.+30     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     5ca:	6d 81       	ldd	r22, Y+5	; 0x05
     5cc:	7e 81       	ldd	r23, Y+6	; 0x06
     5ce:	8f 81       	ldd	r24, Y+7	; 0x07
     5d0:	98 85       	ldd	r25, Y+8	; 0x08
     5d2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     5d6:	dc 01       	movw	r26, r24
     5d8:	cb 01       	movw	r24, r22
     5da:	8d 87       	std	Y+13, r24	; 0x0d
     5dc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5de:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     5e0:	88 a1       	ldd	r24, Y+32	; 0x20
     5e2:	8a 95       	dec	r24
     5e4:	f1 f7       	brne	.-4      	; 0x5e2 <__LOCK_REGION_LENGTH__+0x1e2>
     5e6:	88 a3       	std	Y+32, r24	; 0x20
     5e8:	00 00       	nop
     5ea:	a1 96       	adiw	r28, 0x21	; 33
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	08 95       	ret

000005fc <lcd_command>:

// Befehls-Byte übertragen
void lcd_command( uint8_t d )
{	RS(0);			// Instruction-Register wählen
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2f 97       	sbiw	r28, 0x0f	; 15
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
     610:	8f 87       	std	Y+15, r24	; 0x0f
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 4b 00 	call	0x96	; 0x96 <RS>
	lcd_byte( d );
     618:	8f 85       	ldd	r24, Y+15	; 0x0f
     61a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_byte>
	switch( d ){	// Display löschen und 
     61e:	8f 85       	ldd	r24, Y+15	; 0x0f
     620:	88 2f       	mov	r24, r24
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	03 97       	sbiw	r24, 0x03	; 3
     628:	08 f0       	brcs	.+2      	; 0x62c <lcd_command+0x30>
     62a:	72 c0       	rjmp	.+228    	; 0x710 <lcd_command+0x114>
     62c:	80 e0       	ldi	r24, 0x00	; 0
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	a0 e0       	ldi	r26, 0x00	; 0
     632:	b0 e4       	ldi	r27, 0x40	; 64
     634:	89 83       	std	Y+1, r24	; 0x01
     636:	9a 83       	std	Y+2, r25	; 0x02
     638:	ab 83       	std	Y+3, r26	; 0x03
     63a:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     63c:	20 e0       	ldi	r18, 0x00	; 0
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	4a e7       	ldi	r20, 0x7A	; 122
     642:	55 e4       	ldi	r21, 0x45	; 69
     644:	69 81       	ldd	r22, Y+1	; 0x01
     646:	7a 81       	ldd	r23, Y+2	; 0x02
     648:	8b 81       	ldd	r24, Y+3	; 0x03
     64a:	9c 81       	ldd	r25, Y+4	; 0x04
     64c:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     650:	dc 01       	movw	r26, r24
     652:	cb 01       	movw	r24, r22
     654:	8d 83       	std	Y+5, r24	; 0x05
     656:	9e 83       	std	Y+6, r25	; 0x06
     658:	af 83       	std	Y+7, r26	; 0x07
     65a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     65c:	20 e0       	ldi	r18, 0x00	; 0
     65e:	30 e0       	ldi	r19, 0x00	; 0
     660:	40 e8       	ldi	r20, 0x80	; 128
     662:	5f e3       	ldi	r21, 0x3F	; 63
     664:	6d 81       	ldd	r22, Y+5	; 0x05
     666:	7e 81       	ldd	r23, Y+6	; 0x06
     668:	8f 81       	ldd	r24, Y+7	; 0x07
     66a:	98 85       	ldd	r25, Y+8	; 0x08
     66c:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     670:	88 23       	and	r24, r24
     672:	2c f4       	brge	.+10     	; 0x67e <lcd_command+0x82>
		__ticks = 1;
     674:	81 e0       	ldi	r24, 0x01	; 1
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	9a 87       	std	Y+10, r25	; 0x0a
     67a:	89 87       	std	Y+9, r24	; 0x09
     67c:	3f c0       	rjmp	.+126    	; 0x6fc <lcd_command+0x100>
	else if (__tmp > 65535)
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	3f ef       	ldi	r19, 0xFF	; 255
     682:	4f e7       	ldi	r20, 0x7F	; 127
     684:	57 e4       	ldi	r21, 0x47	; 71
     686:	6d 81       	ldd	r22, Y+5	; 0x05
     688:	7e 81       	ldd	r23, Y+6	; 0x06
     68a:	8f 81       	ldd	r24, Y+7	; 0x07
     68c:	98 85       	ldd	r25, Y+8	; 0x08
     68e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     692:	18 16       	cp	r1, r24
     694:	4c f5       	brge	.+82     	; 0x6e8 <lcd_command+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e2       	ldi	r20, 0x20	; 32
     69c:	51 e4       	ldi	r21, 0x41	; 65
     69e:	69 81       	ldd	r22, Y+1	; 0x01
     6a0:	7a 81       	ldd	r23, Y+2	; 0x02
     6a2:	8b 81       	ldd	r24, Y+3	; 0x03
     6a4:	9c 81       	ldd	r25, Y+4	; 0x04
     6a6:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     6aa:	dc 01       	movw	r26, r24
     6ac:	cb 01       	movw	r24, r22
     6ae:	bc 01       	movw	r22, r24
     6b0:	cd 01       	movw	r24, r26
     6b2:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     6b6:	dc 01       	movw	r26, r24
     6b8:	cb 01       	movw	r24, r22
     6ba:	9a 87       	std	Y+10, r25	; 0x0a
     6bc:	89 87       	std	Y+9, r24	; 0x09
     6be:	0f c0       	rjmp	.+30     	; 0x6de <lcd_command+0xe2>
     6c0:	80 e9       	ldi	r24, 0x90	; 144
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	9c 87       	std	Y+12, r25	; 0x0c
     6c6:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     6c8:	8b 85       	ldd	r24, Y+11	; 0x0b
     6ca:	9c 85       	ldd	r25, Y+12	; 0x0c
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <lcd_command+0xd0>
     6d0:	9c 87       	std	Y+12, r25	; 0x0c
     6d2:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d4:	89 85       	ldd	r24, Y+9	; 0x09
     6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	9a 87       	std	Y+10, r25	; 0x0a
     6dc:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6de:	89 85       	ldd	r24, Y+9	; 0x09
     6e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     6e2:	89 2b       	or	r24, r25
     6e4:	69 f7       	brne	.-38     	; 0x6c0 <lcd_command+0xc4>
     6e6:	14 c0       	rjmp	.+40     	; 0x710 <lcd_command+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     6e8:	6d 81       	ldd	r22, Y+5	; 0x05
     6ea:	7e 81       	ldd	r23, Y+6	; 0x06
     6ec:	8f 81       	ldd	r24, Y+7	; 0x07
     6ee:	98 85       	ldd	r25, Y+8	; 0x08
     6f0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     6f4:	dc 01       	movw	r26, r24
     6f6:	cb 01       	movw	r24, r22
     6f8:	9a 87       	std	Y+10, r25	; 0x0a
     6fa:	89 87       	std	Y+9, r24	; 0x09
     6fc:	89 85       	ldd	r24, Y+9	; 0x09
     6fe:	9a 85       	ldd	r25, Y+10	; 0x0a
     700:	9e 87       	std	Y+14, r25	; 0x0e
     702:	8d 87       	std	Y+13, r24	; 0x0d
     704:	8d 85       	ldd	r24, Y+13	; 0x0d
     706:	9e 85       	ldd	r25, Y+14	; 0x0e
     708:	01 97       	sbiw	r24, 0x01	; 1
     70a:	f1 f7       	brne	.-4      	; 0x708 <lcd_command+0x10c>
     70c:	9e 87       	std	Y+14, r25	; 0x0e
     70e:	8d 87       	std	Y+13, r24	; 0x0d
		case 1:		// Cursor home brauchen Zeit
		case 2:
		case 3: _delay_ms( 2 );
	}
	RS(1);			// Daten-Register wählen
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 4b 00 	call	0x96	; 0x96 <RS>
}
     716:	00 00       	nop
     718:	2f 96       	adiw	r28, 0x0f	; 15
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <lcd_init>:

//------------   High-Level-Routinen --------------------------------

// Controller und LC-Display initialisieren:
void lcd_init( void )
{	// Alle Steuersignale aus, dann Treiber aktivieren
     72a:	0f 93       	push	r16
     72c:	1f 93       	push	r17
     72e:	cf 93       	push	r28
     730:	df 93       	push	r29
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	ce 58       	subi	r28, 0x8E	; 142
     738:	d1 09       	sbc	r29, r1
     73a:	0f b6       	in	r0, 0x3f	; 63
     73c:	f8 94       	cli
     73e:	de bf       	out	0x3e, r29	; 62
     740:	0f be       	out	0x3f, r0	; 63
     742:	cd bf       	out	0x3d, r28	; 61
	PORT_RS &= ~(1<<RS_);
     744:	85 e2       	ldi	r24, 0x25	; 37
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	25 e2       	ldi	r18, 0x25	; 37
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	f9 01       	movw	r30, r18
     74e:	20 81       	ld	r18, Z
     750:	2f 7e       	andi	r18, 0xEF	; 239
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
	PORT_E &= ~(1<<E_);
     756:	85 e2       	ldi	r24, 0x25	; 37
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	25 e2       	ldi	r18, 0x25	; 37
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	f9 01       	movw	r30, r18
     760:	20 81       	ld	r18, Z
     762:	27 7f       	andi	r18, 0xF7	; 247
     764:	fc 01       	movw	r30, r24
     766:	20 83       	st	Z, r18
	PORT_DAT &= ~((1<<D4_)|(1<<D5_)|(1<<D6_)|(1<<D7_));
     768:	8b e2       	ldi	r24, 0x2B	; 43
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	2b e2       	ldi	r18, 0x2B	; 43
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	f9 01       	movw	r30, r18
     772:	20 81       	ld	r18, Z
     774:	23 7c       	andi	r18, 0xC3	; 195
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
	DDR_RS |= (1<<RS_);
     77a:	84 e2       	ldi	r24, 0x24	; 36
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	24 e2       	ldi	r18, 0x24	; 36
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	f9 01       	movw	r30, r18
     784:	20 81       	ld	r18, Z
     786:	20 61       	ori	r18, 0x10	; 16
     788:	fc 01       	movw	r30, r24
     78a:	20 83       	st	Z, r18
	DDR_E |= (1<<E_);
     78c:	84 e2       	ldi	r24, 0x24	; 36
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	24 e2       	ldi	r18, 0x24	; 36
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	f9 01       	movw	r30, r18
     796:	20 81       	ld	r18, Z
     798:	28 60       	ori	r18, 0x08	; 8
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
	DDR_DAT |= ((1<<D4_)|(1<<D5_)|(1<<D6_)|(1<<D7_));
     79e:	8a e2       	ldi	r24, 0x2A	; 42
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	2a e2       	ldi	r18, 0x2A	; 42
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	2c 63       	ori	r18, 0x3C	; 60
     7ac:	fc 01       	movw	r30, r24
     7ae:	20 83       	st	Z, r18
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	a0 e7       	ldi	r26, 0x70	; 112
     7b6:	b1 e4       	ldi	r27, 0x41	; 65
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	9a 83       	std	Y+2, r25	; 0x02
     7bc:	ab 83       	std	Y+3, r26	; 0x03
     7be:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     7c0:	8e 01       	movw	r16, r28
     7c2:	0b 57       	subi	r16, 0x7B	; 123
     7c4:	1f 4f       	sbci	r17, 0xFF	; 255
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	4a e7       	ldi	r20, 0x7A	; 122
     7cc:	55 e4       	ldi	r21, 0x45	; 69
     7ce:	69 81       	ldd	r22, Y+1	; 0x01
     7d0:	7a 81       	ldd	r23, Y+2	; 0x02
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
     7d4:	9c 81       	ldd	r25, Y+4	; 0x04
     7d6:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	f8 01       	movw	r30, r16
     7e0:	80 83       	st	Z, r24
     7e2:	91 83       	std	Z+1, r25	; 0x01
     7e4:	a2 83       	std	Z+2, r26	; 0x02
     7e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     7e8:	ce 01       	movw	r24, r28
     7ea:	8b 57       	subi	r24, 0x7B	; 123
     7ec:	9f 4f       	sbci	r25, 0xFF	; 255
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	40 e8       	ldi	r20, 0x80	; 128
     7f4:	5f e3       	ldi	r21, 0x3F	; 63
     7f6:	fc 01       	movw	r30, r24
     7f8:	60 81       	ld	r22, Z
     7fa:	71 81       	ldd	r23, Z+1	; 0x01
     7fc:	82 81       	ldd	r24, Z+2	; 0x02
     7fe:	93 81       	ldd	r25, Z+3	; 0x03
     800:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     804:	88 23       	and	r24, r24
     806:	4c f4       	brge	.+18     	; 0x81a <lcd_init+0xf0>
		__ticks = 1;
     808:	ce 01       	movw	r24, r28
     80a:	87 57       	subi	r24, 0x77	; 119
     80c:	9f 4f       	sbci	r25, 0xFF	; 255
     80e:	21 e0       	ldi	r18, 0x01	; 1
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	fc 01       	movw	r30, r24
     814:	31 83       	std	Z+1, r19	; 0x01
     816:	20 83       	st	Z, r18
     818:	69 c0       	rjmp	.+210    	; 0x8ec <lcd_init+0x1c2>
	else if (__tmp > 65535)
     81a:	ce 01       	movw	r24, r28
     81c:	8b 57       	subi	r24, 0x7B	; 123
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	3f ef       	ldi	r19, 0xFF	; 255
     824:	4f e7       	ldi	r20, 0x7F	; 127
     826:	57 e4       	ldi	r21, 0x47	; 71
     828:	fc 01       	movw	r30, r24
     82a:	60 81       	ld	r22, Z
     82c:	71 81       	ldd	r23, Z+1	; 0x01
     82e:	82 81       	ldd	r24, Z+2	; 0x02
     830:	93 81       	ldd	r25, Z+3	; 0x03
     832:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     836:	18 16       	cp	r1, r24
     838:	0c f0       	brlt	.+2      	; 0x83c <lcd_init+0x112>
     83a:	46 c0       	rjmp	.+140    	; 0x8c8 <lcd_init+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	51 e4       	ldi	r21, 0x41	; 65
     844:	69 81       	ldd	r22, Y+1	; 0x01
     846:	7a 81       	ldd	r23, Y+2	; 0x02
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	9c 81       	ldd	r25, Y+4	; 0x04
     84c:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     850:	dc 01       	movw	r26, r24
     852:	cb 01       	movw	r24, r22
     854:	8e 01       	movw	r16, r28
     856:	07 57       	subi	r16, 0x77	; 119
     858:	1f 4f       	sbci	r17, 0xFF	; 255
     85a:	bc 01       	movw	r22, r24
     85c:	cd 01       	movw	r24, r26
     85e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	f8 01       	movw	r30, r16
     868:	91 83       	std	Z+1, r25	; 0x01
     86a:	80 83       	st	Z, r24
     86c:	24 c0       	rjmp	.+72     	; 0x8b6 <lcd_init+0x18c>
     86e:	ce 01       	movw	r24, r28
     870:	85 57       	subi	r24, 0x75	; 117
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	20 e9       	ldi	r18, 0x90	; 144
     876:	31 e0       	ldi	r19, 0x01	; 1
     878:	fc 01       	movw	r30, r24
     87a:	31 83       	std	Z+1, r19	; 0x01
     87c:	20 83       	st	Z, r18
     87e:	ce 01       	movw	r24, r28
     880:	85 57       	subi	r24, 0x75	; 117
     882:	9f 4f       	sbci	r25, 0xFF	; 255
     884:	fc 01       	movw	r30, r24
     886:	80 81       	ld	r24, Z
     888:	91 81       	ldd	r25, Z+1	; 0x01
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <lcd_init+0x160>
     88e:	9e 01       	movw	r18, r28
     890:	25 57       	subi	r18, 0x75	; 117
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	f9 01       	movw	r30, r18
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     89a:	ce 01       	movw	r24, r28
     89c:	87 57       	subi	r24, 0x77	; 119
     89e:	9f 4f       	sbci	r25, 0xFF	; 255
     8a0:	9e 01       	movw	r18, r28
     8a2:	27 57       	subi	r18, 0x77	; 119
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	f9 01       	movw	r30, r18
     8a8:	20 81       	ld	r18, Z
     8aa:	31 81       	ldd	r19, Z+1	; 0x01
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	31 09       	sbc	r19, r1
     8b0:	fc 01       	movw	r30, r24
     8b2:	31 83       	std	Z+1, r19	; 0x01
     8b4:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8b6:	ce 01       	movw	r24, r28
     8b8:	87 57       	subi	r24, 0x77	; 119
     8ba:	9f 4f       	sbci	r25, 0xFF	; 255
     8bc:	fc 01       	movw	r30, r24
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	89 2b       	or	r24, r25
     8c4:	a1 f6       	brne	.-88     	; 0x86e <lcd_init+0x144>
     8c6:	2c c0       	rjmp	.+88     	; 0x920 <__stack+0x21>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8c8:	8e 01       	movw	r16, r28
     8ca:	07 57       	subi	r16, 0x77	; 119
     8cc:	1f 4f       	sbci	r17, 0xFF	; 255
     8ce:	ce 01       	movw	r24, r28
     8d0:	8b 57       	subi	r24, 0x7B	; 123
     8d2:	9f 4f       	sbci	r25, 0xFF	; 255
     8d4:	fc 01       	movw	r30, r24
     8d6:	60 81       	ld	r22, Z
     8d8:	71 81       	ldd	r23, Z+1	; 0x01
     8da:	82 81       	ldd	r24, Z+2	; 0x02
     8dc:	93 81       	ldd	r25, Z+3	; 0x03
     8de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     8e2:	dc 01       	movw	r26, r24
     8e4:	cb 01       	movw	r24, r22
     8e6:	f8 01       	movw	r30, r16
     8e8:	91 83       	std	Z+1, r25	; 0x01
     8ea:	80 83       	st	Z, r24
     8ec:	ce 01       	movw	r24, r28
     8ee:	83 57       	subi	r24, 0x73	; 115
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	9e 01       	movw	r18, r28
     8f4:	27 57       	subi	r18, 0x77	; 119
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	f9 01       	movw	r30, r18
     8fa:	20 81       	ld	r18, Z
     8fc:	31 81       	ldd	r19, Z+1	; 0x01
     8fe:	fc 01       	movw	r30, r24
     900:	31 83       	std	Z+1, r19	; 0x01
     902:	20 83       	st	Z, r18
     904:	ce 01       	movw	r24, r28
     906:	83 57       	subi	r24, 0x73	; 115
     908:	9f 4f       	sbci	r25, 0xFF	; 255
     90a:	fc 01       	movw	r30, r24
     90c:	80 81       	ld	r24, Z
     90e:	91 81       	ldd	r25, Z+1	; 0x01
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <__stack+0x11>
     914:	9e 01       	movw	r18, r28
     916:	23 57       	subi	r18, 0x73	; 115
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	f9 01       	movw	r30, r18
     91c:	91 83       	std	Z+1, r25	; 0x01
     91e:	80 83       	st	Z, r24
	_delay_ms(15);		// Ende des Power-On-Resets abwarten
	// Magische Abfolge, 8-Bit Mode, aber nur die 
	// obersten 4 Bit werden übertragen
	lcd_nibble( 0x30 );	_delay_us( 4100 );
     920:	80 e3       	ldi	r24, 0x30	; 48
     922:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e2       	ldi	r25, 0x20	; 32
     92a:	a0 e8       	ldi	r26, 0x80	; 128
     92c:	b5 e4       	ldi	r27, 0x45	; 69
     92e:	8d 83       	std	Y+5, r24	; 0x05
     930:	9e 83       	std	Y+6, r25	; 0x06
     932:	af 83       	std	Y+7, r26	; 0x07
     934:	b8 87       	std	Y+8, r27	; 0x08
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     936:	8e 01       	movw	r16, r28
     938:	07 59       	subi	r16, 0x97	; 151
     93a:	1f 4f       	sbci	r17, 0xFF	; 255
     93c:	2b ea       	ldi	r18, 0xAB	; 171
     93e:	3a ea       	ldi	r19, 0xAA	; 170
     940:	4a ea       	ldi	r20, 0xAA	; 170
     942:	50 e4       	ldi	r21, 0x40	; 64
     944:	6d 81       	ldd	r22, Y+5	; 0x05
     946:	7e 81       	ldd	r23, Y+6	; 0x06
     948:	8f 81       	ldd	r24, Y+7	; 0x07
     94a:	98 85       	ldd	r25, Y+8	; 0x08
     94c:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     950:	dc 01       	movw	r26, r24
     952:	cb 01       	movw	r24, r22
     954:	f8 01       	movw	r30, r16
     956:	80 83       	st	Z, r24
     958:	91 83       	std	Z+1, r25	; 0x01
     95a:	a2 83       	std	Z+2, r26	; 0x02
     95c:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     95e:	8e 01       	movw	r16, r28
     960:	03 59       	subi	r16, 0x93	; 147
     962:	1f 4f       	sbci	r17, 0xFF	; 255
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	40 e8       	ldi	r20, 0x80	; 128
     96a:	50 e4       	ldi	r21, 0x40	; 64
     96c:	6d 81       	ldd	r22, Y+5	; 0x05
     96e:	7e 81       	ldd	r23, Y+6	; 0x06
     970:	8f 81       	ldd	r24, Y+7	; 0x07
     972:	98 85       	ldd	r25, Y+8	; 0x08
     974:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     978:	dc 01       	movw	r26, r24
     97a:	cb 01       	movw	r24, r22
     97c:	f8 01       	movw	r30, r16
     97e:	80 83       	st	Z, r24
     980:	91 83       	std	Z+1, r25	; 0x01
     982:	a2 83       	std	Z+2, r26	; 0x02
     984:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     986:	ce 01       	movw	r24, r28
     988:	87 59       	subi	r24, 0x97	; 151
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	30 e0       	ldi	r19, 0x00	; 0
     990:	40 e8       	ldi	r20, 0x80	; 128
     992:	5f e3       	ldi	r21, 0x3F	; 63
     994:	fc 01       	movw	r30, r24
     996:	60 81       	ld	r22, Z
     998:	71 81       	ldd	r23, Z+1	; 0x01
     99a:	82 81       	ldd	r24, Z+2	; 0x02
     99c:	93 81       	ldd	r25, Z+3	; 0x03
     99e:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     9a2:	88 23       	and	r24, r24
     9a4:	3c f4       	brge	.+14     	; 0x9b4 <__stack+0xb5>
		__ticks = 1;
     9a6:	ce 01       	movw	r24, r28
     9a8:	8f 58       	subi	r24, 0x8F	; 143
     9aa:	9f 4f       	sbci	r25, 0xFF	; 255
     9ac:	21 e0       	ldi	r18, 0x01	; 1
     9ae:	fc 01       	movw	r30, r24
     9b0:	20 83       	st	Z, r18
     9b2:	2c c1       	rjmp	.+600    	; 0xc0c <__stack+0x30d>
	else if (__tmp2 > 65535)
     9b4:	ce 01       	movw	r24, r28
     9b6:	83 59       	subi	r24, 0x93	; 147
     9b8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	3f ef       	ldi	r19, 0xFF	; 255
     9be:	4f e7       	ldi	r20, 0x7F	; 127
     9c0:	57 e4       	ldi	r21, 0x47	; 71
     9c2:	fc 01       	movw	r30, r24
     9c4:	60 81       	ld	r22, Z
     9c6:	71 81       	ldd	r23, Z+1	; 0x01
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	93 81       	ldd	r25, Z+3	; 0x03
     9cc:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     9d0:	18 16       	cp	r1, r24
     9d2:	0c f0       	brlt	.+2      	; 0x9d6 <__stack+0xd7>
     9d4:	cd c0       	rjmp	.+410    	; 0xb70 <__stack+0x271>
	{
		_delay_ms(__us / 1000.0);
     9d6:	20 e0       	ldi	r18, 0x00	; 0
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	4a e7       	ldi	r20, 0x7A	; 122
     9dc:	54 e4       	ldi	r21, 0x44	; 68
     9de:	6d 81       	ldd	r22, Y+5	; 0x05
     9e0:	7e 81       	ldd	r23, Y+6	; 0x06
     9e2:	8f 81       	ldd	r24, Y+7	; 0x07
     9e4:	98 85       	ldd	r25, Y+8	; 0x08
     9e6:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
     9ea:	dc 01       	movw	r26, r24
     9ec:	cb 01       	movw	r24, r22
     9ee:	9e 01       	movw	r18, r28
     9f0:	2e 58       	subi	r18, 0x8E	; 142
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	f9 01       	movw	r30, r18
     9f6:	80 83       	st	Z, r24
     9f8:	91 83       	std	Z+1, r25	; 0x01
     9fa:	a2 83       	std	Z+2, r26	; 0x02
     9fc:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     9fe:	8e 01       	movw	r16, r28
     a00:	0a 58       	subi	r16, 0x8A	; 138
     a02:	1f 4f       	sbci	r17, 0xFF	; 255
     a04:	ce 01       	movw	r24, r28
     a06:	8e 58       	subi	r24, 0x8E	; 142
     a08:	9f 4f       	sbci	r25, 0xFF	; 255
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	4a e7       	ldi	r20, 0x7A	; 122
     a10:	55 e4       	ldi	r21, 0x45	; 69
     a12:	fc 01       	movw	r30, r24
     a14:	60 81       	ld	r22, Z
     a16:	71 81       	ldd	r23, Z+1	; 0x01
     a18:	82 81       	ldd	r24, Z+2	; 0x02
     a1a:	93 81       	ldd	r25, Z+3	; 0x03
     a1c:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     a20:	dc 01       	movw	r26, r24
     a22:	cb 01       	movw	r24, r22
     a24:	f8 01       	movw	r30, r16
     a26:	80 83       	st	Z, r24
     a28:	91 83       	std	Z+1, r25	; 0x01
     a2a:	a2 83       	std	Z+2, r26	; 0x02
     a2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a2e:	ce 01       	movw	r24, r28
     a30:	8a 58       	subi	r24, 0x8A	; 138
     a32:	9f 4f       	sbci	r25, 0xFF	; 255
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e8       	ldi	r20, 0x80	; 128
     a3a:	5f e3       	ldi	r21, 0x3F	; 63
     a3c:	fc 01       	movw	r30, r24
     a3e:	60 81       	ld	r22, Z
     a40:	71 81       	ldd	r23, Z+1	; 0x01
     a42:	82 81       	ldd	r24, Z+2	; 0x02
     a44:	93 81       	ldd	r25, Z+3	; 0x03
     a46:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     a4a:	88 23       	and	r24, r24
     a4c:	4c f4       	brge	.+18     	; 0xa60 <__stack+0x161>
		__ticks = 1;
     a4e:	ce 01       	movw	r24, r28
     a50:	86 58       	subi	r24, 0x86	; 134
     a52:	9f 4f       	sbci	r25, 0xFF	; 255
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	fc 01       	movw	r30, r24
     a5a:	31 83       	std	Z+1, r19	; 0x01
     a5c:	20 83       	st	Z, r18
     a5e:	6d c0       	rjmp	.+218    	; 0xb3a <__stack+0x23b>
	else if (__tmp > 65535)
     a60:	ce 01       	movw	r24, r28
     a62:	8a 58       	subi	r24, 0x8A	; 138
     a64:	9f 4f       	sbci	r25, 0xFF	; 255
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	3f ef       	ldi	r19, 0xFF	; 255
     a6a:	4f e7       	ldi	r20, 0x7F	; 127
     a6c:	57 e4       	ldi	r21, 0x47	; 71
     a6e:	fc 01       	movw	r30, r24
     a70:	60 81       	ld	r22, Z
     a72:	71 81       	ldd	r23, Z+1	; 0x01
     a74:	82 81       	ldd	r24, Z+2	; 0x02
     a76:	93 81       	ldd	r25, Z+3	; 0x03
     a78:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     a7c:	18 16       	cp	r1, r24
     a7e:	0c f0       	brlt	.+2      	; 0xa82 <__stack+0x183>
     a80:	4a c0       	rjmp	.+148    	; 0xb16 <__stack+0x217>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a82:	ce 01       	movw	r24, r28
     a84:	8e 58       	subi	r24, 0x8E	; 142
     a86:	9f 4f       	sbci	r25, 0xFF	; 255
     a88:	20 e0       	ldi	r18, 0x00	; 0
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	40 e2       	ldi	r20, 0x20	; 32
     a8e:	51 e4       	ldi	r21, 0x41	; 65
     a90:	fc 01       	movw	r30, r24
     a92:	60 81       	ld	r22, Z
     a94:	71 81       	ldd	r23, Z+1	; 0x01
     a96:	82 81       	ldd	r24, Z+2	; 0x02
     a98:	93 81       	ldd	r25, Z+3	; 0x03
     a9a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     a9e:	dc 01       	movw	r26, r24
     aa0:	cb 01       	movw	r24, r22
     aa2:	8e 01       	movw	r16, r28
     aa4:	06 58       	subi	r16, 0x86	; 134
     aa6:	1f 4f       	sbci	r17, 0xFF	; 255
     aa8:	bc 01       	movw	r22, r24
     aaa:	cd 01       	movw	r24, r26
     aac:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     ab0:	dc 01       	movw	r26, r24
     ab2:	cb 01       	movw	r24, r22
     ab4:	f8 01       	movw	r30, r16
     ab6:	91 83       	std	Z+1, r25	; 0x01
     ab8:	80 83       	st	Z, r24
     aba:	24 c0       	rjmp	.+72     	; 0xb04 <__stack+0x205>
     abc:	ce 01       	movw	r24, r28
     abe:	84 58       	subi	r24, 0x84	; 132
     ac0:	9f 4f       	sbci	r25, 0xFF	; 255
     ac2:	20 e9       	ldi	r18, 0x90	; 144
     ac4:	31 e0       	ldi	r19, 0x01	; 1
     ac6:	fc 01       	movw	r30, r24
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
     acc:	ce 01       	movw	r24, r28
     ace:	84 58       	subi	r24, 0x84	; 132
     ad0:	9f 4f       	sbci	r25, 0xFF	; 255
     ad2:	fc 01       	movw	r30, r24
     ad4:	80 81       	ld	r24, Z
     ad6:	91 81       	ldd	r25, Z+1	; 0x01
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	f1 f7       	brne	.-4      	; 0xad8 <__stack+0x1d9>
     adc:	9e 01       	movw	r18, r28
     ade:	24 58       	subi	r18, 0x84	; 132
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	f9 01       	movw	r30, r18
     ae4:	91 83       	std	Z+1, r25	; 0x01
     ae6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae8:	ce 01       	movw	r24, r28
     aea:	86 58       	subi	r24, 0x86	; 134
     aec:	9f 4f       	sbci	r25, 0xFF	; 255
     aee:	9e 01       	movw	r18, r28
     af0:	26 58       	subi	r18, 0x86	; 134
     af2:	3f 4f       	sbci	r19, 0xFF	; 255
     af4:	f9 01       	movw	r30, r18
     af6:	20 81       	ld	r18, Z
     af8:	31 81       	ldd	r19, Z+1	; 0x01
     afa:	21 50       	subi	r18, 0x01	; 1
     afc:	31 09       	sbc	r19, r1
     afe:	fc 01       	movw	r30, r24
     b00:	31 83       	std	Z+1, r19	; 0x01
     b02:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b04:	ce 01       	movw	r24, r28
     b06:	86 58       	subi	r24, 0x86	; 134
     b08:	9f 4f       	sbci	r25, 0xFF	; 255
     b0a:	fc 01       	movw	r30, r24
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	89 2b       	or	r24, r25
     b12:	a1 f6       	brne	.-88     	; 0xabc <__stack+0x1bd>
     b14:	7b c0       	rjmp	.+246    	; 0xc0c <__stack+0x30d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b16:	8e 01       	movw	r16, r28
     b18:	06 58       	subi	r16, 0x86	; 134
     b1a:	1f 4f       	sbci	r17, 0xFF	; 255
     b1c:	ce 01       	movw	r24, r28
     b1e:	8a 58       	subi	r24, 0x8A	; 138
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	fc 01       	movw	r30, r24
     b24:	60 81       	ld	r22, Z
     b26:	71 81       	ldd	r23, Z+1	; 0x01
     b28:	82 81       	ldd	r24, Z+2	; 0x02
     b2a:	93 81       	ldd	r25, Z+3	; 0x03
     b2c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     b30:	dc 01       	movw	r26, r24
     b32:	cb 01       	movw	r24, r22
     b34:	f8 01       	movw	r30, r16
     b36:	91 83       	std	Z+1, r25	; 0x01
     b38:	80 83       	st	Z, r24
     b3a:	ce 01       	movw	r24, r28
     b3c:	82 58       	subi	r24, 0x82	; 130
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	9e 01       	movw	r18, r28
     b42:	26 58       	subi	r18, 0x86	; 134
     b44:	3f 4f       	sbci	r19, 0xFF	; 255
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	31 81       	ldd	r19, Z+1	; 0x01
     b4c:	fc 01       	movw	r30, r24
     b4e:	31 83       	std	Z+1, r19	; 0x01
     b50:	20 83       	st	Z, r18
     b52:	ce 01       	movw	r24, r28
     b54:	82 58       	subi	r24, 0x82	; 130
     b56:	9f 4f       	sbci	r25, 0xFF	; 255
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	01 97       	sbiw	r24, 0x01	; 1
     b60:	f1 f7       	brne	.-4      	; 0xb5e <__stack+0x25f>
     b62:	9e 01       	movw	r18, r28
     b64:	22 58       	subi	r18, 0x82	; 130
     b66:	3f 4f       	sbci	r19, 0xFF	; 255
     b68:	f9 01       	movw	r30, r18
     b6a:	91 83       	std	Z+1, r25	; 0x01
     b6c:	80 83       	st	Z, r24
     b6e:	4e c0       	rjmp	.+156    	; 0xc0c <__stack+0x30d>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     b70:	ce 01       	movw	r24, r28
     b72:	87 59       	subi	r24, 0x97	; 151
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	4f e7       	ldi	r20, 0x7F	; 127
     b7c:	53 e4       	ldi	r21, 0x43	; 67
     b7e:	fc 01       	movw	r30, r24
     b80:	60 81       	ld	r22, Z
     b82:	71 81       	ldd	r23, Z+1	; 0x01
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     b8c:	18 16       	cp	r1, r24
     b8e:	6c f5       	brge	.+90     	; 0xbea <__stack+0x2eb>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     b90:	8e 01       	movw	r16, r28
     b92:	00 58       	subi	r16, 0x80	; 128
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	ce 01       	movw	r24, r28
     b98:	83 59       	subi	r24, 0x93	; 147
     b9a:	9f 4f       	sbci	r25, 0xFF	; 255
     b9c:	fc 01       	movw	r30, r24
     b9e:	60 81       	ld	r22, Z
     ba0:	71 81       	ldd	r23, Z+1	; 0x01
     ba2:	82 81       	ldd	r24, Z+2	; 0x02
     ba4:	93 81       	ldd	r25, Z+3	; 0x03
     ba6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	f8 01       	movw	r30, r16
     bb0:	91 83       	std	Z+1, r25	; 0x01
     bb2:	80 83       	st	Z, r24
     bb4:	ce 01       	movw	r24, r28
     bb6:	8e 57       	subi	r24, 0x7E	; 126
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	9e 01       	movw	r18, r28
     bbc:	20 58       	subi	r18, 0x80	; 128
     bbe:	3f 4f       	sbci	r19, 0xFF	; 255
     bc0:	f9 01       	movw	r30, r18
     bc2:	20 81       	ld	r18, Z
     bc4:	31 81       	ldd	r19, Z+1	; 0x01
     bc6:	fc 01       	movw	r30, r24
     bc8:	31 83       	std	Z+1, r19	; 0x01
     bca:	20 83       	st	Z, r18
     bcc:	ce 01       	movw	r24, r28
     bce:	8e 57       	subi	r24, 0x7E	; 126
     bd0:	9f 4f       	sbci	r25, 0xFF	; 255
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	91 81       	ldd	r25, Z+1	; 0x01
     bd8:	01 97       	sbiw	r24, 0x01	; 1
     bda:	f1 f7       	brne	.-4      	; 0xbd8 <__stack+0x2d9>
     bdc:	9e 01       	movw	r18, r28
     bde:	2e 57       	subi	r18, 0x7E	; 126
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	f9 01       	movw	r30, r18
     be4:	91 83       	std	Z+1, r25	; 0x01
     be6:	80 83       	st	Z, r24
     be8:	28 c0       	rjmp	.+80     	; 0xc3a <__stack+0x33b>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     bea:	8e 01       	movw	r16, r28
     bec:	0f 58       	subi	r16, 0x8F	; 143
     bee:	1f 4f       	sbci	r17, 0xFF	; 255
     bf0:	ce 01       	movw	r24, r28
     bf2:	87 59       	subi	r24, 0x97	; 151
     bf4:	9f 4f       	sbci	r25, 0xFF	; 255
     bf6:	fc 01       	movw	r30, r24
     bf8:	60 81       	ld	r22, Z
     bfa:	71 81       	ldd	r23, Z+1	; 0x01
     bfc:	82 81       	ldd	r24, Z+2	; 0x02
     bfe:	93 81       	ldd	r25, Z+3	; 0x03
     c00:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     c04:	dc 01       	movw	r26, r24
     c06:	cb 01       	movw	r24, r22
     c08:	f8 01       	movw	r30, r16
     c0a:	80 83       	st	Z, r24
     c0c:	ce 01       	movw	r24, r28
     c0e:	8c 57       	subi	r24, 0x7C	; 124
     c10:	9f 4f       	sbci	r25, 0xFF	; 255
     c12:	9e 01       	movw	r18, r28
     c14:	2f 58       	subi	r18, 0x8F	; 143
     c16:	3f 4f       	sbci	r19, 0xFF	; 255
     c18:	f9 01       	movw	r30, r18
     c1a:	20 81       	ld	r18, Z
     c1c:	fc 01       	movw	r30, r24
     c1e:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c20:	ce 01       	movw	r24, r28
     c22:	8c 57       	subi	r24, 0x7C	; 124
     c24:	9f 4f       	sbci	r25, 0xFF	; 255
     c26:	fc 01       	movw	r30, r24
     c28:	80 81       	ld	r24, Z
     c2a:	28 2f       	mov	r18, r24
     c2c:	2a 95       	dec	r18
     c2e:	f1 f7       	brne	.-4      	; 0xc2c <__stack+0x32d>
     c30:	ce 01       	movw	r24, r28
     c32:	8c 57       	subi	r24, 0x7C	; 124
     c34:	9f 4f       	sbci	r25, 0xFF	; 255
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
	lcd_nibble( 0x30 );	_delay_us( 100 );
     c3a:	80 e3       	ldi	r24, 0x30	; 48
     c3c:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
     c40:	80 e0       	ldi	r24, 0x00	; 0
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	a8 ec       	ldi	r26, 0xC8	; 200
     c46:	b2 e4       	ldi	r27, 0x42	; 66
     c48:	89 87       	std	Y+9, r24	; 0x09
     c4a:	9a 87       	std	Y+10, r25	; 0x0a
     c4c:	ab 87       	std	Y+11, r26	; 0x0b
     c4e:	bc 87       	std	Y+12, r27	; 0x0c
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     c50:	8e 01       	movw	r16, r28
     c52:	03 5b       	subi	r16, 0xB3	; 179
     c54:	1f 4f       	sbci	r17, 0xFF	; 255
     c56:	2b ea       	ldi	r18, 0xAB	; 171
     c58:	3a ea       	ldi	r19, 0xAA	; 170
     c5a:	4a ea       	ldi	r20, 0xAA	; 170
     c5c:	50 e4       	ldi	r21, 0x40	; 64
     c5e:	69 85       	ldd	r22, Y+9	; 0x09
     c60:	7a 85       	ldd	r23, Y+10	; 0x0a
     c62:	8b 85       	ldd	r24, Y+11	; 0x0b
     c64:	9c 85       	ldd	r25, Y+12	; 0x0c
     c66:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     c6a:	dc 01       	movw	r26, r24
     c6c:	cb 01       	movw	r24, r22
     c6e:	f8 01       	movw	r30, r16
     c70:	80 83       	st	Z, r24
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	a2 83       	std	Z+2, r26	; 0x02
     c76:	b3 83       	std	Z+3, r27	; 0x03
	__tmp2 = ((F_CPU) / 4e6) * __us;
     c78:	8e 01       	movw	r16, r28
     c7a:	0f 5a       	subi	r16, 0xAF	; 175
     c7c:	1f 4f       	sbci	r17, 0xFF	; 255
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	40 e8       	ldi	r20, 0x80	; 128
     c84:	50 e4       	ldi	r21, 0x40	; 64
     c86:	69 85       	ldd	r22, Y+9	; 0x09
     c88:	7a 85       	ldd	r23, Y+10	; 0x0a
     c8a:	8b 85       	ldd	r24, Y+11	; 0x0b
     c8c:	9c 85       	ldd	r25, Y+12	; 0x0c
     c8e:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	f8 01       	movw	r30, r16
     c98:	80 83       	st	Z, r24
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	a2 83       	std	Z+2, r26	; 0x02
     c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ca0:	ce 01       	movw	r24, r28
     ca2:	83 5b       	subi	r24, 0xB3	; 179
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e8       	ldi	r20, 0x80	; 128
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	fc 01       	movw	r30, r24
     cb0:	60 81       	ld	r22, Z
     cb2:	71 81       	ldd	r23, Z+1	; 0x01
     cb4:	82 81       	ldd	r24, Z+2	; 0x02
     cb6:	93 81       	ldd	r25, Z+3	; 0x03
     cb8:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     cbc:	88 23       	and	r24, r24
     cbe:	3c f4       	brge	.+14     	; 0xcce <__stack+0x3cf>
		__ticks = 1;
     cc0:	ce 01       	movw	r24, r28
     cc2:	8b 5a       	subi	r24, 0xAB	; 171
     cc4:	9f 4f       	sbci	r25, 0xFF	; 255
     cc6:	21 e0       	ldi	r18, 0x01	; 1
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
     ccc:	2c c1       	rjmp	.+600    	; 0xf26 <__stack+0x627>
	else if (__tmp2 > 65535)
     cce:	ce 01       	movw	r24, r28
     cd0:	8f 5a       	subi	r24, 0xAF	; 175
     cd2:	9f 4f       	sbci	r25, 0xFF	; 255
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	3f ef       	ldi	r19, 0xFF	; 255
     cd8:	4f e7       	ldi	r20, 0x7F	; 127
     cda:	57 e4       	ldi	r21, 0x47	; 71
     cdc:	fc 01       	movw	r30, r24
     cde:	60 81       	ld	r22, Z
     ce0:	71 81       	ldd	r23, Z+1	; 0x01
     ce2:	82 81       	ldd	r24, Z+2	; 0x02
     ce4:	93 81       	ldd	r25, Z+3	; 0x03
     ce6:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     cea:	18 16       	cp	r1, r24
     cec:	0c f0       	brlt	.+2      	; 0xcf0 <__stack+0x3f1>
     cee:	cd c0       	rjmp	.+410    	; 0xe8a <__stack+0x58b>
	{
		_delay_ms(__us / 1000.0);
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	4a e7       	ldi	r20, 0x7A	; 122
     cf6:	54 e4       	ldi	r21, 0x44	; 68
     cf8:	69 85       	ldd	r22, Y+9	; 0x09
     cfa:	7a 85       	ldd	r23, Y+10	; 0x0a
     cfc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cfe:	9c 85       	ldd	r25, Y+12	; 0x0c
     d00:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9e 01       	movw	r18, r28
     d0a:	2a 5a       	subi	r18, 0xAA	; 170
     d0c:	3f 4f       	sbci	r19, 0xFF	; 255
     d0e:	f9 01       	movw	r30, r18
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	a2 83       	std	Z+2, r26	; 0x02
     d16:	b3 83       	std	Z+3, r27	; 0x03

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     d18:	8e 01       	movw	r16, r28
     d1a:	06 5a       	subi	r16, 0xA6	; 166
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	ce 01       	movw	r24, r28
     d20:	8a 5a       	subi	r24, 0xAA	; 170
     d22:	9f 4f       	sbci	r25, 0xFF	; 255
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	4a e7       	ldi	r20, 0x7A	; 122
     d2a:	55 e4       	ldi	r21, 0x45	; 69
     d2c:	fc 01       	movw	r30, r24
     d2e:	60 81       	ld	r22, Z
     d30:	71 81       	ldd	r23, Z+1	; 0x01
     d32:	82 81       	ldd	r24, Z+2	; 0x02
     d34:	93 81       	ldd	r25, Z+3	; 0x03
     d36:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	f8 01       	movw	r30, r16
     d40:	80 83       	st	Z, r24
     d42:	91 83       	std	Z+1, r25	; 0x01
     d44:	a2 83       	std	Z+2, r26	; 0x02
     d46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d48:	ce 01       	movw	r24, r28
     d4a:	86 5a       	subi	r24, 0xA6	; 166
     d4c:	9f 4f       	sbci	r25, 0xFF	; 255
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	fc 01       	movw	r30, r24
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     d64:	88 23       	and	r24, r24
     d66:	4c f4       	brge	.+18     	; 0xd7a <__stack+0x47b>
		__ticks = 1;
     d68:	ce 01       	movw	r24, r28
     d6a:	82 5a       	subi	r24, 0xA2	; 162
     d6c:	9f 4f       	sbci	r25, 0xFF	; 255
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	fc 01       	movw	r30, r24
     d74:	31 83       	std	Z+1, r19	; 0x01
     d76:	20 83       	st	Z, r18
     d78:	6d c0       	rjmp	.+218    	; 0xe54 <__stack+0x555>
	else if (__tmp > 65535)
     d7a:	ce 01       	movw	r24, r28
     d7c:	86 5a       	subi	r24, 0xA6	; 166
     d7e:	9f 4f       	sbci	r25, 0xFF	; 255
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	3f ef       	ldi	r19, 0xFF	; 255
     d84:	4f e7       	ldi	r20, 0x7F	; 127
     d86:	57 e4       	ldi	r21, 0x47	; 71
     d88:	fc 01       	movw	r30, r24
     d8a:	60 81       	ld	r22, Z
     d8c:	71 81       	ldd	r23, Z+1	; 0x01
     d8e:	82 81       	ldd	r24, Z+2	; 0x02
     d90:	93 81       	ldd	r25, Z+3	; 0x03
     d92:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     d96:	18 16       	cp	r1, r24
     d98:	0c f0       	brlt	.+2      	; 0xd9c <__stack+0x49d>
     d9a:	4a c0       	rjmp	.+148    	; 0xe30 <__stack+0x531>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d9c:	ce 01       	movw	r24, r28
     d9e:	8a 5a       	subi	r24, 0xAA	; 170
     da0:	9f 4f       	sbci	r25, 0xFF	; 255
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	fc 01       	movw	r30, r24
     dac:	60 81       	ld	r22, Z
     dae:	71 81       	ldd	r23, Z+1	; 0x01
     db0:	82 81       	ldd	r24, Z+2	; 0x02
     db2:	93 81       	ldd	r25, Z+3	; 0x03
     db4:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	8e 01       	movw	r16, r28
     dbe:	02 5a       	subi	r16, 0xA2	; 162
     dc0:	1f 4f       	sbci	r17, 0xFF	; 255
     dc2:	bc 01       	movw	r22, r24
     dc4:	cd 01       	movw	r24, r26
     dc6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	f8 01       	movw	r30, r16
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	80 83       	st	Z, r24
     dd4:	24 c0       	rjmp	.+72     	; 0xe1e <__stack+0x51f>
     dd6:	ce 01       	movw	r24, r28
     dd8:	80 5a       	subi	r24, 0xA0	; 160
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	20 e9       	ldi	r18, 0x90	; 144
     dde:	31 e0       	ldi	r19, 0x01	; 1
     de0:	fc 01       	movw	r30, r24
     de2:	31 83       	std	Z+1, r19	; 0x01
     de4:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     de6:	ce 01       	movw	r24, r28
     de8:	80 5a       	subi	r24, 0xA0	; 160
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	fc 01       	movw	r30, r24
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <__stack+0x4f3>
     df6:	9e 01       	movw	r18, r28
     df8:	20 5a       	subi	r18, 0xA0	; 160
     dfa:	3f 4f       	sbci	r19, 0xFF	; 255
     dfc:	f9 01       	movw	r30, r18
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e02:	ce 01       	movw	r24, r28
     e04:	82 5a       	subi	r24, 0xA2	; 162
     e06:	9f 4f       	sbci	r25, 0xFF	; 255
     e08:	9e 01       	movw	r18, r28
     e0a:	22 5a       	subi	r18, 0xA2	; 162
     e0c:	3f 4f       	sbci	r19, 0xFF	; 255
     e0e:	f9 01       	movw	r30, r18
     e10:	20 81       	ld	r18, Z
     e12:	31 81       	ldd	r19, Z+1	; 0x01
     e14:	21 50       	subi	r18, 0x01	; 1
     e16:	31 09       	sbc	r19, r1
     e18:	fc 01       	movw	r30, r24
     e1a:	31 83       	std	Z+1, r19	; 0x01
     e1c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e1e:	ce 01       	movw	r24, r28
     e20:	82 5a       	subi	r24, 0xA2	; 162
     e22:	9f 4f       	sbci	r25, 0xFF	; 255
     e24:	fc 01       	movw	r30, r24
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	89 2b       	or	r24, r25
     e2c:	a1 f6       	brne	.-88     	; 0xdd6 <__stack+0x4d7>
     e2e:	7b c0       	rjmp	.+246    	; 0xf26 <__stack+0x627>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e30:	8e 01       	movw	r16, r28
     e32:	02 5a       	subi	r16, 0xA2	; 162
     e34:	1f 4f       	sbci	r17, 0xFF	; 255
     e36:	ce 01       	movw	r24, r28
     e38:	86 5a       	subi	r24, 0xA6	; 166
     e3a:	9f 4f       	sbci	r25, 0xFF	; 255
     e3c:	fc 01       	movw	r30, r24
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	82 81       	ldd	r24, Z+2	; 0x02
     e44:	93 81       	ldd	r25, Z+3	; 0x03
     e46:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     e4a:	dc 01       	movw	r26, r24
     e4c:	cb 01       	movw	r24, r22
     e4e:	f8 01       	movw	r30, r16
     e50:	91 83       	std	Z+1, r25	; 0x01
     e52:	80 83       	st	Z, r24
     e54:	ce 01       	movw	r24, r28
     e56:	8e 59       	subi	r24, 0x9E	; 158
     e58:	9f 4f       	sbci	r25, 0xFF	; 255
     e5a:	9e 01       	movw	r18, r28
     e5c:	22 5a       	subi	r18, 0xA2	; 162
     e5e:	3f 4f       	sbci	r19, 0xFF	; 255
     e60:	f9 01       	movw	r30, r18
     e62:	20 81       	ld	r18, Z
     e64:	31 81       	ldd	r19, Z+1	; 0x01
     e66:	fc 01       	movw	r30, r24
     e68:	31 83       	std	Z+1, r19	; 0x01
     e6a:	20 83       	st	Z, r18
     e6c:	ce 01       	movw	r24, r28
     e6e:	8e 59       	subi	r24, 0x9E	; 158
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	fc 01       	movw	r30, r24
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <__stack+0x579>
     e7c:	9e 01       	movw	r18, r28
     e7e:	2e 59       	subi	r18, 0x9E	; 158
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	f9 01       	movw	r30, r18
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
     e88:	4e c0       	rjmp	.+156    	; 0xf26 <__stack+0x627>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     e8a:	ce 01       	movw	r24, r28
     e8c:	83 5b       	subi	r24, 0xB3	; 179
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	4f e7       	ldi	r20, 0x7F	; 127
     e96:	53 e4       	ldi	r21, 0x43	; 67
     e98:	fc 01       	movw	r30, r24
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     ea6:	18 16       	cp	r1, r24
     ea8:	6c f5       	brge	.+90     	; 0xf04 <__stack+0x605>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     eaa:	8e 01       	movw	r16, r28
     eac:	0c 59       	subi	r16, 0x9C	; 156
     eae:	1f 4f       	sbci	r17, 0xFF	; 255
     eb0:	ce 01       	movw	r24, r28
     eb2:	8f 5a       	subi	r24, 0xAF	; 175
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	fc 01       	movw	r30, r24
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     ec4:	dc 01       	movw	r26, r24
     ec6:	cb 01       	movw	r24, r22
     ec8:	f8 01       	movw	r30, r16
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
     ece:	ce 01       	movw	r24, r28
     ed0:	8a 59       	subi	r24, 0x9A	; 154
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	9e 01       	movw	r18, r28
     ed6:	2c 59       	subi	r18, 0x9C	; 156
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	f9 01       	movw	r30, r18
     edc:	20 81       	ld	r18, Z
     ede:	31 81       	ldd	r19, Z+1	; 0x01
     ee0:	fc 01       	movw	r30, r24
     ee2:	31 83       	std	Z+1, r19	; 0x01
     ee4:	20 83       	st	Z, r18
     ee6:	ce 01       	movw	r24, r28
     ee8:	8a 59       	subi	r24, 0x9A	; 154
     eea:	9f 4f       	sbci	r25, 0xFF	; 255
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	01 97       	sbiw	r24, 0x01	; 1
     ef4:	f1 f7       	brne	.-4      	; 0xef2 <__stack+0x5f3>
     ef6:	9e 01       	movw	r18, r28
     ef8:	2a 59       	subi	r18, 0x9A	; 154
     efa:	3f 4f       	sbci	r19, 0xFF	; 255
     efc:	f9 01       	movw	r30, r18
     efe:	91 83       	std	Z+1, r25	; 0x01
     f00:	80 83       	st	Z, r24
     f02:	28 c0       	rjmp	.+80     	; 0xf54 <__stack+0x655>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f04:	8e 01       	movw	r16, r28
     f06:	0b 5a       	subi	r16, 0xAB	; 171
     f08:	1f 4f       	sbci	r17, 0xFF	; 255
     f0a:	ce 01       	movw	r24, r28
     f0c:	83 5b       	subi	r24, 0xB3	; 179
     f0e:	9f 4f       	sbci	r25, 0xFF	; 255
     f10:	fc 01       	movw	r30, r24
     f12:	60 81       	ld	r22, Z
     f14:	71 81       	ldd	r23, Z+1	; 0x01
     f16:	82 81       	ldd	r24, Z+2	; 0x02
     f18:	93 81       	ldd	r25, Z+3	; 0x03
     f1a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	f8 01       	movw	r30, r16
     f24:	80 83       	st	Z, r24
     f26:	ce 01       	movw	r24, r28
     f28:	88 59       	subi	r24, 0x98	; 152
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	9e 01       	movw	r18, r28
     f2e:	2b 5a       	subi	r18, 0xAB	; 171
     f30:	3f 4f       	sbci	r19, 0xFF	; 255
     f32:	f9 01       	movw	r30, r18
     f34:	20 81       	ld	r18, Z
     f36:	fc 01       	movw	r30, r24
     f38:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f3a:	ce 01       	movw	r24, r28
     f3c:	88 59       	subi	r24, 0x98	; 152
     f3e:	9f 4f       	sbci	r25, 0xFF	; 255
     f40:	fc 01       	movw	r30, r24
     f42:	80 81       	ld	r24, Z
     f44:	28 2f       	mov	r18, r24
     f46:	2a 95       	dec	r18
     f48:	f1 f7       	brne	.-4      	; 0xf46 <__stack+0x647>
     f4a:	ce 01       	movw	r24, r28
     f4c:	88 59       	subi	r24, 0x98	; 152
     f4e:	9f 4f       	sbci	r25, 0xFF	; 255
     f50:	fc 01       	movw	r30, r24
     f52:	20 83       	st	Z, r18
	lcd_nibble( 0x30 );	_delay_us( 100 );
     f54:	80 e3       	ldi	r24, 0x30	; 48
     f56:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a8 ec       	ldi	r26, 0xC8	; 200
     f60:	b2 e4       	ldi	r27, 0x42	; 66
     f62:	8d 87       	std	Y+13, r24	; 0x0d
     f64:	9e 87       	std	Y+14, r25	; 0x0e
     f66:	af 87       	std	Y+15, r26	; 0x0f
     f68:	b8 8b       	std	Y+16, r27	; 0x10
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     f6a:	2b ea       	ldi	r18, 0xAB	; 171
     f6c:	3a ea       	ldi	r19, 0xAA	; 170
     f6e:	4a ea       	ldi	r20, 0xAA	; 170
     f70:	50 e4       	ldi	r21, 0x40	; 64
     f72:	6d 85       	ldd	r22, Y+13	; 0x0d
     f74:	7e 85       	ldd	r23, Y+14	; 0x0e
     f76:	8f 85       	ldd	r24, Y+15	; 0x0f
     f78:	98 89       	ldd	r25, Y+16	; 0x10
     f7a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	89 ab       	std	Y+49, r24	; 0x31
     f84:	9a ab       	std	Y+50, r25	; 0x32
     f86:	ab ab       	std	Y+51, r26	; 0x33
     f88:	bc ab       	std	Y+52, r27	; 0x34
	__tmp2 = ((F_CPU) / 4e6) * __us;
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e8       	ldi	r20, 0x80	; 128
     f90:	50 e4       	ldi	r21, 0x40	; 64
     f92:	6d 85       	ldd	r22, Y+13	; 0x0d
     f94:	7e 85       	ldd	r23, Y+14	; 0x0e
     f96:	8f 85       	ldd	r24, Y+15	; 0x0f
     f98:	98 89       	ldd	r25, Y+16	; 0x10
     f9a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	8d ab       	std	Y+53, r24	; 0x35
     fa4:	9e ab       	std	Y+54, r25	; 0x36
     fa6:	af ab       	std	Y+55, r26	; 0x37
     fa8:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	69 a9       	ldd	r22, Y+49	; 0x31
     fb4:	7a a9       	ldd	r23, Y+50	; 0x32
     fb6:	8b a9       	ldd	r24, Y+51	; 0x33
     fb8:	9c a9       	ldd	r25, Y+52	; 0x34
     fba:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	1c f4       	brge	.+6      	; 0xfc8 <__stack+0x6c9>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	89 af       	std	Y+57, r24	; 0x39
     fc6:	09 c1       	rjmp	.+530    	; 0x11da <__stack+0x8db>
	else if (__tmp2 > 65535)
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	3f ef       	ldi	r19, 0xFF	; 255
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	57 e4       	ldi	r21, 0x47	; 71
     fd0:	6d a9       	ldd	r22, Y+53	; 0x35
     fd2:	7e a9       	ldd	r23, Y+54	; 0x36
     fd4:	8f a9       	ldd	r24, Y+55	; 0x37
     fd6:	98 ad       	ldd	r25, Y+56	; 0x38
     fd8:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
     fdc:	18 16       	cp	r1, r24
     fde:	0c f0       	brlt	.+2      	; 0xfe2 <__stack+0x6e3>
     fe0:	be c0       	rjmp	.+380    	; 0x115e <__stack+0x85f>
	{
		_delay_ms(__us / 1000.0);
     fe2:	20 e0       	ldi	r18, 0x00	; 0
     fe4:	30 e0       	ldi	r19, 0x00	; 0
     fe6:	4a e7       	ldi	r20, 0x7A	; 122
     fe8:	54 e4       	ldi	r21, 0x44	; 68
     fea:	6d 85       	ldd	r22, Y+13	; 0x0d
     fec:	7e 85       	ldd	r23, Y+14	; 0x0e
     fee:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff0:	98 89       	ldd	r25, Y+16	; 0x10
     ff2:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	8a af       	std	Y+58, r24	; 0x3a
     ffc:	9b af       	std	Y+59, r25	; 0x3b
     ffe:	ac af       	std	Y+60, r26	; 0x3c
    1000:	bd af       	std	Y+61, r27	; 0x3d

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1002:	8e 01       	movw	r16, r28
    1004:	02 5c       	subi	r16, 0xC2	; 194
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
    1008:	20 e0       	ldi	r18, 0x00	; 0
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	4a e7       	ldi	r20, 0x7A	; 122
    100e:	55 e4       	ldi	r21, 0x45	; 69
    1010:	6a ad       	ldd	r22, Y+58	; 0x3a
    1012:	7b ad       	ldd	r23, Y+59	; 0x3b
    1014:	8c ad       	ldd	r24, Y+60	; 0x3c
    1016:	9d ad       	ldd	r25, Y+61	; 0x3d
    1018:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	f8 01       	movw	r30, r16
    1022:	80 83       	st	Z, r24
    1024:	91 83       	std	Z+1, r25	; 0x01
    1026:	a2 83       	std	Z+2, r26	; 0x02
    1028:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    102a:	ce 01       	movw	r24, r28
    102c:	ce 96       	adiw	r24, 0x3e	; 62
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	40 e8       	ldi	r20, 0x80	; 128
    1034:	5f e3       	ldi	r21, 0x3F	; 63
    1036:	fc 01       	movw	r30, r24
    1038:	60 81       	ld	r22, Z
    103a:	71 81       	ldd	r23, Z+1	; 0x01
    103c:	82 81       	ldd	r24, Z+2	; 0x02
    103e:	93 81       	ldd	r25, Z+3	; 0x03
    1040:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
    1044:	88 23       	and	r24, r24
    1046:	4c f4       	brge	.+18     	; 0x105a <__stack+0x75b>
		__ticks = 1;
    1048:	ce 01       	movw	r24, r28
    104a:	8e 5b       	subi	r24, 0xBE	; 190
    104c:	9f 4f       	sbci	r25, 0xFF	; 255
    104e:	21 e0       	ldi	r18, 0x01	; 1
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	fc 01       	movw	r30, r24
    1054:	31 83       	std	Z+1, r19	; 0x01
    1056:	20 83       	st	Z, r18
    1058:	67 c0       	rjmp	.+206    	; 0x1128 <__stack+0x829>
	else if (__tmp > 65535)
    105a:	ce 01       	movw	r24, r28
    105c:	ce 96       	adiw	r24, 0x3e	; 62
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	fc 01       	movw	r30, r24
    1068:	60 81       	ld	r22, Z
    106a:	71 81       	ldd	r23, Z+1	; 0x01
    106c:	82 81       	ldd	r24, Z+2	; 0x02
    106e:	93 81       	ldd	r25, Z+3	; 0x03
    1070:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1074:	18 16       	cp	r1, r24
    1076:	0c f0       	brlt	.+2      	; 0x107a <__stack+0x77b>
    1078:	46 c0       	rjmp	.+140    	; 0x1106 <__stack+0x807>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	6a ad       	ldd	r22, Y+58	; 0x3a
    1084:	7b ad       	ldd	r23, Y+59	; 0x3b
    1086:	8c ad       	ldd	r24, Y+60	; 0x3c
    1088:	9d ad       	ldd	r25, Y+61	; 0x3d
    108a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8e 01       	movw	r16, r28
    1094:	0e 5b       	subi	r16, 0xBE	; 190
    1096:	1f 4f       	sbci	r17, 0xFF	; 255
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	f8 01       	movw	r30, r16
    10a6:	91 83       	std	Z+1, r25	; 0x01
    10a8:	80 83       	st	Z, r24
    10aa:	24 c0       	rjmp	.+72     	; 0x10f4 <__stack+0x7f5>
    10ac:	ce 01       	movw	r24, r28
    10ae:	8c 5b       	subi	r24, 0xBC	; 188
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	20 e9       	ldi	r18, 0x90	; 144
    10b4:	31 e0       	ldi	r19, 0x01	; 1
    10b6:	fc 01       	movw	r30, r24
    10b8:	31 83       	std	Z+1, r19	; 0x01
    10ba:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10bc:	ce 01       	movw	r24, r28
    10be:	8c 5b       	subi	r24, 0xBC	; 188
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	fc 01       	movw	r30, r24
    10c4:	80 81       	ld	r24, Z
    10c6:	91 81       	ldd	r25, Z+1	; 0x01
    10c8:	01 97       	sbiw	r24, 0x01	; 1
    10ca:	f1 f7       	brne	.-4      	; 0x10c8 <__stack+0x7c9>
    10cc:	9e 01       	movw	r18, r28
    10ce:	2c 5b       	subi	r18, 0xBC	; 188
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	f9 01       	movw	r30, r18
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d8:	ce 01       	movw	r24, r28
    10da:	8e 5b       	subi	r24, 0xBE	; 190
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	9e 01       	movw	r18, r28
    10e0:	2e 5b       	subi	r18, 0xBE	; 190
    10e2:	3f 4f       	sbci	r19, 0xFF	; 255
    10e4:	f9 01       	movw	r30, r18
    10e6:	20 81       	ld	r18, Z
    10e8:	31 81       	ldd	r19, Z+1	; 0x01
    10ea:	21 50       	subi	r18, 0x01	; 1
    10ec:	31 09       	sbc	r19, r1
    10ee:	fc 01       	movw	r30, r24
    10f0:	31 83       	std	Z+1, r19	; 0x01
    10f2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10f4:	ce 01       	movw	r24, r28
    10f6:	8e 5b       	subi	r24, 0xBE	; 190
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	fc 01       	movw	r30, r24
    10fc:	80 81       	ld	r24, Z
    10fe:	91 81       	ldd	r25, Z+1	; 0x01
    1100:	89 2b       	or	r24, r25
    1102:	a1 f6       	brne	.-88     	; 0x10ac <__stack+0x7ad>
    1104:	6a c0       	rjmp	.+212    	; 0x11da <__stack+0x8db>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	8e 01       	movw	r16, r28
    1108:	0e 5b       	subi	r16, 0xBE	; 190
    110a:	1f 4f       	sbci	r17, 0xFF	; 255
    110c:	ce 01       	movw	r24, r28
    110e:	ce 96       	adiw	r24, 0x3e	; 62
    1110:	fc 01       	movw	r30, r24
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    111e:	dc 01       	movw	r26, r24
    1120:	cb 01       	movw	r24, r22
    1122:	f8 01       	movw	r30, r16
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24
    1128:	ce 01       	movw	r24, r28
    112a:	8a 5b       	subi	r24, 0xBA	; 186
    112c:	9f 4f       	sbci	r25, 0xFF	; 255
    112e:	9e 01       	movw	r18, r28
    1130:	2e 5b       	subi	r18, 0xBE	; 190
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	f9 01       	movw	r30, r18
    1136:	20 81       	ld	r18, Z
    1138:	31 81       	ldd	r19, Z+1	; 0x01
    113a:	fc 01       	movw	r30, r24
    113c:	31 83       	std	Z+1, r19	; 0x01
    113e:	20 83       	st	Z, r18
    1140:	ce 01       	movw	r24, r28
    1142:	8a 5b       	subi	r24, 0xBA	; 186
    1144:	9f 4f       	sbci	r25, 0xFF	; 255
    1146:	fc 01       	movw	r30, r24
    1148:	80 81       	ld	r24, Z
    114a:	91 81       	ldd	r25, Z+1	; 0x01
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	f1 f7       	brne	.-4      	; 0x114c <__stack+0x84d>
    1150:	9e 01       	movw	r18, r28
    1152:	2a 5b       	subi	r18, 0xBA	; 186
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	f9 01       	movw	r30, r18
    1158:	91 83       	std	Z+1, r25	; 0x01
    115a:	80 83       	st	Z, r24
    115c:	3e c0       	rjmp	.+124    	; 0x11da <__stack+0x8db>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	53 e4       	ldi	r21, 0x43	; 67
    1166:	69 a9       	ldd	r22, Y+49	; 0x31
    1168:	7a a9       	ldd	r23, Y+50	; 0x32
    116a:	8b a9       	ldd	r24, Y+51	; 0x33
    116c:	9c a9       	ldd	r25, Y+52	; 0x34
    116e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1172:	18 16       	cp	r1, r24
    1174:	4c f5       	brge	.+82     	; 0x11c8 <__stack+0x8c9>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    1176:	8e 01       	movw	r16, r28
    1178:	08 5b       	subi	r16, 0xB8	; 184
    117a:	1f 4f       	sbci	r17, 0xFF	; 255
    117c:	6d a9       	ldd	r22, Y+53	; 0x35
    117e:	7e a9       	ldd	r23, Y+54	; 0x36
    1180:	8f a9       	ldd	r24, Y+55	; 0x37
    1182:	98 ad       	ldd	r25, Y+56	; 0x38
    1184:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	f8 01       	movw	r30, r16
    118e:	91 83       	std	Z+1, r25	; 0x01
    1190:	80 83       	st	Z, r24
    1192:	ce 01       	movw	r24, r28
    1194:	86 5b       	subi	r24, 0xB6	; 182
    1196:	9f 4f       	sbci	r25, 0xFF	; 255
    1198:	9e 01       	movw	r18, r28
    119a:	28 5b       	subi	r18, 0xB8	; 184
    119c:	3f 4f       	sbci	r19, 0xFF	; 255
    119e:	f9 01       	movw	r30, r18
    11a0:	20 81       	ld	r18, Z
    11a2:	31 81       	ldd	r19, Z+1	; 0x01
    11a4:	fc 01       	movw	r30, r24
    11a6:	31 83       	std	Z+1, r19	; 0x01
    11a8:	20 83       	st	Z, r18
    11aa:	ce 01       	movw	r24, r28
    11ac:	86 5b       	subi	r24, 0xB6	; 182
    11ae:	9f 4f       	sbci	r25, 0xFF	; 255
    11b0:	fc 01       	movw	r30, r24
    11b2:	80 81       	ld	r24, Z
    11b4:	91 81       	ldd	r25, Z+1	; 0x01
    11b6:	01 97       	sbiw	r24, 0x01	; 1
    11b8:	f1 f7       	brne	.-4      	; 0x11b6 <__stack+0x8b7>
    11ba:	9e 01       	movw	r18, r28
    11bc:	26 5b       	subi	r18, 0xB6	; 182
    11be:	3f 4f       	sbci	r19, 0xFF	; 255
    11c0:	f9 01       	movw	r30, r18
    11c2:	91 83       	std	Z+1, r25	; 0x01
    11c4:	80 83       	st	Z, r24
    11c6:	1c c0       	rjmp	.+56     	; 0x1200 <__stack+0x901>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    11c8:	69 a9       	ldd	r22, Y+49	; 0x31
    11ca:	7a a9       	ldd	r23, Y+50	; 0x32
    11cc:	8b a9       	ldd	r24, Y+51	; 0x33
    11ce:	9c a9       	ldd	r25, Y+52	; 0x34
    11d0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    11d4:	dc 01       	movw	r26, r24
    11d6:	cb 01       	movw	r24, r22
    11d8:	89 af       	std	Y+57, r24	; 0x39
    11da:	ce 01       	movw	r24, r28
    11dc:	84 5b       	subi	r24, 0xB4	; 180
    11de:	9f 4f       	sbci	r25, 0xFF	; 255
    11e0:	29 ad       	ldd	r18, Y+57	; 0x39
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11e6:	ce 01       	movw	r24, r28
    11e8:	84 5b       	subi	r24, 0xB4	; 180
    11ea:	9f 4f       	sbci	r25, 0xFF	; 255
    11ec:	fc 01       	movw	r30, r24
    11ee:	80 81       	ld	r24, Z
    11f0:	28 2f       	mov	r18, r24
    11f2:	2a 95       	dec	r18
    11f4:	f1 f7       	brne	.-4      	; 0x11f2 <__stack+0x8f3>
    11f6:	ce 01       	movw	r24, r28
    11f8:	84 5b       	subi	r24, 0xB4	; 180
    11fa:	9f 4f       	sbci	r25, 0xFF	; 255
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
	lcd_nibble( 0x20 );	_delay_us( 100 );	// 4-Bit-Modus
    1200:	80 e2       	ldi	r24, 0x20	; 32
    1202:	0e 94 81 01 	call	0x302	; 0x302 <lcd_nibble>
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a8 ec       	ldi	r26, 0xC8	; 200
    120c:	b2 e4       	ldi	r27, 0x42	; 66
    120e:	89 8b       	std	Y+17, r24	; 0x11
    1210:	9a 8b       	std	Y+18, r25	; 0x12
    1212:	ab 8b       	std	Y+19, r26	; 0x13
    1214:	bc 8b       	std	Y+20, r27	; 0x14
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    1216:	2b ea       	ldi	r18, 0xAB	; 171
    1218:	3a ea       	ldi	r19, 0xAA	; 170
    121a:	4a ea       	ldi	r20, 0xAA	; 170
    121c:	50 e4       	ldi	r21, 0x40	; 64
    121e:	69 89       	ldd	r22, Y+17	; 0x11
    1220:	7a 89       	ldd	r23, Y+18	; 0x12
    1222:	8b 89       	ldd	r24, Y+19	; 0x13
    1224:	9c 89       	ldd	r25, Y+20	; 0x14
    1226:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    122a:	dc 01       	movw	r26, r24
    122c:	cb 01       	movw	r24, r22
    122e:	8d 8b       	std	Y+21, r24	; 0x15
    1230:	9e 8b       	std	Y+22, r25	; 0x16
    1232:	af 8b       	std	Y+23, r26	; 0x17
    1234:	b8 8f       	std	Y+24, r27	; 0x18
	__tmp2 = ((F_CPU) / 4e6) * __us;
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	50 e4       	ldi	r21, 0x40	; 64
    123e:	69 89       	ldd	r22, Y+17	; 0x11
    1240:	7a 89       	ldd	r23, Y+18	; 0x12
    1242:	8b 89       	ldd	r24, Y+19	; 0x13
    1244:	9c 89       	ldd	r25, Y+20	; 0x14
    1246:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    124a:	dc 01       	movw	r26, r24
    124c:	cb 01       	movw	r24, r22
    124e:	89 8f       	std	Y+25, r24	; 0x19
    1250:	9a 8f       	std	Y+26, r25	; 0x1a
    1252:	ab 8f       	std	Y+27, r26	; 0x1b
    1254:	bc 8f       	std	Y+28, r27	; 0x1c
	if (__tmp < 1.0)
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	6d 89       	ldd	r22, Y+21	; 0x15
    1260:	7e 89       	ldd	r23, Y+22	; 0x16
    1262:	8f 89       	ldd	r24, Y+23	; 0x17
    1264:	98 8d       	ldd	r25, Y+24	; 0x18
    1266:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
    126a:	88 23       	and	r24, r24
    126c:	1c f4       	brge	.+6      	; 0x1274 <__stack+0x975>
		__ticks = 1;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	8d 8f       	std	Y+29, r24	; 0x1d
    1272:	b2 c0       	rjmp	.+356    	; 0x13d8 <__stack+0xad9>
	else if (__tmp2 > 65535)
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	69 8d       	ldd	r22, Y+25	; 0x19
    127e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1280:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1282:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1284:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	0c f0       	brlt	.+2      	; 0x128e <__stack+0x98f>
    128c:	7b c0       	rjmp	.+246    	; 0x1384 <__stack+0xa85>
	{
		_delay_ms(__us / 1000.0);
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	4a e7       	ldi	r20, 0x7A	; 122
    1294:	54 e4       	ldi	r21, 0x44	; 68
    1296:	69 89       	ldd	r22, Y+17	; 0x11
    1298:	7a 89       	ldd	r23, Y+18	; 0x12
    129a:	8b 89       	ldd	r24, Y+19	; 0x13
    129c:	9c 89       	ldd	r25, Y+20	; 0x14
    129e:	0e 94 0b 0b 	call	0x1616	; 0x1616 <__divsf3>
    12a2:	dc 01       	movw	r26, r24
    12a4:	cb 01       	movw	r24, r22
    12a6:	8e 8f       	std	Y+30, r24	; 0x1e
    12a8:	9f 8f       	std	Y+31, r25	; 0x1f
    12aa:	a8 a3       	std	Y+32, r26	; 0x20
    12ac:	b9 a3       	std	Y+33, r27	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	55 e4       	ldi	r21, 0x45	; 69
    12b6:	6e 8d       	ldd	r22, Y+30	; 0x1e
    12b8:	7f 8d       	ldd	r23, Y+31	; 0x1f
    12ba:	88 a1       	ldd	r24, Y+32	; 0x20
    12bc:	99 a1       	ldd	r25, Y+33	; 0x21
    12be:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	8a a3       	std	Y+34, r24	; 0x22
    12c8:	9b a3       	std	Y+35, r25	; 0x23
    12ca:	ac a3       	std	Y+36, r26	; 0x24
    12cc:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	6a a1       	ldd	r22, Y+34	; 0x22
    12d8:	7b a1       	ldd	r23, Y+35	; 0x23
    12da:	8c a1       	ldd	r24, Y+36	; 0x24
    12dc:	9d a1       	ldd	r25, Y+37	; 0x25
    12de:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	2c f4       	brge	.+10     	; 0x12f0 <__stack+0x9f1>
		__ticks = 1;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	9f a3       	std	Y+39, r25	; 0x27
    12ec:	8e a3       	std	Y+38, r24	; 0x26
    12ee:	3f c0       	rjmp	.+126    	; 0x136e <__stack+0xa6f>
	else if (__tmp > 65535)
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	6a a1       	ldd	r22, Y+34	; 0x22
    12fa:	7b a1       	ldd	r23, Y+35	; 0x23
    12fc:	8c a1       	ldd	r24, Y+36	; 0x24
    12fe:	9d a1       	ldd	r25, Y+37	; 0x25
    1300:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1304:	18 16       	cp	r1, r24
    1306:	4c f5       	brge	.+82     	; 0x135a <__stack+0xa5b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1312:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1314:	88 a1       	ldd	r24, Y+32	; 0x20
    1316:	99 a1       	ldd	r25, Y+33	; 0x21
    1318:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	bc 01       	movw	r22, r24
    1322:	cd 01       	movw	r24, r26
    1324:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9f a3       	std	Y+39, r25	; 0x27
    132e:	8e a3       	std	Y+38, r24	; 0x26
    1330:	0f c0       	rjmp	.+30     	; 0x1350 <__stack+0xa51>
    1332:	80 e9       	ldi	r24, 0x90	; 144
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	99 a7       	std	Y+41, r25	; 0x29
    1338:	88 a7       	std	Y+40, r24	; 0x28
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    133a:	88 a5       	ldd	r24, Y+40	; 0x28
    133c:	99 a5       	ldd	r25, Y+41	; 0x29
    133e:	01 97       	sbiw	r24, 0x01	; 1
    1340:	f1 f7       	brne	.-4      	; 0x133e <__stack+0xa3f>
    1342:	99 a7       	std	Y+41, r25	; 0x29
    1344:	88 a7       	std	Y+40, r24	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1346:	8e a1       	ldd	r24, Y+38	; 0x26
    1348:	9f a1       	ldd	r25, Y+39	; 0x27
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9f a3       	std	Y+39, r25	; 0x27
    134e:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1350:	8e a1       	ldd	r24, Y+38	; 0x26
    1352:	9f a1       	ldd	r25, Y+39	; 0x27
    1354:	89 2b       	or	r24, r25
    1356:	69 f7       	brne	.-38     	; 0x1332 <__stack+0xa33>
    1358:	3f c0       	rjmp	.+126    	; 0x13d8 <__stack+0xad9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    135a:	6a a1       	ldd	r22, Y+34	; 0x22
    135c:	7b a1       	ldd	r23, Y+35	; 0x23
    135e:	8c a1       	ldd	r24, Y+36	; 0x24
    1360:	9d a1       	ldd	r25, Y+37	; 0x25
    1362:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	9f a3       	std	Y+39, r25	; 0x27
    136c:	8e a3       	std	Y+38, r24	; 0x26
    136e:	8e a1       	ldd	r24, Y+38	; 0x26
    1370:	9f a1       	ldd	r25, Y+39	; 0x27
    1372:	9b a7       	std	Y+43, r25	; 0x2b
    1374:	8a a7       	std	Y+42, r24	; 0x2a
    1376:	8a a5       	ldd	r24, Y+42	; 0x2a
    1378:	9b a5       	ldd	r25, Y+43	; 0x2b
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <__stack+0xa7b>
    137e:	9b a7       	std	Y+43, r25	; 0x2b
    1380:	8a a7       	std	Y+42, r24	; 0x2a
    1382:	2a c0       	rjmp	.+84     	; 0x13d8 <__stack+0xad9>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	53 e4       	ldi	r21, 0x43	; 67
    138c:	6d 89       	ldd	r22, Y+21	; 0x15
    138e:	7e 89       	ldd	r23, Y+22	; 0x16
    1390:	8f 89       	ldd	r24, Y+23	; 0x17
    1392:	98 8d       	ldd	r25, Y+24	; 0x18
    1394:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1398:	18 16       	cp	r1, r24
    139a:	ac f4       	brge	.+42     	; 0x13c6 <__stack+0xac7>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    139c:	69 8d       	ldd	r22, Y+25	; 0x19
    139e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13a4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9d a7       	std	Y+45, r25	; 0x2d
    13ae:	8c a7       	std	Y+44, r24	; 0x2c
    13b0:	8c a5       	ldd	r24, Y+44	; 0x2c
    13b2:	9d a5       	ldd	r25, Y+45	; 0x2d
    13b4:	9f a7       	std	Y+47, r25	; 0x2f
    13b6:	8e a7       	std	Y+46, r24	; 0x2e
    13b8:	8e a5       	ldd	r24, Y+46	; 0x2e
    13ba:	9f a5       	ldd	r25, Y+47	; 0x2f
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <__stack+0xabd>
    13c0:	9f a7       	std	Y+47, r25	; 0x2f
    13c2:	8e a7       	std	Y+46, r24	; 0x2e
    13c4:	0f c0       	rjmp	.+30     	; 0x13e4 <__stack+0xae5>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    13c6:	6d 89       	ldd	r22, Y+21	; 0x15
    13c8:	7e 89       	ldd	r23, Y+22	; 0x16
    13ca:	8f 89       	ldd	r24, Y+23	; 0x17
    13cc:	98 8d       	ldd	r25, Y+24	; 0x18
    13ce:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	8d 8f       	std	Y+29, r24	; 0x1d
    13d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13da:	88 ab       	std	Y+48, r24	; 0x30
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    13dc:	88 a9       	ldd	r24, Y+48	; 0x30
    13de:	8a 95       	dec	r24
    13e0:	f1 f7       	brne	.-4      	; 0x13de <__stack+0xadf>
    13e2:	88 ab       	std	Y+48, r24	; 0x30
	lcd_command( 0x28);						// Function Set: 2-zeilig, Raster 5*8
    13e4:	88 e2       	ldi	r24, 0x28	; 40
    13e6:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
	lcd_command( 0x08 );					// Display off
    13ea:	88 e0       	ldi	r24, 0x08	; 8
    13ec:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
	lcd_command( 0x01 );					// Display clear
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
	lcd_command( 0x06 );					// Cursor auto-increment
    13f6:	86 e0       	ldi	r24, 0x06	; 6
    13f8:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
	lcd_command( 0x0C );					// on, no cursor, no blink
    13fc:	8c e0       	ldi	r24, 0x0C	; 12
    13fe:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
}
    1402:	00 00       	nop
    1404:	c2 57       	subi	r28, 0x72	; 114
    1406:	df 4f       	sbci	r29, 0xFF	; 255
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	df 91       	pop	r29
    1414:	cf 91       	pop	r28
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	08 95       	ret

0000141c <lcd_pos>:

// Curosor positionieren:
void lcd_pos( uint8_t line, uint8_t column )
{	column = column + line * 64;	
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	00 d0       	rcall	.+0      	; 0x1422 <lcd_pos+0x6>
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	6a 83       	std	Y+2, r22	; 0x02
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	82 95       	swap	r24
    142e:	88 0f       	add	r24, r24
    1430:	88 0f       	add	r24, r24
    1432:	80 7c       	andi	r24, 0xC0	; 192
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	89 0f       	add	r24, r25
    1438:	8a 83       	std	Y+2, r24	; 0x02
	lcd_command( 0x80 + column );
    143a:	8a 81       	ldd	r24, Y+2	; 0x02
    143c:	80 58       	subi	r24, 0x80	; 128
    143e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_command>
}
    1442:	00 00       	nop
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	df 91       	pop	r29
    144a:	cf 91       	pop	r28
    144c:	08 95       	ret

0000144e <lcd_text>:

// Ausgabe eines Textes an der aktuellen Cursorposition:
void lcd_text( char *t )
{	while( *t )
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	00 d0       	rcall	.+0      	; 0x1454 <lcd_text+0x6>
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
    145c:	0b c0       	rjmp	.+22     	; 0x1474 <lcd_text+0x26>
	{	lcd_byte( *t );
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	fc 01       	movw	r30, r24
    1464:	80 81       	ld	r24, Z
    1466:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <lcd_byte>
		t++;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	89 83       	std	Y+1, r24	; 0x01
	lcd_command( 0x80 + column );
}

// Ausgabe eines Textes an der aktuellen Cursorposition:
void lcd_text( char *t )
{	while( *t )
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	9a 81       	ldd	r25, Y+2	; 0x02
    1478:	fc 01       	movw	r30, r24
    147a:	80 81       	ld	r24, Z
    147c:	88 23       	and	r24, r24
    147e:	79 f7       	brne	.-34     	; 0x145e <lcd_text+0x10>
	{	lcd_byte( *t );
		t++;
	}
}
    1480:	00 00       	nop
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	08 95       	ret

0000148c <main>:
#define F_CPU	16000000
#include <stdio.h>
#include <avr/io.h>
#include "lcd.h"

int main(void){
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	a6 97       	sbiw	r28, 0x26	; 38
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61

	lcd_init();
    14a0:	0e 94 95 03 	call	0x72a	; 0x72a <lcd_init>

	// Simplen Text direkt ausgeben:
	lcd_pos(0,3);
    14a4:	63 e0       	ldi	r22, 0x03	; 3
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0e 94 0e 0a 	call	0x141c	; 0x141c <lcd_pos>
	lcd_text( (char *)"Hallo Welt!" );
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	91 e0       	ldi	r25, 0x01	; 1
    14b0:	0e 94 27 0a 	call	0x144e	; 0x144e <lcd_text>

	// Formatierte Ausgabe:
    char s[20];
  	//uint32_t n = 123456;
	uint32_t n = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	a0 e0       	ldi	r26, 0x00	; 0
    14ba:	b0 e0       	ldi	r27, 0x00	; 0
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	9a 83       	std	Y+2, r25	; 0x02
    14c0:	ab 83       	std	Y+3, r26	; 0x03
    14c2:	bc 83       	std	Y+4, r27	; 0x04
	while(1){
		lcd_pos(1,0);
    14c4:	60 e0       	ldi	r22, 0x00	; 0
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	0e 94 0e 0a 	call	0x141c	; 0x141c <lcd_pos>
		// Erst in einen Textpuffer schreiben:
		sprintf( s, "Konto: %lu", n );
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	8f 93       	push	r24
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	8f 93       	push	r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	8f 93       	push	r24
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	8f 93       	push	r24
    14dc:	8c e0       	ldi	r24, 0x0C	; 12
    14de:	91 e0       	ldi	r25, 0x01	; 1
    14e0:	89 2f       	mov	r24, r25
    14e2:	8f 93       	push	r24
    14e4:	8c e0       	ldi	r24, 0x0C	; 12
    14e6:	91 e0       	ldi	r25, 0x01	; 1
    14e8:	8f 93       	push	r24
    14ea:	ce 01       	movw	r24, r28
    14ec:	43 96       	adiw	r24, 0x13	; 19
    14ee:	29 2f       	mov	r18, r25
    14f0:	2f 93       	push	r18
    14f2:	8f 93       	push	r24
    14f4:	0e 94 93 0c 	call	0x1926	; 0x1926 <sprintf>
    14f8:	8d b7       	in	r24, 0x3d	; 61
    14fa:	9e b7       	in	r25, 0x3e	; 62
    14fc:	08 96       	adiw	r24, 0x08	; 8
    14fe:	0f b6       	in	r0, 0x3f	; 63
    1500:	f8 94       	cli
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	0f be       	out	0x3f, r0	; 63
    1506:	cd bf       	out	0x3d, r28	; 61
	    // Dann den Puffer ausgeben:
		lcd_text( s );
    1508:	ce 01       	movw	r24, r28
    150a:	43 96       	adiw	r24, 0x13	; 19
    150c:	0e 94 27 0a 	call	0x144e	; 0x144e <lcd_text>
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a8 ec       	ldi	r26, 0xC8	; 200
    1516:	b2 e4       	ldi	r27, 0x42	; 66
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	af 83       	std	Y+7, r26	; 0x07
    151e:	b8 87       	std	Y+8, r27	; 0x08

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	55 e4       	ldi	r21, 0x45	; 69
    1528:	6d 81       	ldd	r22, Y+5	; 0x05
    152a:	7e 81       	ldd	r23, Y+6	; 0x06
    152c:	8f 81       	ldd	r24, Y+7	; 0x07
    152e:	98 85       	ldd	r25, Y+8	; 0x08
    1530:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	89 87       	std	Y+9, r24	; 0x09
    153a:	9a 87       	std	Y+10, r25	; 0x0a
    153c:	ab 87       	std	Y+11, r26	; 0x0b
    153e:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	69 85       	ldd	r22, Y+9	; 0x09
    154a:	7a 85       	ldd	r23, Y+10	; 0x0a
    154c:	8b 85       	ldd	r24, Y+11	; 0x0b
    154e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1550:	0e 94 06 0b 	call	0x160c	; 0x160c <__cmpsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <main+0xd6>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9e 87       	std	Y+14, r25	; 0x0e
    155e:	8d 87       	std	Y+13, r24	; 0x0d
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <main+0x154>
	else if (__tmp > 65535)
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	69 85       	ldd	r22, Y+9	; 0x09
    156c:	7a 85       	ldd	r23, Y+10	; 0x0a
    156e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1570:	9c 85       	ldd	r25, Y+12	; 0x0c
    1572:	0e 94 21 0c 	call	0x1842	; 0x1842 <__gesf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <main+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	6d 81       	ldd	r22, Y+5	; 0x05
    1584:	7e 81       	ldd	r23, Y+6	; 0x06
    1586:	8f 81       	ldd	r24, Y+7	; 0x07
    1588:	98 85       	ldd	r25, Y+8	; 0x08
    158a:	0e 94 26 0c 	call	0x184c	; 0x184c <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 87       	std	Y+14, r25	; 0x0e
    15a0:	8d 87       	std	Y+13, r24	; 0x0d
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <main+0x136>
    15a4:	80 e9       	ldi	r24, 0x90	; 144
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	98 8b       	std	Y+16, r25	; 0x10
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ae:	98 89       	ldd	r25, Y+16	; 0x10
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <main+0x124>
    15b4:	98 8b       	std	Y+16, r25	; 0x10
    15b6:	8f 87       	std	Y+15, r24	; 0x0f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e 87       	std	Y+14, r25	; 0x0e
    15c0:	8d 87       	std	Y+13, r24	; 0x0d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c6:	89 2b       	or	r24, r25
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <main+0x118>
    15ca:	14 c0       	rjmp	.+40     	; 0x15f4 <main+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	69 85       	ldd	r22, Y+9	; 0x09
    15ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    15d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15d4:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 87       	std	Y+14, r25	; 0x0e
    15de:	8d 87       	std	Y+13, r24	; 0x0d
    15e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e4:	9a 8b       	std	Y+18, r25	; 0x12
    15e6:	89 8b       	std	Y+17, r24	; 0x11
    15e8:	89 89       	ldd	r24, Y+17	; 0x11
    15ea:	9a 89       	ldd	r25, Y+18	; 0x12
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <main+0x160>
    15f0:	9a 8b       	std	Y+18, r25	; 0x12
    15f2:	89 8b       	std	Y+17, r24	; 0x11
		_delay_ms( 100 );
		n++;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	ab 81       	ldd	r26, Y+3	; 0x03
    15fa:	bc 81       	ldd	r27, Y+4	; 0x04
    15fc:	01 96       	adiw	r24, 0x01	; 1
    15fe:	a1 1d       	adc	r26, r1
    1600:	b1 1d       	adc	r27, r1
    1602:	89 83       	std	Y+1, r24	; 0x01
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	ab 83       	std	Y+3, r26	; 0x03
    1608:	bc 83       	std	Y+4, r27	; 0x04
	}
    160a:	5c cf       	rjmp	.-328    	; 0x14c4 <main+0x38>

0000160c <__cmpsf2>:
    160c:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__fp_cmp>
    1610:	08 f4       	brcc	.+2      	; 0x1614 <__cmpsf2+0x8>
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	08 95       	ret

00001616 <__divsf3>:
    1616:	0e 94 1f 0b 	call	0x163e	; 0x163e <__divsf3x>
    161a:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_round>
    161e:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscB>
    1622:	58 f0       	brcs	.+22     	; 0x163a <__divsf3+0x24>
    1624:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__fp_pscA>
    1628:	40 f0       	brcs	.+16     	; 0x163a <__divsf3+0x24>
    162a:	29 f4       	brne	.+10     	; 0x1636 <__divsf3+0x20>
    162c:	5f 3f       	cpi	r21, 0xFF	; 255
    162e:	29 f0       	breq	.+10     	; 0x163a <__divsf3+0x24>
    1630:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_inf>
    1634:	51 11       	cpse	r21, r1
    1636:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_szero>
    163a:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_nan>

0000163e <__divsf3x>:
    163e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_split3>
    1642:	68 f3       	brcs	.-38     	; 0x161e <__divsf3+0x8>

00001644 <__divsf3_pse>:
    1644:	99 23       	and	r25, r25
    1646:	b1 f3       	breq	.-20     	; 0x1634 <__divsf3+0x1e>
    1648:	55 23       	and	r21, r21
    164a:	91 f3       	breq	.-28     	; 0x1630 <__divsf3+0x1a>
    164c:	95 1b       	sub	r25, r21
    164e:	55 0b       	sbc	r21, r21
    1650:	bb 27       	eor	r27, r27
    1652:	aa 27       	eor	r26, r26
    1654:	62 17       	cp	r22, r18
    1656:	73 07       	cpc	r23, r19
    1658:	84 07       	cpc	r24, r20
    165a:	38 f0       	brcs	.+14     	; 0x166a <__divsf3_pse+0x26>
    165c:	9f 5f       	subi	r25, 0xFF	; 255
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	22 0f       	add	r18, r18
    1662:	33 1f       	adc	r19, r19
    1664:	44 1f       	adc	r20, r20
    1666:	aa 1f       	adc	r26, r26
    1668:	a9 f3       	breq	.-22     	; 0x1654 <__divsf3_pse+0x10>
    166a:	35 d0       	rcall	.+106    	; 0x16d6 <__divsf3_pse+0x92>
    166c:	0e 2e       	mov	r0, r30
    166e:	3a f0       	brmi	.+14     	; 0x167e <__divsf3_pse+0x3a>
    1670:	e0 e8       	ldi	r30, 0x80	; 128
    1672:	32 d0       	rcall	.+100    	; 0x16d8 <__divsf3_pse+0x94>
    1674:	91 50       	subi	r25, 0x01	; 1
    1676:	50 40       	sbci	r21, 0x00	; 0
    1678:	e6 95       	lsr	r30
    167a:	00 1c       	adc	r0, r0
    167c:	ca f7       	brpl	.-14     	; 0x1670 <__divsf3_pse+0x2c>
    167e:	2b d0       	rcall	.+86     	; 0x16d6 <__divsf3_pse+0x92>
    1680:	fe 2f       	mov	r31, r30
    1682:	29 d0       	rcall	.+82     	; 0x16d6 <__divsf3_pse+0x92>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	88 1f       	adc	r24, r24
    168a:	bb 1f       	adc	r27, r27
    168c:	26 17       	cp	r18, r22
    168e:	37 07       	cpc	r19, r23
    1690:	48 07       	cpc	r20, r24
    1692:	ab 07       	cpc	r26, r27
    1694:	b0 e8       	ldi	r27, 0x80	; 128
    1696:	09 f0       	breq	.+2      	; 0x169a <__divsf3_pse+0x56>
    1698:	bb 0b       	sbc	r27, r27
    169a:	80 2d       	mov	r24, r0
    169c:	bf 01       	movw	r22, r30
    169e:	ff 27       	eor	r31, r31
    16a0:	93 58       	subi	r25, 0x83	; 131
    16a2:	5f 4f       	sbci	r21, 0xFF	; 255
    16a4:	3a f0       	brmi	.+14     	; 0x16b4 <__divsf3_pse+0x70>
    16a6:	9e 3f       	cpi	r25, 0xFE	; 254
    16a8:	51 05       	cpc	r21, r1
    16aa:	78 f0       	brcs	.+30     	; 0x16ca <__divsf3_pse+0x86>
    16ac:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_inf>
    16b0:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_szero>
    16b4:	5f 3f       	cpi	r21, 0xFF	; 255
    16b6:	e4 f3       	brlt	.-8      	; 0x16b0 <__divsf3_pse+0x6c>
    16b8:	98 3e       	cpi	r25, 0xE8	; 232
    16ba:	d4 f3       	brlt	.-12     	; 0x16b0 <__divsf3_pse+0x6c>
    16bc:	86 95       	lsr	r24
    16be:	77 95       	ror	r23
    16c0:	67 95       	ror	r22
    16c2:	b7 95       	ror	r27
    16c4:	f7 95       	ror	r31
    16c6:	9f 5f       	subi	r25, 0xFF	; 255
    16c8:	c9 f7       	brne	.-14     	; 0x16bc <__divsf3_pse+0x78>
    16ca:	88 0f       	add	r24, r24
    16cc:	91 1d       	adc	r25, r1
    16ce:	96 95       	lsr	r25
    16d0:	87 95       	ror	r24
    16d2:	97 f9       	bld	r25, 7
    16d4:	08 95       	ret
    16d6:	e1 e0       	ldi	r30, 0x01	; 1
    16d8:	66 0f       	add	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	88 1f       	adc	r24, r24
    16de:	bb 1f       	adc	r27, r27
    16e0:	62 17       	cp	r22, r18
    16e2:	73 07       	cpc	r23, r19
    16e4:	84 07       	cpc	r24, r20
    16e6:	ba 07       	cpc	r27, r26
    16e8:	20 f0       	brcs	.+8      	; 0x16f2 <__divsf3_pse+0xae>
    16ea:	62 1b       	sub	r22, r18
    16ec:	73 0b       	sbc	r23, r19
    16ee:	84 0b       	sbc	r24, r20
    16f0:	ba 0b       	sbc	r27, r26
    16f2:	ee 1f       	adc	r30, r30
    16f4:	88 f7       	brcc	.-30     	; 0x16d8 <__divsf3_pse+0x94>
    16f6:	e0 95       	com	r30
    16f8:	08 95       	ret

000016fa <__fixunssfsi>:
    16fa:	0e 94 00 0c 	call	0x1800	; 0x1800 <__fp_splitA>
    16fe:	88 f0       	brcs	.+34     	; 0x1722 <__fixunssfsi+0x28>
    1700:	9f 57       	subi	r25, 0x7F	; 127
    1702:	98 f0       	brcs	.+38     	; 0x172a <__fixunssfsi+0x30>
    1704:	b9 2f       	mov	r27, r25
    1706:	99 27       	eor	r25, r25
    1708:	b7 51       	subi	r27, 0x17	; 23
    170a:	b0 f0       	brcs	.+44     	; 0x1738 <__fixunssfsi+0x3e>
    170c:	e1 f0       	breq	.+56     	; 0x1746 <__fixunssfsi+0x4c>
    170e:	66 0f       	add	r22, r22
    1710:	77 1f       	adc	r23, r23
    1712:	88 1f       	adc	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	1a f0       	brmi	.+6      	; 0x171e <__fixunssfsi+0x24>
    1718:	ba 95       	dec	r27
    171a:	c9 f7       	brne	.-14     	; 0x170e <__fixunssfsi+0x14>
    171c:	14 c0       	rjmp	.+40     	; 0x1746 <__fixunssfsi+0x4c>
    171e:	b1 30       	cpi	r27, 0x01	; 1
    1720:	91 f0       	breq	.+36     	; 0x1746 <__fixunssfsi+0x4c>
    1722:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fp_zero>
    1726:	b1 e0       	ldi	r27, 0x01	; 1
    1728:	08 95       	ret
    172a:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <__fp_zero>
    172e:	67 2f       	mov	r22, r23
    1730:	78 2f       	mov	r23, r24
    1732:	88 27       	eor	r24, r24
    1734:	b8 5f       	subi	r27, 0xF8	; 248
    1736:	39 f0       	breq	.+14     	; 0x1746 <__fixunssfsi+0x4c>
    1738:	b9 3f       	cpi	r27, 0xF9	; 249
    173a:	cc f3       	brlt	.-14     	; 0x172e <__fixunssfsi+0x34>
    173c:	86 95       	lsr	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	b3 95       	inc	r27
    1744:	d9 f7       	brne	.-10     	; 0x173c <__fixunssfsi+0x42>
    1746:	3e f4       	brtc	.+14     	; 0x1756 <__fixunssfsi+0x5c>
    1748:	90 95       	com	r25
    174a:	80 95       	com	r24
    174c:	70 95       	com	r23
    174e:	61 95       	neg	r22
    1750:	7f 4f       	sbci	r23, 0xFF	; 255
    1752:	8f 4f       	sbci	r24, 0xFF	; 255
    1754:	9f 4f       	sbci	r25, 0xFF	; 255
    1756:	08 95       	ret

00001758 <__fp_cmp>:
    1758:	99 0f       	add	r25, r25
    175a:	00 08       	sbc	r0, r0
    175c:	55 0f       	add	r21, r21
    175e:	aa 0b       	sbc	r26, r26
    1760:	e0 e8       	ldi	r30, 0x80	; 128
    1762:	fe ef       	ldi	r31, 0xFE	; 254
    1764:	16 16       	cp	r1, r22
    1766:	17 06       	cpc	r1, r23
    1768:	e8 07       	cpc	r30, r24
    176a:	f9 07       	cpc	r31, r25
    176c:	c0 f0       	brcs	.+48     	; 0x179e <__fp_cmp+0x46>
    176e:	12 16       	cp	r1, r18
    1770:	13 06       	cpc	r1, r19
    1772:	e4 07       	cpc	r30, r20
    1774:	f5 07       	cpc	r31, r21
    1776:	98 f0       	brcs	.+38     	; 0x179e <__fp_cmp+0x46>
    1778:	62 1b       	sub	r22, r18
    177a:	73 0b       	sbc	r23, r19
    177c:	84 0b       	sbc	r24, r20
    177e:	95 0b       	sbc	r25, r21
    1780:	39 f4       	brne	.+14     	; 0x1790 <__fp_cmp+0x38>
    1782:	0a 26       	eor	r0, r26
    1784:	61 f0       	breq	.+24     	; 0x179e <__fp_cmp+0x46>
    1786:	23 2b       	or	r18, r19
    1788:	24 2b       	or	r18, r20
    178a:	25 2b       	or	r18, r21
    178c:	21 f4       	brne	.+8      	; 0x1796 <__fp_cmp+0x3e>
    178e:	08 95       	ret
    1790:	0a 26       	eor	r0, r26
    1792:	09 f4       	brne	.+2      	; 0x1796 <__fp_cmp+0x3e>
    1794:	a1 40       	sbci	r26, 0x01	; 1
    1796:	a6 95       	lsr	r26
    1798:	8f ef       	ldi	r24, 0xFF	; 255
    179a:	81 1d       	adc	r24, r1
    179c:	81 1d       	adc	r24, r1
    179e:	08 95       	ret

000017a0 <__fp_inf>:
    17a0:	97 f9       	bld	r25, 7
    17a2:	9f 67       	ori	r25, 0x7F	; 127
    17a4:	80 e8       	ldi	r24, 0x80	; 128
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	08 95       	ret

000017ac <__fp_nan>:
    17ac:	9f ef       	ldi	r25, 0xFF	; 255
    17ae:	80 ec       	ldi	r24, 0xC0	; 192
    17b0:	08 95       	ret

000017b2 <__fp_pscA>:
    17b2:	00 24       	eor	r0, r0
    17b4:	0a 94       	dec	r0
    17b6:	16 16       	cp	r1, r22
    17b8:	17 06       	cpc	r1, r23
    17ba:	18 06       	cpc	r1, r24
    17bc:	09 06       	cpc	r0, r25
    17be:	08 95       	ret

000017c0 <__fp_pscB>:
    17c0:	00 24       	eor	r0, r0
    17c2:	0a 94       	dec	r0
    17c4:	12 16       	cp	r1, r18
    17c6:	13 06       	cpc	r1, r19
    17c8:	14 06       	cpc	r1, r20
    17ca:	05 06       	cpc	r0, r21
    17cc:	08 95       	ret

000017ce <__fp_round>:
    17ce:	09 2e       	mov	r0, r25
    17d0:	03 94       	inc	r0
    17d2:	00 0c       	add	r0, r0
    17d4:	11 f4       	brne	.+4      	; 0x17da <__fp_round+0xc>
    17d6:	88 23       	and	r24, r24
    17d8:	52 f0       	brmi	.+20     	; 0x17ee <__fp_round+0x20>
    17da:	bb 0f       	add	r27, r27
    17dc:	40 f4       	brcc	.+16     	; 0x17ee <__fp_round+0x20>
    17de:	bf 2b       	or	r27, r31
    17e0:	11 f4       	brne	.+4      	; 0x17e6 <__fp_round+0x18>
    17e2:	60 ff       	sbrs	r22, 0
    17e4:	04 c0       	rjmp	.+8      	; 0x17ee <__fp_round+0x20>
    17e6:	6f 5f       	subi	r22, 0xFF	; 255
    17e8:	7f 4f       	sbci	r23, 0xFF	; 255
    17ea:	8f 4f       	sbci	r24, 0xFF	; 255
    17ec:	9f 4f       	sbci	r25, 0xFF	; 255
    17ee:	08 95       	ret

000017f0 <__fp_split3>:
    17f0:	57 fd       	sbrc	r21, 7
    17f2:	90 58       	subi	r25, 0x80	; 128
    17f4:	44 0f       	add	r20, r20
    17f6:	55 1f       	adc	r21, r21
    17f8:	59 f0       	breq	.+22     	; 0x1810 <__fp_splitA+0x10>
    17fa:	5f 3f       	cpi	r21, 0xFF	; 255
    17fc:	71 f0       	breq	.+28     	; 0x181a <__fp_splitA+0x1a>
    17fe:	47 95       	ror	r20

00001800 <__fp_splitA>:
    1800:	88 0f       	add	r24, r24
    1802:	97 fb       	bst	r25, 7
    1804:	99 1f       	adc	r25, r25
    1806:	61 f0       	breq	.+24     	; 0x1820 <__fp_splitA+0x20>
    1808:	9f 3f       	cpi	r25, 0xFF	; 255
    180a:	79 f0       	breq	.+30     	; 0x182a <__fp_splitA+0x2a>
    180c:	87 95       	ror	r24
    180e:	08 95       	ret
    1810:	12 16       	cp	r1, r18
    1812:	13 06       	cpc	r1, r19
    1814:	14 06       	cpc	r1, r20
    1816:	55 1f       	adc	r21, r21
    1818:	f2 cf       	rjmp	.-28     	; 0x17fe <__fp_split3+0xe>
    181a:	46 95       	lsr	r20
    181c:	f1 df       	rcall	.-30     	; 0x1800 <__fp_splitA>
    181e:	08 c0       	rjmp	.+16     	; 0x1830 <__fp_splitA+0x30>
    1820:	16 16       	cp	r1, r22
    1822:	17 06       	cpc	r1, r23
    1824:	18 06       	cpc	r1, r24
    1826:	99 1f       	adc	r25, r25
    1828:	f1 cf       	rjmp	.-30     	; 0x180c <__fp_splitA+0xc>
    182a:	86 95       	lsr	r24
    182c:	71 05       	cpc	r23, r1
    182e:	61 05       	cpc	r22, r1
    1830:	08 94       	sec
    1832:	08 95       	ret

00001834 <__fp_zero>:
    1834:	e8 94       	clt

00001836 <__fp_szero>:
    1836:	bb 27       	eor	r27, r27
    1838:	66 27       	eor	r22, r22
    183a:	77 27       	eor	r23, r23
    183c:	cb 01       	movw	r24, r22
    183e:	97 f9       	bld	r25, 7
    1840:	08 95       	ret

00001842 <__gesf2>:
    1842:	0e 94 ac 0b 	call	0x1758	; 0x1758 <__fp_cmp>
    1846:	08 f4       	brcc	.+2      	; 0x184a <__gesf2+0x8>
    1848:	8f ef       	ldi	r24, 0xFF	; 255
    184a:	08 95       	ret

0000184c <__mulsf3>:
    184c:	0e 94 39 0c 	call	0x1872	; 0x1872 <__mulsf3x>
    1850:	0c 94 e7 0b 	jmp	0x17ce	; 0x17ce <__fp_round>
    1854:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <__fp_pscA>
    1858:	38 f0       	brcs	.+14     	; 0x1868 <__mulsf3+0x1c>
    185a:	0e 94 e0 0b 	call	0x17c0	; 0x17c0 <__fp_pscB>
    185e:	20 f0       	brcs	.+8      	; 0x1868 <__mulsf3+0x1c>
    1860:	95 23       	and	r25, r21
    1862:	11 f0       	breq	.+4      	; 0x1868 <__mulsf3+0x1c>
    1864:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_inf>
    1868:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <__fp_nan>
    186c:	11 24       	eor	r1, r1
    186e:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_szero>

00001872 <__mulsf3x>:
    1872:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <__fp_split3>
    1876:	70 f3       	brcs	.-36     	; 0x1854 <__mulsf3+0x8>

00001878 <__mulsf3_pse>:
    1878:	95 9f       	mul	r25, r21
    187a:	c1 f3       	breq	.-16     	; 0x186c <__mulsf3+0x20>
    187c:	95 0f       	add	r25, r21
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	55 1f       	adc	r21, r21
    1882:	62 9f       	mul	r22, r18
    1884:	f0 01       	movw	r30, r0
    1886:	72 9f       	mul	r23, r18
    1888:	bb 27       	eor	r27, r27
    188a:	f0 0d       	add	r31, r0
    188c:	b1 1d       	adc	r27, r1
    188e:	63 9f       	mul	r22, r19
    1890:	aa 27       	eor	r26, r26
    1892:	f0 0d       	add	r31, r0
    1894:	b1 1d       	adc	r27, r1
    1896:	aa 1f       	adc	r26, r26
    1898:	64 9f       	mul	r22, r20
    189a:	66 27       	eor	r22, r22
    189c:	b0 0d       	add	r27, r0
    189e:	a1 1d       	adc	r26, r1
    18a0:	66 1f       	adc	r22, r22
    18a2:	82 9f       	mul	r24, r18
    18a4:	22 27       	eor	r18, r18
    18a6:	b0 0d       	add	r27, r0
    18a8:	a1 1d       	adc	r26, r1
    18aa:	62 1f       	adc	r22, r18
    18ac:	73 9f       	mul	r23, r19
    18ae:	b0 0d       	add	r27, r0
    18b0:	a1 1d       	adc	r26, r1
    18b2:	62 1f       	adc	r22, r18
    18b4:	83 9f       	mul	r24, r19
    18b6:	a0 0d       	add	r26, r0
    18b8:	61 1d       	adc	r22, r1
    18ba:	22 1f       	adc	r18, r18
    18bc:	74 9f       	mul	r23, r20
    18be:	33 27       	eor	r19, r19
    18c0:	a0 0d       	add	r26, r0
    18c2:	61 1d       	adc	r22, r1
    18c4:	23 1f       	adc	r18, r19
    18c6:	84 9f       	mul	r24, r20
    18c8:	60 0d       	add	r22, r0
    18ca:	21 1d       	adc	r18, r1
    18cc:	82 2f       	mov	r24, r18
    18ce:	76 2f       	mov	r23, r22
    18d0:	6a 2f       	mov	r22, r26
    18d2:	11 24       	eor	r1, r1
    18d4:	9f 57       	subi	r25, 0x7F	; 127
    18d6:	50 40       	sbci	r21, 0x00	; 0
    18d8:	9a f0       	brmi	.+38     	; 0x1900 <__mulsf3_pse+0x88>
    18da:	f1 f0       	breq	.+60     	; 0x1918 <__mulsf3_pse+0xa0>
    18dc:	88 23       	and	r24, r24
    18de:	4a f0       	brmi	.+18     	; 0x18f2 <__mulsf3_pse+0x7a>
    18e0:	ee 0f       	add	r30, r30
    18e2:	ff 1f       	adc	r31, r31
    18e4:	bb 1f       	adc	r27, r27
    18e6:	66 1f       	adc	r22, r22
    18e8:	77 1f       	adc	r23, r23
    18ea:	88 1f       	adc	r24, r24
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	50 40       	sbci	r21, 0x00	; 0
    18f0:	a9 f7       	brne	.-22     	; 0x18dc <__mulsf3_pse+0x64>
    18f2:	9e 3f       	cpi	r25, 0xFE	; 254
    18f4:	51 05       	cpc	r21, r1
    18f6:	80 f0       	brcs	.+32     	; 0x1918 <__mulsf3_pse+0xa0>
    18f8:	0c 94 d0 0b 	jmp	0x17a0	; 0x17a0 <__fp_inf>
    18fc:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <__fp_szero>
    1900:	5f 3f       	cpi	r21, 0xFF	; 255
    1902:	e4 f3       	brlt	.-8      	; 0x18fc <__mulsf3_pse+0x84>
    1904:	98 3e       	cpi	r25, 0xE8	; 232
    1906:	d4 f3       	brlt	.-12     	; 0x18fc <__mulsf3_pse+0x84>
    1908:	86 95       	lsr	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b7 95       	ror	r27
    1910:	f7 95       	ror	r31
    1912:	e7 95       	ror	r30
    1914:	9f 5f       	subi	r25, 0xFF	; 255
    1916:	c1 f7       	brne	.-16     	; 0x1908 <__mulsf3_pse+0x90>
    1918:	fe 2b       	or	r31, r30
    191a:	88 0f       	add	r24, r24
    191c:	91 1d       	adc	r25, r1
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	97 f9       	bld	r25, 7
    1924:	08 95       	ret

00001926 <sprintf>:
    1926:	ae e0       	ldi	r26, 0x0E	; 14
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e9 e9       	ldi	r30, 0x99	; 153
    192c:	fc e0       	ldi	r31, 0x0C	; 12
    192e:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__prologue_saves__+0x1c>
    1932:	0d 89       	ldd	r16, Y+21	; 0x15
    1934:	1e 89       	ldd	r17, Y+22	; 0x16
    1936:	86 e0       	ldi	r24, 0x06	; 6
    1938:	8c 83       	std	Y+4, r24	; 0x04
    193a:	1a 83       	std	Y+2, r17	; 0x02
    193c:	09 83       	std	Y+1, r16	; 0x01
    193e:	8f ef       	ldi	r24, 0xFF	; 255
    1940:	9f e7       	ldi	r25, 0x7F	; 127
    1942:	9e 83       	std	Y+6, r25	; 0x06
    1944:	8d 83       	std	Y+5, r24	; 0x05
    1946:	ae 01       	movw	r20, r28
    1948:	47 5e       	subi	r20, 0xE7	; 231
    194a:	5f 4f       	sbci	r21, 0xFF	; 255
    194c:	6f 89       	ldd	r22, Y+23	; 0x17
    194e:	78 8d       	ldd	r23, Y+24	; 0x18
    1950:	ce 01       	movw	r24, r28
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	0e 94 b5 0c 	call	0x196a	; 0x196a <vfprintf>
    1958:	ef 81       	ldd	r30, Y+7	; 0x07
    195a:	f8 85       	ldd	r31, Y+8	; 0x08
    195c:	e0 0f       	add	r30, r16
    195e:	f1 1f       	adc	r31, r17
    1960:	10 82       	st	Z, r1
    1962:	2e 96       	adiw	r28, 0x0e	; 14
    1964:	e4 e0       	ldi	r30, 0x04	; 4
    1966:	0c 94 70 0f 	jmp	0x1ee0	; 0x1ee0 <__epilogue_restores__+0x1c>

0000196a <vfprintf>:
    196a:	ab e0       	ldi	r26, 0x0B	; 11
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	eb eb       	ldi	r30, 0xBB	; 187
    1970:	fc e0       	ldi	r31, 0x0C	; 12
    1972:	0c 94 46 0f 	jmp	0x1e8c	; 0x1e8c <__prologue_saves__>
    1976:	6c 01       	movw	r12, r24
    1978:	7b 01       	movw	r14, r22
    197a:	8a 01       	movw	r16, r20
    197c:	fc 01       	movw	r30, r24
    197e:	17 82       	std	Z+7, r1	; 0x07
    1980:	16 82       	std	Z+6, r1	; 0x06
    1982:	83 81       	ldd	r24, Z+3	; 0x03
    1984:	81 ff       	sbrs	r24, 1
    1986:	cc c1       	rjmp	.+920    	; 0x1d20 <vfprintf+0x3b6>
    1988:	ce 01       	movw	r24, r28
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	3c 01       	movw	r6, r24
    198e:	f6 01       	movw	r30, r12
    1990:	93 81       	ldd	r25, Z+3	; 0x03
    1992:	f7 01       	movw	r30, r14
    1994:	93 fd       	sbrc	r25, 3
    1996:	85 91       	lpm	r24, Z+
    1998:	93 ff       	sbrs	r25, 3
    199a:	81 91       	ld	r24, Z+
    199c:	7f 01       	movw	r14, r30
    199e:	88 23       	and	r24, r24
    19a0:	09 f4       	brne	.+2      	; 0x19a4 <vfprintf+0x3a>
    19a2:	ba c1       	rjmp	.+884    	; 0x1d18 <vfprintf+0x3ae>
    19a4:	85 32       	cpi	r24, 0x25	; 37
    19a6:	39 f4       	brne	.+14     	; 0x19b6 <vfprintf+0x4c>
    19a8:	93 fd       	sbrc	r25, 3
    19aa:	85 91       	lpm	r24, Z+
    19ac:	93 ff       	sbrs	r25, 3
    19ae:	81 91       	ld	r24, Z+
    19b0:	7f 01       	movw	r14, r30
    19b2:	85 32       	cpi	r24, 0x25	; 37
    19b4:	29 f4       	brne	.+10     	; 0x19c0 <vfprintf+0x56>
    19b6:	b6 01       	movw	r22, r12
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    19be:	e7 cf       	rjmp	.-50     	; 0x198e <vfprintf+0x24>
    19c0:	91 2c       	mov	r9, r1
    19c2:	21 2c       	mov	r2, r1
    19c4:	31 2c       	mov	r3, r1
    19c6:	ff e1       	ldi	r31, 0x1F	; 31
    19c8:	f3 15       	cp	r31, r3
    19ca:	d8 f0       	brcs	.+54     	; 0x1a02 <vfprintf+0x98>
    19cc:	8b 32       	cpi	r24, 0x2B	; 43
    19ce:	79 f0       	breq	.+30     	; 0x19ee <vfprintf+0x84>
    19d0:	38 f4       	brcc	.+14     	; 0x19e0 <vfprintf+0x76>
    19d2:	80 32       	cpi	r24, 0x20	; 32
    19d4:	79 f0       	breq	.+30     	; 0x19f4 <vfprintf+0x8a>
    19d6:	83 32       	cpi	r24, 0x23	; 35
    19d8:	a1 f4       	brne	.+40     	; 0x1a02 <vfprintf+0x98>
    19da:	23 2d       	mov	r18, r3
    19dc:	20 61       	ori	r18, 0x10	; 16
    19de:	1d c0       	rjmp	.+58     	; 0x1a1a <vfprintf+0xb0>
    19e0:	8d 32       	cpi	r24, 0x2D	; 45
    19e2:	61 f0       	breq	.+24     	; 0x19fc <vfprintf+0x92>
    19e4:	80 33       	cpi	r24, 0x30	; 48
    19e6:	69 f4       	brne	.+26     	; 0x1a02 <vfprintf+0x98>
    19e8:	23 2d       	mov	r18, r3
    19ea:	21 60       	ori	r18, 0x01	; 1
    19ec:	16 c0       	rjmp	.+44     	; 0x1a1a <vfprintf+0xb0>
    19ee:	83 2d       	mov	r24, r3
    19f0:	82 60       	ori	r24, 0x02	; 2
    19f2:	38 2e       	mov	r3, r24
    19f4:	e3 2d       	mov	r30, r3
    19f6:	e4 60       	ori	r30, 0x04	; 4
    19f8:	3e 2e       	mov	r3, r30
    19fa:	2a c0       	rjmp	.+84     	; 0x1a50 <vfprintf+0xe6>
    19fc:	f3 2d       	mov	r31, r3
    19fe:	f8 60       	ori	r31, 0x08	; 8
    1a00:	1d c0       	rjmp	.+58     	; 0x1a3c <vfprintf+0xd2>
    1a02:	37 fc       	sbrc	r3, 7
    1a04:	2d c0       	rjmp	.+90     	; 0x1a60 <vfprintf+0xf6>
    1a06:	20 ed       	ldi	r18, 0xD0	; 208
    1a08:	28 0f       	add	r18, r24
    1a0a:	2a 30       	cpi	r18, 0x0A	; 10
    1a0c:	40 f0       	brcs	.+16     	; 0x1a1e <vfprintf+0xb4>
    1a0e:	8e 32       	cpi	r24, 0x2E	; 46
    1a10:	b9 f4       	brne	.+46     	; 0x1a40 <vfprintf+0xd6>
    1a12:	36 fc       	sbrc	r3, 6
    1a14:	81 c1       	rjmp	.+770    	; 0x1d18 <vfprintf+0x3ae>
    1a16:	23 2d       	mov	r18, r3
    1a18:	20 64       	ori	r18, 0x40	; 64
    1a1a:	32 2e       	mov	r3, r18
    1a1c:	19 c0       	rjmp	.+50     	; 0x1a50 <vfprintf+0xe6>
    1a1e:	36 fe       	sbrs	r3, 6
    1a20:	06 c0       	rjmp	.+12     	; 0x1a2e <vfprintf+0xc4>
    1a22:	8a e0       	ldi	r24, 0x0A	; 10
    1a24:	98 9e       	mul	r9, r24
    1a26:	20 0d       	add	r18, r0
    1a28:	11 24       	eor	r1, r1
    1a2a:	92 2e       	mov	r9, r18
    1a2c:	11 c0       	rjmp	.+34     	; 0x1a50 <vfprintf+0xe6>
    1a2e:	ea e0       	ldi	r30, 0x0A	; 10
    1a30:	2e 9e       	mul	r2, r30
    1a32:	20 0d       	add	r18, r0
    1a34:	11 24       	eor	r1, r1
    1a36:	22 2e       	mov	r2, r18
    1a38:	f3 2d       	mov	r31, r3
    1a3a:	f0 62       	ori	r31, 0x20	; 32
    1a3c:	3f 2e       	mov	r3, r31
    1a3e:	08 c0       	rjmp	.+16     	; 0x1a50 <vfprintf+0xe6>
    1a40:	8c 36       	cpi	r24, 0x6C	; 108
    1a42:	21 f4       	brne	.+8      	; 0x1a4c <vfprintf+0xe2>
    1a44:	83 2d       	mov	r24, r3
    1a46:	80 68       	ori	r24, 0x80	; 128
    1a48:	38 2e       	mov	r3, r24
    1a4a:	02 c0       	rjmp	.+4      	; 0x1a50 <vfprintf+0xe6>
    1a4c:	88 36       	cpi	r24, 0x68	; 104
    1a4e:	41 f4       	brne	.+16     	; 0x1a60 <vfprintf+0xf6>
    1a50:	f7 01       	movw	r30, r14
    1a52:	93 fd       	sbrc	r25, 3
    1a54:	85 91       	lpm	r24, Z+
    1a56:	93 ff       	sbrs	r25, 3
    1a58:	81 91       	ld	r24, Z+
    1a5a:	7f 01       	movw	r14, r30
    1a5c:	81 11       	cpse	r24, r1
    1a5e:	b3 cf       	rjmp	.-154    	; 0x19c6 <vfprintf+0x5c>
    1a60:	98 2f       	mov	r25, r24
    1a62:	9f 7d       	andi	r25, 0xDF	; 223
    1a64:	95 54       	subi	r25, 0x45	; 69
    1a66:	93 30       	cpi	r25, 0x03	; 3
    1a68:	28 f4       	brcc	.+10     	; 0x1a74 <vfprintf+0x10a>
    1a6a:	0c 5f       	subi	r16, 0xFC	; 252
    1a6c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6e:	9f e3       	ldi	r25, 0x3F	; 63
    1a70:	99 83       	std	Y+1, r25	; 0x01
    1a72:	0d c0       	rjmp	.+26     	; 0x1a8e <vfprintf+0x124>
    1a74:	83 36       	cpi	r24, 0x63	; 99
    1a76:	31 f0       	breq	.+12     	; 0x1a84 <vfprintf+0x11a>
    1a78:	83 37       	cpi	r24, 0x73	; 115
    1a7a:	71 f0       	breq	.+28     	; 0x1a98 <vfprintf+0x12e>
    1a7c:	83 35       	cpi	r24, 0x53	; 83
    1a7e:	09 f0       	breq	.+2      	; 0x1a82 <vfprintf+0x118>
    1a80:	59 c0       	rjmp	.+178    	; 0x1b34 <vfprintf+0x1ca>
    1a82:	21 c0       	rjmp	.+66     	; 0x1ac6 <vfprintf+0x15c>
    1a84:	f8 01       	movw	r30, r16
    1a86:	80 81       	ld	r24, Z
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	0e 5f       	subi	r16, 0xFE	; 254
    1a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a8e:	88 24       	eor	r8, r8
    1a90:	83 94       	inc	r8
    1a92:	91 2c       	mov	r9, r1
    1a94:	53 01       	movw	r10, r6
    1a96:	13 c0       	rjmp	.+38     	; 0x1abe <vfprintf+0x154>
    1a98:	28 01       	movw	r4, r16
    1a9a:	f2 e0       	ldi	r31, 0x02	; 2
    1a9c:	4f 0e       	add	r4, r31
    1a9e:	51 1c       	adc	r5, r1
    1aa0:	f8 01       	movw	r30, r16
    1aa2:	a0 80       	ld	r10, Z
    1aa4:	b1 80       	ldd	r11, Z+1	; 0x01
    1aa6:	36 fe       	sbrs	r3, 6
    1aa8:	03 c0       	rjmp	.+6      	; 0x1ab0 <vfprintf+0x146>
    1aaa:	69 2d       	mov	r22, r9
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <vfprintf+0x14a>
    1ab0:	6f ef       	ldi	r22, 0xFF	; 255
    1ab2:	7f ef       	ldi	r23, 0xFF	; 255
    1ab4:	c5 01       	movw	r24, r10
    1ab6:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <strnlen>
    1aba:	4c 01       	movw	r8, r24
    1abc:	82 01       	movw	r16, r4
    1abe:	f3 2d       	mov	r31, r3
    1ac0:	ff 77       	andi	r31, 0x7F	; 127
    1ac2:	3f 2e       	mov	r3, r31
    1ac4:	16 c0       	rjmp	.+44     	; 0x1af2 <vfprintf+0x188>
    1ac6:	28 01       	movw	r4, r16
    1ac8:	22 e0       	ldi	r18, 0x02	; 2
    1aca:	42 0e       	add	r4, r18
    1acc:	51 1c       	adc	r5, r1
    1ace:	f8 01       	movw	r30, r16
    1ad0:	a0 80       	ld	r10, Z
    1ad2:	b1 80       	ldd	r11, Z+1	; 0x01
    1ad4:	36 fe       	sbrs	r3, 6
    1ad6:	03 c0       	rjmp	.+6      	; 0x1ade <vfprintf+0x174>
    1ad8:	69 2d       	mov	r22, r9
    1ada:	70 e0       	ldi	r23, 0x00	; 0
    1adc:	02 c0       	rjmp	.+4      	; 0x1ae2 <vfprintf+0x178>
    1ade:	6f ef       	ldi	r22, 0xFF	; 255
    1ae0:	7f ef       	ldi	r23, 0xFF	; 255
    1ae2:	c5 01       	movw	r24, r10
    1ae4:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <strnlen_P>
    1ae8:	4c 01       	movw	r8, r24
    1aea:	f3 2d       	mov	r31, r3
    1aec:	f0 68       	ori	r31, 0x80	; 128
    1aee:	3f 2e       	mov	r3, r31
    1af0:	82 01       	movw	r16, r4
    1af2:	33 fc       	sbrc	r3, 3
    1af4:	1b c0       	rjmp	.+54     	; 0x1b2c <vfprintf+0x1c2>
    1af6:	82 2d       	mov	r24, r2
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	88 16       	cp	r8, r24
    1afc:	99 06       	cpc	r9, r25
    1afe:	b0 f4       	brcc	.+44     	; 0x1b2c <vfprintf+0x1c2>
    1b00:	b6 01       	movw	r22, r12
    1b02:	80 e2       	ldi	r24, 0x20	; 32
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1b0a:	2a 94       	dec	r2
    1b0c:	f4 cf       	rjmp	.-24     	; 0x1af6 <vfprintf+0x18c>
    1b0e:	f5 01       	movw	r30, r10
    1b10:	37 fc       	sbrc	r3, 7
    1b12:	85 91       	lpm	r24, Z+
    1b14:	37 fe       	sbrs	r3, 7
    1b16:	81 91       	ld	r24, Z+
    1b18:	5f 01       	movw	r10, r30
    1b1a:	b6 01       	movw	r22, r12
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1b22:	21 10       	cpse	r2, r1
    1b24:	2a 94       	dec	r2
    1b26:	21 e0       	ldi	r18, 0x01	; 1
    1b28:	82 1a       	sub	r8, r18
    1b2a:	91 08       	sbc	r9, r1
    1b2c:	81 14       	cp	r8, r1
    1b2e:	91 04       	cpc	r9, r1
    1b30:	71 f7       	brne	.-36     	; 0x1b0e <vfprintf+0x1a4>
    1b32:	e8 c0       	rjmp	.+464    	; 0x1d04 <vfprintf+0x39a>
    1b34:	84 36       	cpi	r24, 0x64	; 100
    1b36:	11 f0       	breq	.+4      	; 0x1b3c <vfprintf+0x1d2>
    1b38:	89 36       	cpi	r24, 0x69	; 105
    1b3a:	41 f5       	brne	.+80     	; 0x1b8c <vfprintf+0x222>
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	37 fe       	sbrs	r3, 7
    1b40:	07 c0       	rjmp	.+14     	; 0x1b50 <vfprintf+0x1e6>
    1b42:	60 81       	ld	r22, Z
    1b44:	71 81       	ldd	r23, Z+1	; 0x01
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	0c 5f       	subi	r16, 0xFC	; 252
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	08 c0       	rjmp	.+16     	; 0x1b60 <vfprintf+0x1f6>
    1b50:	60 81       	ld	r22, Z
    1b52:	71 81       	ldd	r23, Z+1	; 0x01
    1b54:	07 2e       	mov	r0, r23
    1b56:	00 0c       	add	r0, r0
    1b58:	88 0b       	sbc	r24, r24
    1b5a:	99 0b       	sbc	r25, r25
    1b5c:	0e 5f       	subi	r16, 0xFE	; 254
    1b5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b60:	f3 2d       	mov	r31, r3
    1b62:	ff 76       	andi	r31, 0x6F	; 111
    1b64:	3f 2e       	mov	r3, r31
    1b66:	97 ff       	sbrs	r25, 7
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <vfprintf+0x212>
    1b6a:	90 95       	com	r25
    1b6c:	80 95       	com	r24
    1b6e:	70 95       	com	r23
    1b70:	61 95       	neg	r22
    1b72:	7f 4f       	sbci	r23, 0xFF	; 255
    1b74:	8f 4f       	sbci	r24, 0xFF	; 255
    1b76:	9f 4f       	sbci	r25, 0xFF	; 255
    1b78:	f0 68       	ori	r31, 0x80	; 128
    1b7a:	3f 2e       	mov	r3, r31
    1b7c:	2a e0       	ldi	r18, 0x0A	; 10
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	a3 01       	movw	r20, r6
    1b82:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    1b86:	88 2e       	mov	r8, r24
    1b88:	86 18       	sub	r8, r6
    1b8a:	45 c0       	rjmp	.+138    	; 0x1c16 <vfprintf+0x2ac>
    1b8c:	85 37       	cpi	r24, 0x75	; 117
    1b8e:	31 f4       	brne	.+12     	; 0x1b9c <vfprintf+0x232>
    1b90:	23 2d       	mov	r18, r3
    1b92:	2f 7e       	andi	r18, 0xEF	; 239
    1b94:	b2 2e       	mov	r11, r18
    1b96:	2a e0       	ldi	r18, 0x0A	; 10
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	25 c0       	rjmp	.+74     	; 0x1be6 <vfprintf+0x27c>
    1b9c:	93 2d       	mov	r25, r3
    1b9e:	99 7f       	andi	r25, 0xF9	; 249
    1ba0:	b9 2e       	mov	r11, r25
    1ba2:	8f 36       	cpi	r24, 0x6F	; 111
    1ba4:	c1 f0       	breq	.+48     	; 0x1bd6 <vfprintf+0x26c>
    1ba6:	18 f4       	brcc	.+6      	; 0x1bae <vfprintf+0x244>
    1ba8:	88 35       	cpi	r24, 0x58	; 88
    1baa:	79 f0       	breq	.+30     	; 0x1bca <vfprintf+0x260>
    1bac:	b5 c0       	rjmp	.+362    	; 0x1d18 <vfprintf+0x3ae>
    1bae:	80 37       	cpi	r24, 0x70	; 112
    1bb0:	19 f0       	breq	.+6      	; 0x1bb8 <vfprintf+0x24e>
    1bb2:	88 37       	cpi	r24, 0x78	; 120
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <vfprintf+0x254>
    1bb6:	b0 c0       	rjmp	.+352    	; 0x1d18 <vfprintf+0x3ae>
    1bb8:	e9 2f       	mov	r30, r25
    1bba:	e0 61       	ori	r30, 0x10	; 16
    1bbc:	be 2e       	mov	r11, r30
    1bbe:	b4 fe       	sbrs	r11, 4
    1bc0:	0d c0       	rjmp	.+26     	; 0x1bdc <vfprintf+0x272>
    1bc2:	fb 2d       	mov	r31, r11
    1bc4:	f4 60       	ori	r31, 0x04	; 4
    1bc6:	bf 2e       	mov	r11, r31
    1bc8:	09 c0       	rjmp	.+18     	; 0x1bdc <vfprintf+0x272>
    1bca:	34 fe       	sbrs	r3, 4
    1bcc:	0a c0       	rjmp	.+20     	; 0x1be2 <vfprintf+0x278>
    1bce:	29 2f       	mov	r18, r25
    1bd0:	26 60       	ori	r18, 0x06	; 6
    1bd2:	b2 2e       	mov	r11, r18
    1bd4:	06 c0       	rjmp	.+12     	; 0x1be2 <vfprintf+0x278>
    1bd6:	28 e0       	ldi	r18, 0x08	; 8
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	05 c0       	rjmp	.+10     	; 0x1be6 <vfprintf+0x27c>
    1bdc:	20 e1       	ldi	r18, 0x10	; 16
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <vfprintf+0x27c>
    1be2:	20 e1       	ldi	r18, 0x10	; 16
    1be4:	32 e0       	ldi	r19, 0x02	; 2
    1be6:	f8 01       	movw	r30, r16
    1be8:	b7 fe       	sbrs	r11, 7
    1bea:	07 c0       	rjmp	.+14     	; 0x1bfa <vfprintf+0x290>
    1bec:	60 81       	ld	r22, Z
    1bee:	71 81       	ldd	r23, Z+1	; 0x01
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	93 81       	ldd	r25, Z+3	; 0x03
    1bf4:	0c 5f       	subi	r16, 0xFC	; 252
    1bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    1bf8:	06 c0       	rjmp	.+12     	; 0x1c06 <vfprintf+0x29c>
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	0e 5f       	subi	r16, 0xFE	; 254
    1c04:	1f 4f       	sbci	r17, 0xFF	; 255
    1c06:	a3 01       	movw	r20, r6
    1c08:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <__ultoa_invert>
    1c0c:	88 2e       	mov	r8, r24
    1c0e:	86 18       	sub	r8, r6
    1c10:	fb 2d       	mov	r31, r11
    1c12:	ff 77       	andi	r31, 0x7F	; 127
    1c14:	3f 2e       	mov	r3, r31
    1c16:	36 fe       	sbrs	r3, 6
    1c18:	0d c0       	rjmp	.+26     	; 0x1c34 <vfprintf+0x2ca>
    1c1a:	23 2d       	mov	r18, r3
    1c1c:	2e 7f       	andi	r18, 0xFE	; 254
    1c1e:	a2 2e       	mov	r10, r18
    1c20:	89 14       	cp	r8, r9
    1c22:	58 f4       	brcc	.+22     	; 0x1c3a <vfprintf+0x2d0>
    1c24:	34 fe       	sbrs	r3, 4
    1c26:	0b c0       	rjmp	.+22     	; 0x1c3e <vfprintf+0x2d4>
    1c28:	32 fc       	sbrc	r3, 2
    1c2a:	09 c0       	rjmp	.+18     	; 0x1c3e <vfprintf+0x2d4>
    1c2c:	83 2d       	mov	r24, r3
    1c2e:	8e 7e       	andi	r24, 0xEE	; 238
    1c30:	a8 2e       	mov	r10, r24
    1c32:	05 c0       	rjmp	.+10     	; 0x1c3e <vfprintf+0x2d4>
    1c34:	b8 2c       	mov	r11, r8
    1c36:	a3 2c       	mov	r10, r3
    1c38:	03 c0       	rjmp	.+6      	; 0x1c40 <vfprintf+0x2d6>
    1c3a:	b8 2c       	mov	r11, r8
    1c3c:	01 c0       	rjmp	.+2      	; 0x1c40 <vfprintf+0x2d6>
    1c3e:	b9 2c       	mov	r11, r9
    1c40:	a4 fe       	sbrs	r10, 4
    1c42:	0f c0       	rjmp	.+30     	; 0x1c62 <vfprintf+0x2f8>
    1c44:	fe 01       	movw	r30, r28
    1c46:	e8 0d       	add	r30, r8
    1c48:	f1 1d       	adc	r31, r1
    1c4a:	80 81       	ld	r24, Z
    1c4c:	80 33       	cpi	r24, 0x30	; 48
    1c4e:	21 f4       	brne	.+8      	; 0x1c58 <vfprintf+0x2ee>
    1c50:	9a 2d       	mov	r25, r10
    1c52:	99 7e       	andi	r25, 0xE9	; 233
    1c54:	a9 2e       	mov	r10, r25
    1c56:	09 c0       	rjmp	.+18     	; 0x1c6a <vfprintf+0x300>
    1c58:	a2 fe       	sbrs	r10, 2
    1c5a:	06 c0       	rjmp	.+12     	; 0x1c68 <vfprintf+0x2fe>
    1c5c:	b3 94       	inc	r11
    1c5e:	b3 94       	inc	r11
    1c60:	04 c0       	rjmp	.+8      	; 0x1c6a <vfprintf+0x300>
    1c62:	8a 2d       	mov	r24, r10
    1c64:	86 78       	andi	r24, 0x86	; 134
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <vfprintf+0x300>
    1c68:	b3 94       	inc	r11
    1c6a:	a3 fc       	sbrc	r10, 3
    1c6c:	11 c0       	rjmp	.+34     	; 0x1c90 <vfprintf+0x326>
    1c6e:	a0 fe       	sbrs	r10, 0
    1c70:	06 c0       	rjmp	.+12     	; 0x1c7e <vfprintf+0x314>
    1c72:	b2 14       	cp	r11, r2
    1c74:	88 f4       	brcc	.+34     	; 0x1c98 <vfprintf+0x32e>
    1c76:	28 0c       	add	r2, r8
    1c78:	92 2c       	mov	r9, r2
    1c7a:	9b 18       	sub	r9, r11
    1c7c:	0e c0       	rjmp	.+28     	; 0x1c9a <vfprintf+0x330>
    1c7e:	b2 14       	cp	r11, r2
    1c80:	60 f4       	brcc	.+24     	; 0x1c9a <vfprintf+0x330>
    1c82:	b6 01       	movw	r22, r12
    1c84:	80 e2       	ldi	r24, 0x20	; 32
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1c8c:	b3 94       	inc	r11
    1c8e:	f7 cf       	rjmp	.-18     	; 0x1c7e <vfprintf+0x314>
    1c90:	b2 14       	cp	r11, r2
    1c92:	18 f4       	brcc	.+6      	; 0x1c9a <vfprintf+0x330>
    1c94:	2b 18       	sub	r2, r11
    1c96:	02 c0       	rjmp	.+4      	; 0x1c9c <vfprintf+0x332>
    1c98:	98 2c       	mov	r9, r8
    1c9a:	21 2c       	mov	r2, r1
    1c9c:	a4 fe       	sbrs	r10, 4
    1c9e:	10 c0       	rjmp	.+32     	; 0x1cc0 <vfprintf+0x356>
    1ca0:	b6 01       	movw	r22, r12
    1ca2:	80 e3       	ldi	r24, 0x30	; 48
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1caa:	a2 fe       	sbrs	r10, 2
    1cac:	17 c0       	rjmp	.+46     	; 0x1cdc <vfprintf+0x372>
    1cae:	a1 fc       	sbrc	r10, 1
    1cb0:	03 c0       	rjmp	.+6      	; 0x1cb8 <vfprintf+0x34e>
    1cb2:	88 e7       	ldi	r24, 0x78	; 120
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <vfprintf+0x352>
    1cb8:	88 e5       	ldi	r24, 0x58	; 88
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	b6 01       	movw	r22, r12
    1cbe:	0c c0       	rjmp	.+24     	; 0x1cd8 <vfprintf+0x36e>
    1cc0:	8a 2d       	mov	r24, r10
    1cc2:	86 78       	andi	r24, 0x86	; 134
    1cc4:	59 f0       	breq	.+22     	; 0x1cdc <vfprintf+0x372>
    1cc6:	a1 fe       	sbrs	r10, 1
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <vfprintf+0x364>
    1cca:	8b e2       	ldi	r24, 0x2B	; 43
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <vfprintf+0x366>
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	a7 fc       	sbrc	r10, 7
    1cd2:	8d e2       	ldi	r24, 0x2D	; 45
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1cdc:	89 14       	cp	r8, r9
    1cde:	38 f4       	brcc	.+14     	; 0x1cee <vfprintf+0x384>
    1ce0:	b6 01       	movw	r22, r12
    1ce2:	80 e3       	ldi	r24, 0x30	; 48
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1cea:	9a 94       	dec	r9
    1cec:	f7 cf       	rjmp	.-18     	; 0x1cdc <vfprintf+0x372>
    1cee:	8a 94       	dec	r8
    1cf0:	f3 01       	movw	r30, r6
    1cf2:	e8 0d       	add	r30, r8
    1cf4:	f1 1d       	adc	r31, r1
    1cf6:	80 81       	ld	r24, Z
    1cf8:	b6 01       	movw	r22, r12
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1d00:	81 10       	cpse	r8, r1
    1d02:	f5 cf       	rjmp	.-22     	; 0x1cee <vfprintf+0x384>
    1d04:	22 20       	and	r2, r2
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <vfprintf+0x3a0>
    1d08:	42 ce       	rjmp	.-892    	; 0x198e <vfprintf+0x24>
    1d0a:	b6 01       	movw	r22, r12
    1d0c:	80 e2       	ldi	r24, 0x20	; 32
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <fputc>
    1d14:	2a 94       	dec	r2
    1d16:	f6 cf       	rjmp	.-20     	; 0x1d04 <vfprintf+0x39a>
    1d18:	f6 01       	movw	r30, r12
    1d1a:	86 81       	ldd	r24, Z+6	; 0x06
    1d1c:	97 81       	ldd	r25, Z+7	; 0x07
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <vfprintf+0x3ba>
    1d20:	8f ef       	ldi	r24, 0xFF	; 255
    1d22:	9f ef       	ldi	r25, 0xFF	; 255
    1d24:	2b 96       	adiw	r28, 0x0b	; 11
    1d26:	e2 e1       	ldi	r30, 0x12	; 18
    1d28:	0c 94 62 0f 	jmp	0x1ec4	; 0x1ec4 <__epilogue_restores__>

00001d2c <strnlen_P>:
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	05 90       	lpm	r0, Z+
    1d30:	61 50       	subi	r22, 0x01	; 1
    1d32:	70 40       	sbci	r23, 0x00	; 0
    1d34:	01 10       	cpse	r0, r1
    1d36:	d8 f7       	brcc	.-10     	; 0x1d2e <strnlen_P+0x2>
    1d38:	80 95       	com	r24
    1d3a:	90 95       	com	r25
    1d3c:	8e 0f       	add	r24, r30
    1d3e:	9f 1f       	adc	r25, r31
    1d40:	08 95       	ret

00001d42 <strnlen>:
    1d42:	fc 01       	movw	r30, r24
    1d44:	61 50       	subi	r22, 0x01	; 1
    1d46:	70 40       	sbci	r23, 0x00	; 0
    1d48:	01 90       	ld	r0, Z+
    1d4a:	01 10       	cpse	r0, r1
    1d4c:	d8 f7       	brcc	.-10     	; 0x1d44 <strnlen+0x2>
    1d4e:	80 95       	com	r24
    1d50:	90 95       	com	r25
    1d52:	8e 0f       	add	r24, r30
    1d54:	9f 1f       	adc	r25, r31
    1d56:	08 95       	ret

00001d58 <fputc>:
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	fb 01       	movw	r30, r22
    1d62:	23 81       	ldd	r18, Z+3	; 0x03
    1d64:	21 fd       	sbrc	r18, 1
    1d66:	03 c0       	rjmp	.+6      	; 0x1d6e <fputc+0x16>
    1d68:	8f ef       	ldi	r24, 0xFF	; 255
    1d6a:	9f ef       	ldi	r25, 0xFF	; 255
    1d6c:	2c c0       	rjmp	.+88     	; 0x1dc6 <fputc+0x6e>
    1d6e:	22 ff       	sbrs	r18, 2
    1d70:	16 c0       	rjmp	.+44     	; 0x1d9e <fputc+0x46>
    1d72:	46 81       	ldd	r20, Z+6	; 0x06
    1d74:	57 81       	ldd	r21, Z+7	; 0x07
    1d76:	24 81       	ldd	r18, Z+4	; 0x04
    1d78:	35 81       	ldd	r19, Z+5	; 0x05
    1d7a:	42 17       	cp	r20, r18
    1d7c:	53 07       	cpc	r21, r19
    1d7e:	44 f4       	brge	.+16     	; 0x1d90 <fputc+0x38>
    1d80:	a0 81       	ld	r26, Z
    1d82:	b1 81       	ldd	r27, Z+1	; 0x01
    1d84:	9d 01       	movw	r18, r26
    1d86:	2f 5f       	subi	r18, 0xFF	; 255
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	31 83       	std	Z+1, r19	; 0x01
    1d8c:	20 83       	st	Z, r18
    1d8e:	8c 93       	st	X, r24
    1d90:	26 81       	ldd	r18, Z+6	; 0x06
    1d92:	37 81       	ldd	r19, Z+7	; 0x07
    1d94:	2f 5f       	subi	r18, 0xFF	; 255
    1d96:	3f 4f       	sbci	r19, 0xFF	; 255
    1d98:	37 83       	std	Z+7, r19	; 0x07
    1d9a:	26 83       	std	Z+6, r18	; 0x06
    1d9c:	14 c0       	rjmp	.+40     	; 0x1dc6 <fputc+0x6e>
    1d9e:	8b 01       	movw	r16, r22
    1da0:	ec 01       	movw	r28, r24
    1da2:	fb 01       	movw	r30, r22
    1da4:	00 84       	ldd	r0, Z+8	; 0x08
    1da6:	f1 85       	ldd	r31, Z+9	; 0x09
    1da8:	e0 2d       	mov	r30, r0
    1daa:	09 95       	icall
    1dac:	89 2b       	or	r24, r25
    1dae:	e1 f6       	brne	.-72     	; 0x1d68 <fputc+0x10>
    1db0:	d8 01       	movw	r26, r16
    1db2:	16 96       	adiw	r26, 0x06	; 6
    1db4:	8d 91       	ld	r24, X+
    1db6:	9c 91       	ld	r25, X
    1db8:	17 97       	sbiw	r26, 0x07	; 7
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	17 96       	adiw	r26, 0x07	; 7
    1dbe:	9c 93       	st	X, r25
    1dc0:	8e 93       	st	-X, r24
    1dc2:	16 97       	sbiw	r26, 0x06	; 6
    1dc4:	ce 01       	movw	r24, r28
    1dc6:	df 91       	pop	r29
    1dc8:	cf 91       	pop	r28
    1dca:	1f 91       	pop	r17
    1dcc:	0f 91       	pop	r16
    1dce:	08 95       	ret

00001dd0 <__ultoa_invert>:
    1dd0:	fa 01       	movw	r30, r20
    1dd2:	aa 27       	eor	r26, r26
    1dd4:	28 30       	cpi	r18, 0x08	; 8
    1dd6:	51 f1       	breq	.+84     	; 0x1e2c <__ultoa_invert+0x5c>
    1dd8:	20 31       	cpi	r18, 0x10	; 16
    1dda:	81 f1       	breq	.+96     	; 0x1e3c <__ultoa_invert+0x6c>
    1ddc:	e8 94       	clt
    1dde:	6f 93       	push	r22
    1de0:	6e 7f       	andi	r22, 0xFE	; 254
    1de2:	6e 5f       	subi	r22, 0xFE	; 254
    1de4:	7f 4f       	sbci	r23, 0xFF	; 255
    1de6:	8f 4f       	sbci	r24, 0xFF	; 255
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	af 4f       	sbci	r26, 0xFF	; 255
    1dec:	b1 e0       	ldi	r27, 0x01	; 1
    1dee:	3e d0       	rcall	.+124    	; 0x1e6c <__ultoa_invert+0x9c>
    1df0:	b4 e0       	ldi	r27, 0x04	; 4
    1df2:	3c d0       	rcall	.+120    	; 0x1e6c <__ultoa_invert+0x9c>
    1df4:	67 0f       	add	r22, r23
    1df6:	78 1f       	adc	r23, r24
    1df8:	89 1f       	adc	r24, r25
    1dfa:	9a 1f       	adc	r25, r26
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	68 0f       	add	r22, r24
    1e00:	79 1f       	adc	r23, r25
    1e02:	8a 1f       	adc	r24, r26
    1e04:	91 1d       	adc	r25, r1
    1e06:	a1 1d       	adc	r26, r1
    1e08:	6a 0f       	add	r22, r26
    1e0a:	71 1d       	adc	r23, r1
    1e0c:	81 1d       	adc	r24, r1
    1e0e:	91 1d       	adc	r25, r1
    1e10:	a1 1d       	adc	r26, r1
    1e12:	20 d0       	rcall	.+64     	; 0x1e54 <__ultoa_invert+0x84>
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <__ultoa_invert+0x48>
    1e16:	68 94       	set
    1e18:	3f 91       	pop	r19
    1e1a:	2a e0       	ldi	r18, 0x0A	; 10
    1e1c:	26 9f       	mul	r18, r22
    1e1e:	11 24       	eor	r1, r1
    1e20:	30 19       	sub	r19, r0
    1e22:	30 5d       	subi	r19, 0xD0	; 208
    1e24:	31 93       	st	Z+, r19
    1e26:	de f6       	brtc	.-74     	; 0x1dde <__ultoa_invert+0xe>
    1e28:	cf 01       	movw	r24, r30
    1e2a:	08 95       	ret
    1e2c:	46 2f       	mov	r20, r22
    1e2e:	47 70       	andi	r20, 0x07	; 7
    1e30:	40 5d       	subi	r20, 0xD0	; 208
    1e32:	41 93       	st	Z+, r20
    1e34:	b3 e0       	ldi	r27, 0x03	; 3
    1e36:	0f d0       	rcall	.+30     	; 0x1e56 <__ultoa_invert+0x86>
    1e38:	c9 f7       	brne	.-14     	; 0x1e2c <__ultoa_invert+0x5c>
    1e3a:	f6 cf       	rjmp	.-20     	; 0x1e28 <__ultoa_invert+0x58>
    1e3c:	46 2f       	mov	r20, r22
    1e3e:	4f 70       	andi	r20, 0x0F	; 15
    1e40:	40 5d       	subi	r20, 0xD0	; 208
    1e42:	4a 33       	cpi	r20, 0x3A	; 58
    1e44:	18 f0       	brcs	.+6      	; 0x1e4c <__ultoa_invert+0x7c>
    1e46:	49 5d       	subi	r20, 0xD9	; 217
    1e48:	31 fd       	sbrc	r19, 1
    1e4a:	40 52       	subi	r20, 0x20	; 32
    1e4c:	41 93       	st	Z+, r20
    1e4e:	02 d0       	rcall	.+4      	; 0x1e54 <__ultoa_invert+0x84>
    1e50:	a9 f7       	brne	.-22     	; 0x1e3c <__ultoa_invert+0x6c>
    1e52:	ea cf       	rjmp	.-44     	; 0x1e28 <__ultoa_invert+0x58>
    1e54:	b4 e0       	ldi	r27, 0x04	; 4
    1e56:	a6 95       	lsr	r26
    1e58:	97 95       	ror	r25
    1e5a:	87 95       	ror	r24
    1e5c:	77 95       	ror	r23
    1e5e:	67 95       	ror	r22
    1e60:	ba 95       	dec	r27
    1e62:	c9 f7       	brne	.-14     	; 0x1e56 <__ultoa_invert+0x86>
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	61 05       	cpc	r22, r1
    1e68:	71 05       	cpc	r23, r1
    1e6a:	08 95       	ret
    1e6c:	9b 01       	movw	r18, r22
    1e6e:	ac 01       	movw	r20, r24
    1e70:	0a 2e       	mov	r0, r26
    1e72:	06 94       	lsr	r0
    1e74:	57 95       	ror	r21
    1e76:	47 95       	ror	r20
    1e78:	37 95       	ror	r19
    1e7a:	27 95       	ror	r18
    1e7c:	ba 95       	dec	r27
    1e7e:	c9 f7       	brne	.-14     	; 0x1e72 <__ultoa_invert+0xa2>
    1e80:	62 0f       	add	r22, r18
    1e82:	73 1f       	adc	r23, r19
    1e84:	84 1f       	adc	r24, r20
    1e86:	95 1f       	adc	r25, r21
    1e88:	a0 1d       	adc	r26, r0
    1e8a:	08 95       	ret

00001e8c <__prologue_saves__>:
    1e8c:	2f 92       	push	r2
    1e8e:	3f 92       	push	r3
    1e90:	4f 92       	push	r4
    1e92:	5f 92       	push	r5
    1e94:	6f 92       	push	r6
    1e96:	7f 92       	push	r7
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	cf 92       	push	r12
    1ea2:	df 92       	push	r13
    1ea4:	ef 92       	push	r14
    1ea6:	ff 92       	push	r15
    1ea8:	0f 93       	push	r16
    1eaa:	1f 93       	push	r17
    1eac:	cf 93       	push	r28
    1eae:	df 93       	push	r29
    1eb0:	cd b7       	in	r28, 0x3d	; 61
    1eb2:	de b7       	in	r29, 0x3e	; 62
    1eb4:	ca 1b       	sub	r28, r26
    1eb6:	db 0b       	sbc	r29, r27
    1eb8:	0f b6       	in	r0, 0x3f	; 63
    1eba:	f8 94       	cli
    1ebc:	de bf       	out	0x3e, r29	; 62
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	cd bf       	out	0x3d, r28	; 61
    1ec2:	09 94       	ijmp

00001ec4 <__epilogue_restores__>:
    1ec4:	2a 88       	ldd	r2, Y+18	; 0x12
    1ec6:	39 88       	ldd	r3, Y+17	; 0x11
    1ec8:	48 88       	ldd	r4, Y+16	; 0x10
    1eca:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ecc:	6e 84       	ldd	r6, Y+14	; 0x0e
    1ece:	7d 84       	ldd	r7, Y+13	; 0x0d
    1ed0:	8c 84       	ldd	r8, Y+12	; 0x0c
    1ed2:	9b 84       	ldd	r9, Y+11	; 0x0b
    1ed4:	aa 84       	ldd	r10, Y+10	; 0x0a
    1ed6:	b9 84       	ldd	r11, Y+9	; 0x09
    1ed8:	c8 84       	ldd	r12, Y+8	; 0x08
    1eda:	df 80       	ldd	r13, Y+7	; 0x07
    1edc:	ee 80       	ldd	r14, Y+6	; 0x06
    1ede:	fd 80       	ldd	r15, Y+5	; 0x05
    1ee0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ee2:	1b 81       	ldd	r17, Y+3	; 0x03
    1ee4:	aa 81       	ldd	r26, Y+2	; 0x02
    1ee6:	b9 81       	ldd	r27, Y+1	; 0x01
    1ee8:	ce 0f       	add	r28, r30
    1eea:	d1 1d       	adc	r29, r1
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	ed 01       	movw	r28, r26
    1ef8:	08 95       	ret

00001efa <_exit>:
    1efa:	f8 94       	cli

00001efc <__stop_program>:
    1efc:	ff cf       	rjmp	.-2      	; 0x1efc <__stop_program>
