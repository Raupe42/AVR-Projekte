
MultitaskingMitOCR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000176  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006b4  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000628  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000238  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000363  00000000  00000000  000011e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  00001543  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 5f 00 	call	0xbe	; 0xbe <main>
  88:	0c 94 b9 00 	jmp	0x172	; 0x172 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:
#define PS1024		5

volatile uint16_t t_ms = 0;

ISR (TIMER0_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
	t_ms++;
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  ac:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  b0:	9f 91       	pop	r25
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <main>:

int main(void)
{
   TCCR0B |= PS64;	//250 tiks je ms
  be:	85 b5       	in	r24, 0x25	; 37
  c0:	83 60       	ori	r24, 0x03	; 3
  c2:	85 bd       	out	0x25, r24	; 37
   TCCR0A |= (1<<WGM01); //CTC Modus
  c4:	84 b5       	in	r24, 0x24	; 36
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	84 bd       	out	0x24, r24	; 36
   OCR0A = 249; //Comparematch bei 249 -> Event je ms
  ca:	89 ef       	ldi	r24, 0xF9	; 249
  cc:	87 bd       	out	0x27, r24	; 39
   TIMSK0 |= (1<<OCIE0A); //Interrupt des OCR aktiv
  ce:	ee e6       	ldi	r30, 0x6E	; 110
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	80 83       	st	Z, r24
   sei();
  d8:	78 94       	sei
   DDRD = ~0;
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	8a b9       	out	0x0a, r24	; 10

    while (1) 
    {
		if (!(t_ms % 80))
  de:	f0 e5       	ldi	r31, 0x50	; 80
			PORTD ^= (1 << 3);
  e0:	c8 e0       	ldi	r28, 0x08	; 8
		if (!(t_ms % 100))
  e2:	e4 e6       	ldi	r30, 0x64	; 100
   sei();
   DDRD = ~0;

    while (1) 
    {
		if (!(t_ms % 80))
  e4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
  e8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
  ec:	9a 01       	movw	r18, r20
  ee:	ad ec       	ldi	r26, 0xCD	; 205
  f0:	bc ec       	ldi	r27, 0xCC	; 204
  f2:	0e 94 aa 00 	call	0x154	; 0x154 <__umulhisi3>
  f6:	00 24       	eor	r0, r0
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	00 1c       	adc	r0, r0
  fe:	88 0f       	add	r24, r24
 100:	99 1f       	adc	r25, r25
 102:	00 1c       	adc	r0, r0
 104:	89 2f       	mov	r24, r25
 106:	90 2d       	mov	r25, r0
 108:	f8 9f       	mul	r31, r24
 10a:	90 01       	movw	r18, r0
 10c:	f9 9f       	mul	r31, r25
 10e:	30 0d       	add	r19, r0
 110:	11 24       	eor	r1, r1
 112:	42 17       	cp	r20, r18
 114:	53 07       	cpc	r21, r19
 116:	19 f4       	brne	.+6      	; 0x11e <main+0x60>
			PORTD ^= (1 << 3);
 118:	8b b1       	in	r24, 0x0b	; 11
 11a:	8c 27       	eor	r24, r28
 11c:	8b b9       	out	0x0b, r24	; 11
		if (!(t_ms % 100))
 11e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <_edata>
 122:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <_edata+0x1>
 126:	9a 01       	movw	r18, r20
 128:	36 95       	lsr	r19
 12a:	27 95       	ror	r18
 12c:	36 95       	lsr	r19
 12e:	27 95       	ror	r18
 130:	ab e7       	ldi	r26, 0x7B	; 123
 132:	b4 e1       	ldi	r27, 0x14	; 20
 134:	0e 94 aa 00 	call	0x154	; 0x154 <__umulhisi3>
 138:	96 95       	lsr	r25
 13a:	87 95       	ror	r24
 13c:	e8 9f       	mul	r30, r24
 13e:	90 01       	movw	r18, r0
 140:	e9 9f       	mul	r30, r25
 142:	30 0d       	add	r19, r0
 144:	11 24       	eor	r1, r1
 146:	42 17       	cp	r20, r18
 148:	53 07       	cpc	r21, r19
 14a:	61 f6       	brne	.-104    	; 0xe4 <main+0x26>
			PORTD ^= (1 << 7);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	80 58       	subi	r24, 0x80	; 128
 150:	8b b9       	out	0x0b, r24	; 11
 152:	c8 cf       	rjmp	.-112    	; 0xe4 <main+0x26>

00000154 <__umulhisi3>:
 154:	a2 9f       	mul	r26, r18
 156:	b0 01       	movw	r22, r0
 158:	b3 9f       	mul	r27, r19
 15a:	c0 01       	movw	r24, r0
 15c:	a3 9f       	mul	r26, r19
 15e:	70 0d       	add	r23, r0
 160:	81 1d       	adc	r24, r1
 162:	11 24       	eor	r1, r1
 164:	91 1d       	adc	r25, r1
 166:	b2 9f       	mul	r27, r18
 168:	70 0d       	add	r23, r0
 16a:	81 1d       	adc	r24, r1
 16c:	11 24       	eor	r1, r1
 16e:	91 1d       	adc	r25, r1
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
