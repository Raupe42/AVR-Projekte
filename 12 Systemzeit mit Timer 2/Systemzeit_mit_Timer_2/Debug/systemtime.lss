
systemtime.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000254  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000284  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000072a  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000667  00000000  00000000  00000a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000016a  00000000  00000000  0000108d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  000011f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b9  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013a  00000000  00000000  00001659  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  88:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_9>:

//u32 t2_soft;	//zählt 0.5 µs ticks
unsigned int t2_soft;

ISR( TIMER2_OVF_vect )
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	cd b7       	in	r28, 0x3d	; 61
  a6:	de b7       	in	r29, 0x3e	; 62
	t2_soft += 256;
  a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  b0:	93 95       	inc	r25
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
}
  ba:	00 00       	nop
  bc:	df 91       	pop	r29
  be:	cf 91       	pop	r28
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	0f 90       	pop	r0
  c6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <t2_init>:


void t2_init( void )
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	t2_soft = 0;
  d8:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	TCCR2B = 1<<CS21;	// mode 0, prescaler 8
  e0:	81 eb       	ldi	r24, 0xB1	; 177
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	22 e0       	ldi	r18, 0x02	; 2
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	TIMSK2 |= 1<<TOIE2;	// enable overflow interrupt
  ea:	80 e7       	ldi	r24, 0x70	; 112
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	20 e7       	ldi	r18, 0x70	; 112
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	20 81       	ld	r18, Z
  f6:	21 60       	ori	r18, 0x01	; 1
  f8:	fc 01       	movw	r30, r24
  fa:	20 83       	st	Z, r18
	//TCCR2A |= (1<<WGM01); //CTC Modus
	//OCR2A = 249; //Comparematch bei 249 -> Event je ms
	//TIMSK2 |= (1<<OCIE2A); //Interrupt des OCR aktiv

}
  fc:	00 00       	nop
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <get_ticks>:


u32 get_ticks( void )			  // read T2 as 32 bit timer
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <get_ticks+0x6>
 10a:	00 d0       	rcall	.+0      	; 0x10c <get_ticks+0x8>
 10c:	1f 92       	push	r1
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	u32 val;
	u8 tifr;

	cli();	//clear interrupt
 112:	f8 94       	cli
	val = t2_soft + TCNT2;
 114:	82 eb       	ldi	r24, 0xB2	; 178
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	fc 01       	movw	r30, r24
 11a:	80 81       	ld	r24, Z
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 128:	82 0f       	add	r24, r18
 12a:	93 1f       	adc	r25, r19
 12c:	cc 01       	movw	r24, r24
 12e:	a0 e0       	ldi	r26, 0x00	; 0
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	89 83       	std	Y+1, r24	; 0x01
 134:	9a 83       	std	Y+2, r25	; 0x02
 136:	ab 83       	std	Y+3, r26	; 0x03
 138:	bc 83       	std	Y+4, r27	; 0x04
	tifr = TIFR2;				  // read interrupt flags
 13a:	87 e3       	ldi	r24, 0x37	; 55
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	fc 01       	movw	r30, r24
 140:	80 81       	ld	r24, Z
 142:	8d 83       	std	Y+5, r24	; 0x05
	sei();
 144:	78 94       	sei
	if( (tifr & 1<<TOV2) && !(val & 0x80) ) // overflow prior reading TCNT2 ?
 146:	8d 81       	ldd	r24, Y+5	; 0x05
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	99 27       	eor	r25, r25
 150:	89 2b       	or	r24, r25
 152:	b9 f0       	breq	.+46     	; 0x182 <get_ticks+0x7e>
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	9a 81       	ldd	r25, Y+2	; 0x02
 158:	ab 81       	ldd	r26, Y+3	; 0x03
 15a:	bc 81       	ldd	r27, Y+4	; 0x04
 15c:	80 78       	andi	r24, 0x80	; 128
 15e:	99 27       	eor	r25, r25
 160:	aa 27       	eor	r26, r26
 162:	bb 27       	eor	r27, r27
 164:	89 2b       	or	r24, r25
 166:	8a 2b       	or	r24, r26
 168:	8b 2b       	or	r24, r27
 16a:	59 f4       	brne	.+22     	; 0x182 <get_ticks+0x7e>
	val += 256;				  // then add overflow
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	9a 81       	ldd	r25, Y+2	; 0x02
 170:	ab 81       	ldd	r26, Y+3	; 0x03
 172:	bc 81       	ldd	r27, Y+4	; 0x04
 174:	9f 5f       	subi	r25, 0xFF	; 255
 176:	af 4f       	sbci	r26, 0xFF	; 255
 178:	bf 4f       	sbci	r27, 0xFF	; 255
 17a:	89 83       	std	Y+1, r24	; 0x01
 17c:	9a 83       	std	Y+2, r25	; 0x02
 17e:	ab 83       	std	Y+3, r26	; 0x03
 180:	bc 83       	std	Y+4, r27	; 0x04

	return val;
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	9a 81       	ldd	r25, Y+2	; 0x02
 186:	ab 81       	ldd	r26, Y+3	; 0x03
 188:	bc 81       	ldd	r27, Y+4	; 0x04
}
 18a:	bc 01       	movw	r22, r24
 18c:	cd 01       	movw	r24, r26
 18e:	0f 90       	pop	r0
 190:	0f 90       	pop	r0
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret

0000019e <main>:


int main( void )
{
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	00 d0       	rcall	.+0      	; 0x1a4 <main+0x6>
 1a4:	00 d0       	rcall	.+0      	; 0x1a6 <main+0x8>
 1a6:	cd b7       	in	r28, 0x3d	; 61
 1a8:	de b7       	in	r29, 0x3e	; 62
	u32 timerticks;

	t2_init();
 1aa:	0e 94 68 00 	call	0xd0	; 0xd0 <t2_init>
	sei();
 1ae:	78 94       	sei

	for(;;){		//kranke endlosschleife
		timerticks = get_ticks();
 1b0:	0e 94 82 00 	call	0x104	; 0x104 <get_ticks>
 1b4:	dc 01       	movw	r26, r24
 1b6:	cb 01       	movw	r24, r22
 1b8:	89 83       	std	Y+1, r24	; 0x01
 1ba:	9a 83       	std	Y+2, r25	; 0x02
 1bc:	ab 83       	std	Y+3, r26	; 0x03
 1be:	bc 83       	std	Y+4, r27	; 0x04
		//rücksetzen nach 24h
		if (timerticks == 675000000)
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	9a 81       	ldd	r25, Y+2	; 0x02
 1c4:	ab 81       	ldd	r26, Y+3	; 0x03
 1c6:	bc 81       	ldd	r27, Y+4	; 0x04
 1c8:	80 3c       	cpi	r24, 0xC0	; 192
 1ca:	9e 4a       	sbci	r25, 0xAE	; 174
 1cc:	ab 43       	sbci	r26, 0x3B	; 59
 1ce:	b8 42       	sbci	r27, 0x28	; 40
 1d0:	79 f7       	brne	.-34     	; 0x1b0 <main+0x12>
		timerticks = 0;
 1d2:	19 82       	std	Y+1, r1	; 0x01
 1d4:	1a 82       	std	Y+2, r1	; 0x02
 1d6:	1b 82       	std	Y+3, r1	; 0x03
 1d8:	1c 82       	std	Y+4, r1	; 0x04
	}
 1da:	ea cf       	rjmp	.-44     	; 0x1b0 <main+0x12>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
