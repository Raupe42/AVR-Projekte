
MiniProjektA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000628  000006bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000628  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000664  00800108  00800108  000006c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf9  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cb  00000000  00000000  0000138d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000598  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  000020f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004de  00000000  00000000  00002214  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059e  00000000  00000000  000026f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002c90  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	27 e0       	ldi	r18, 0x07	; 7
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 36       	cpi	r26, 0x6C	; 108
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
  9e:	0c 94 12 03 	jmp	0x624	; 0x624 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <taster>:
-> Schließer
*/
int taster (int linksshift, volatile uint8_t* p_PinRegister)
{
	int retVal = 0;
	if (!(*p_PinRegister & (1<<linksshift)))
  a6:	fb 01       	movw	r30, r22
  a8:	20 81       	ld	r18, Z
	retVal = 1;
	return retVal;
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <taster+0xc>
  ae:	35 95       	asr	r19
  b0:	27 95       	ror	r18
  b2:	8a 95       	dec	r24
  b4:	e2 f7       	brpl	.-8      	; 0xae <taster+0x8>
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	20 ff       	sbrs	r18, 0
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <taster+0x1c>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
}
  c2:	08 95       	ret

000000c4 <outputSet>:
state: 0 für aus; != 0 Ein
p_PortRegister: Addresse des Ports
linksshift: Anzahl der Linksshifts für den bertreffenden Pin
*/
int outputSet (int state, volatile uint8_t* p_PortRegister, int linksshift)
{
  c4:	fb 01       	movw	r30, r22
	if (state)
  c6:	89 2b       	or	r24, r25
  c8:	59 f0       	breq	.+22     	; 0xe0 <outputSet+0x1c>
	*p_PortRegister |= (1<<linksshift);	// Output Ein
  ca:	20 81       	ld	r18, Z
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <outputSet+0x12>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	4a 95       	dec	r20
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <outputSet+0xe>
  da:	82 2b       	or	r24, r18
  dc:	80 83       	st	Z, r24
  de:	0b c0       	rjmp	.+22     	; 0xf6 <outputSet+0x32>
	else
	*p_PortRegister &= ~(1<<linksshift);
  e0:	20 81       	ld	r18, Z
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <outputSet+0x28>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	4a 95       	dec	r20
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <outputSet+0x24>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	80 83       	st	Z, r24
	return *p_PortRegister;
  f6:	80 81       	ld	r24, Z
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	08 95       	ret

000000fc <warteLED>:
	}
	return out;
}

long warteLED (long counter)
{
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	6b 01       	movw	r12, r22
 10a:	7c 01       	movw	r14, r24
	static long delayWarte = 0;
	static long delay_act = 0;
	static int ersterDruck = 1;
	static int taster_lastStateWarte = 0;
	int tasterVal = taster(DELAY_TASTER, &PIND);
 10c:	69 e2       	ldi	r22, 0x29	; 41
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	85 e0       	ldi	r24, 0x05	; 5
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 53 00 	call	0xa6	; 0xa6 <taster>
 118:	ec 01       	movw	r28, r24
	
	// Taster behandlung
	if (tasterVal && !taster_lastStateWarte) // Flankenerkennung
 11a:	89 2b       	or	r24, r25
 11c:	09 f4       	brne	.+2      	; 0x120 <warteLED+0x24>
 11e:	41 c0       	rjmp	.+130    	; 0x1a2 <warteLED+0xa6>
 120:	80 91 6a 07 	lds	r24, 0x076A	; 0x80076a <taster_lastStateWarte.1772>
 124:	90 91 6b 07 	lds	r25, 0x076B	; 0x80076b <taster_lastStateWarte.1772+0x1>
 128:	89 2b       	or	r24, r25
 12a:	d9 f5       	brne	.+118    	; 0x1a2 <warteLED+0xa6>
	{
		if (ersterDruck)
 12c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ersterDruck.1771>
 130:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <ersterDruck.1771+0x1>
 134:	89 2b       	or	r24, r25
 136:	81 f0       	breq	.+32     	; 0x158 <warteLED+0x5c>
		{
			counter = 0;
			delayWarte = counter;
 138:	10 92 66 07 	sts	0x0766, r1	; 0x800766 <delayWarte.1769>
 13c:	10 92 67 07 	sts	0x0767, r1	; 0x800767 <delayWarte.1769+0x1>
 140:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <delayWarte.1769+0x2>
 144:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <delayWarte.1769+0x3>
			ersterDruck = 0;
 148:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <ersterDruck.1771+0x1>
 14c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ersterDruck.1771>
	// Taster behandlung
	if (tasterVal && !taster_lastStateWarte) // Flankenerkennung
	{
		if (ersterDruck)
		{
			counter = 0;
 150:	c1 2c       	mov	r12, r1
 152:	d1 2c       	mov	r13, r1
 154:	76 01       	movw	r14, r12
 156:	25 c0       	rjmp	.+74     	; 0x1a2 <warteLED+0xa6>
			delayWarte = counter;
			ersterDruck = 0;
		}
		else
		{
			delayWarte = counter - delayWarte;
 158:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <delayWarte.1769>
 15c:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <delayWarte.1769+0x1>
 160:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <delayWarte.1769+0x2>
 164:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <delayWarte.1769+0x3>
 168:	a7 01       	movw	r20, r14
 16a:	96 01       	movw	r18, r12
 16c:	28 1b       	sub	r18, r24
 16e:	39 0b       	sbc	r19, r25
 170:	4a 0b       	sbc	r20, r26
 172:	5b 0b       	sbc	r21, r27
 174:	20 93 66 07 	sts	0x0766, r18	; 0x800766 <delayWarte.1769>
 178:	30 93 67 07 	sts	0x0767, r19	; 0x800767 <delayWarte.1769+0x1>
 17c:	40 93 68 07 	sts	0x0768, r20	; 0x800768 <delayWarte.1769+0x2>
 180:	50 93 69 07 	sts	0x0769, r21	; 0x800769 <delayWarte.1769+0x3>
			ersterDruck = 1;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <ersterDruck.1771+0x1>
 18c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ersterDruck.1771>
			delay_act = 0;
 190:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <delay_act.1770>
 194:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <delay_act.1770+0x1>
 198:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <delay_act.1770+0x2>
 19c:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <delay_act.1770+0x3>
 1a0:	0d c0       	rjmp	.+26     	; 0x1bc <warteLED+0xc0>
			//counter = 0;
		}
	}

	// Leuchten in gewähltem Abstand
	if (!delay_act)
 1a2:	40 91 62 07 	lds	r20, 0x0762	; 0x800762 <delay_act.1770>
 1a6:	50 91 63 07 	lds	r21, 0x0763	; 0x800763 <delay_act.1770+0x1>
 1aa:	60 91 64 07 	lds	r22, 0x0764	; 0x800764 <delay_act.1770+0x2>
 1ae:	70 91 65 07 	lds	r23, 0x0765	; 0x800765 <delay_act.1770+0x3>
 1b2:	41 15       	cp	r20, r1
 1b4:	51 05       	cpc	r21, r1
 1b6:	61 05       	cpc	r22, r1
 1b8:	71 05       	cpc	r23, r1
 1ba:	49 f4       	brne	.+18     	; 0x1ce <warteLED+0xd2>
	outputSet(1, &PORTD, DELAY_LED);	// LED Ein
 1bc:	47 e0       	ldi	r20, 0x07	; 7
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	6b e2       	ldi	r22, 0x2B	; 43
 1c2:	70 e0       	ldi	r23, 0x00	; 0
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
 1cc:	27 c0       	rjmp	.+78     	; 0x21c <warteLED+0x120>
	else if (delayWarte <= delay_act)
 1ce:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <delayWarte.1769>
 1d2:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <delayWarte.1769+0x1>
 1d6:	a0 91 68 07 	lds	r26, 0x0768	; 0x800768 <delayWarte.1769+0x2>
 1da:	b0 91 69 07 	lds	r27, 0x0769	; 0x800769 <delayWarte.1769+0x3>
 1de:	48 17       	cp	r20, r24
 1e0:	59 07       	cpc	r21, r25
 1e2:	6a 07       	cpc	r22, r26
 1e4:	7b 07       	cpc	r23, r27
 1e6:	4c f0       	brlt	.+18     	; 0x1fa <warteLED+0xfe>
	outputSet(0, &PORTD, DELAY_LED);	// LED Aus
 1e8:	47 e0       	ldi	r20, 0x07	; 7
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	6b e2       	ldi	r22, 0x2B	; 43
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
 1f8:	11 c0       	rjmp	.+34     	; 0x21c <warteLED+0x120>
	else if (delay_act > delayWarte * 2)
 1fa:	88 0f       	add	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	aa 1f       	adc	r26, r26
 200:	bb 1f       	adc	r27, r27
 202:	84 17       	cp	r24, r20
 204:	95 07       	cpc	r25, r21
 206:	a6 07       	cpc	r26, r22
 208:	b7 07       	cpc	r27, r23
 20a:	44 f4       	brge	.+16     	; 0x21c <warteLED+0x120>
	
	delay_act = 0;
 20c:	10 92 62 07 	sts	0x0762, r1	; 0x800762 <delay_act.1770>
 210:	10 92 63 07 	sts	0x0763, r1	; 0x800763 <delay_act.1770+0x1>
 214:	10 92 64 07 	sts	0x0764, r1	; 0x800764 <delay_act.1770+0x2>
 218:	10 92 65 07 	sts	0x0765, r1	; 0x800765 <delay_act.1770+0x3>
	
	//counter ++
	counter ++;
	delay_act ++;
 21c:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <delay_act.1770>
 220:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <delay_act.1770+0x1>
 224:	a0 91 64 07 	lds	r26, 0x0764	; 0x800764 <delay_act.1770+0x2>
 228:	b0 91 65 07 	lds	r27, 0x0765	; 0x800765 <delay_act.1770+0x3>
 22c:	01 96       	adiw	r24, 0x01	; 1
 22e:	a1 1d       	adc	r26, r1
 230:	b1 1d       	adc	r27, r1
 232:	80 93 62 07 	sts	0x0762, r24	; 0x800762 <delay_act.1770>
 236:	90 93 63 07 	sts	0x0763, r25	; 0x800763 <delay_act.1770+0x1>
 23a:	a0 93 64 07 	sts	0x0764, r26	; 0x800764 <delay_act.1770+0x2>
 23e:	b0 93 65 07 	sts	0x0765, r27	; 0x800765 <delay_act.1770+0x3>

	taster_lastStateWarte = tasterVal;
 242:	d0 93 6b 07 	sts	0x076B, r29	; 0x80076b <taster_lastStateWarte.1772+0x1>
 246:	c0 93 6a 07 	sts	0x076A, r28	; 0x80076a <taster_lastStateWarte.1772>

	return counter;
 24a:	c7 01       	movw	r24, r14
 24c:	b6 01       	movw	r22, r12
 24e:	6f 5f       	subi	r22, 0xFF	; 255
 250:	7f 4f       	sbci	r23, 0xFF	; 255
 252:	8f 4f       	sbci	r24, 0xFF	; 255
 254:	9f 4f       	sbci	r25, 0xFF	; 255
}
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	ff 90       	pop	r15
 25c:	ef 90       	pop	r14
 25e:	df 90       	pop	r13
 260:	cf 90       	pop	r12
 262:	08 95       	ret

00000264 <anAus>:

void anAus ()
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
	static int status = 0;
	static int letzterTaster = 0;
	int tasterVal = 0;
	tasterVal = taster(TOGGLE_TASTER, &PIND);
 268:	69 e2       	ldi	r22, 0x29	; 41
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 53 00 	call	0xa6	; 0xa6 <taster>
 274:	ec 01       	movw	r28, r24
	if (tasterVal && !letzterTaster)
 276:	89 2b       	or	r24, r25
 278:	b9 f0       	breq	.+46     	; 0x2a8 <anAus+0x44>
 27a:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <letzterTaster.1777>
 27e:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <letzterTaster.1777+0x1>
 282:	89 2b       	or	r24, r25
 284:	89 f4       	brne	.+34     	; 0x2a8 <anAus+0x44>
	{
		if (status)
 286:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <status.1776>
 28a:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <status.1776+0x1>
 28e:	89 2b       	or	r24, r25
 290:	29 f0       	breq	.+10     	; 0x29c <anAus+0x38>
		status = 0;
 292:	10 92 5f 07 	sts	0x075F, r1	; 0x80075f <status.1776+0x1>
 296:	10 92 5e 07 	sts	0x075E, r1	; 0x80075e <status.1776>
 29a:	06 c0       	rjmp	.+12     	; 0x2a8 <anAus+0x44>
		else
		status = 1;
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <status.1776+0x1>
 2a4:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <status.1776>
	}
	outputSet(status, &PORTD, TOGGLE_LED);
 2a8:	43 e0       	ldi	r20, 0x03	; 3
 2aa:	50 e0       	ldi	r21, 0x00	; 0
 2ac:	6b e2       	ldi	r22, 0x2B	; 43
 2ae:	70 e0       	ldi	r23, 0x00	; 0
 2b0:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <status.1776>
 2b4:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <status.1776+0x1>
 2b8:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
	letzterTaster = tasterVal;
 2bc:	d0 93 61 07 	sts	0x0761, r29	; 0x800761 <letzterTaster.1777+0x1>
 2c0:	c0 93 60 07 	sts	0x0760, r28	; 0x800760 <letzterTaster.1777>
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <blinke>:


void blinke ()
{
 2ca:	8f 92       	push	r8
 2cc:	9f 92       	push	r9
 2ce:	af 92       	push	r10
 2d0:	bf 92       	push	r11
 2d2:	cf 92       	push	r12
 2d4:	df 92       	push	r13
 2d6:	ef 92       	push	r14
 2d8:	ff 92       	push	r15
 2da:	cf 93       	push	r28
 2dc:	df 93       	push	r29
	static long actual = 0;
	static long delay = 200;
	static long waitTime = 0;
	static int state = 1;
	static int letzterTaster = 0;
	int dieserTaster = taster(BLINKE_TASTER, &PINB);
 2de:	63 e2       	ldi	r22, 0x23	; 35
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 53 00 	call	0xa6	; 0xa6 <taster>
 2ea:	ec 01       	movw	r28, r24
	
	//flanke
	if (dieserTaster && !letzterTaster)
 2ec:	89 2b       	or	r24, r25
 2ee:	09 f4       	brne	.+2      	; 0x2f2 <blinke+0x28>
 2f0:	41 c0       	rjmp	.+130    	; 0x374 <blinke+0xaa>
 2f2:	80 91 5c 07 	lds	r24, 0x075C	; 0x80075c <letzterTaster.1785>
 2f6:	90 91 5d 07 	lds	r25, 0x075D	; 0x80075d <letzterTaster.1785+0x1>
 2fa:	89 2b       	or	r24, r25
 2fc:	d9 f5       	brne	.+118    	; 0x374 <blinke+0xaa>
	{
		switch (state)
 2fe:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state.1784>
 302:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state.1784+0x1>
 306:	81 30       	cpi	r24, 0x01	; 1
 308:	91 05       	cpc	r25, r1
 30a:	19 f0       	breq	.+6      	; 0x312 <blinke+0x48>
 30c:	02 97       	sbiw	r24, 0x02	; 2
 30e:	51 f0       	breq	.+20     	; 0x324 <blinke+0x5a>
 310:	22 c0       	rjmp	.+68     	; 0x356 <blinke+0x8c>
		{
			case 1:
			waitTime = 0;
 312:	10 92 58 07 	sts	0x0758, r1	; 0x800758 <waitTime.1783>
 316:	10 92 59 07 	sts	0x0759, r1	; 0x800759 <waitTime.1783+0x1>
 31a:	10 92 5a 07 	sts	0x075A, r1	; 0x80075a <waitTime.1783+0x2>
 31e:	10 92 5b 07 	sts	0x075B, r1	; 0x80075b <waitTime.1783+0x3>
			break;
 322:	1f c0       	rjmp	.+62     	; 0x362 <blinke+0x98>
			case 2:
			delay = waitTime * 2;
 324:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <waitTime.1783>
 328:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <waitTime.1783+0x1>
 32c:	a0 91 5a 07 	lds	r26, 0x075A	; 0x80075a <waitTime.1783+0x2>
 330:	b0 91 5b 07 	lds	r27, 0x075B	; 0x80075b <waitTime.1783+0x3>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 340:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 344:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 348:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
			//counter = 0;
			state = 0;
 34c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <state.1784+0x1>
 350:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <state.1784>
			break;
 354:	06 c0       	rjmp	.+12     	; 0x362 <blinke+0x98>
			default:
			state = 1;
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state.1784+0x1>
 35e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1784>
		}
		state ++;
 362:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state.1784>
 366:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <state.1784+0x1>
 36a:	01 96       	adiw	r24, 0x01	; 1
 36c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <state.1784+0x1>
 370:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1784>
		
	}
	
	if (actual < delay)
 374:	80 90 54 07 	lds	r8, 0x0754	; 0x800754 <actual.1781>
 378:	90 90 55 07 	lds	r9, 0x0755	; 0x800755 <actual.1781+0x1>
 37c:	a0 90 56 07 	lds	r10, 0x0756	; 0x800756 <actual.1781+0x2>
 380:	b0 90 57 07 	lds	r11, 0x0757	; 0x800757 <actual.1781+0x3>
 384:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
 388:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
 38c:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
 390:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
 394:	8c 14       	cp	r8, r12
 396:	9d 04       	cpc	r9, r13
 398:	ae 04       	cpc	r10, r14
 39a:	bf 04       	cpc	r11, r15
 39c:	4c f4       	brge	.+18     	; 0x3b0 <blinke+0xe6>
	{
		outputSet(1, &PORTB, BLINKE_LED);
 39e:	41 e0       	ldi	r20, 0x01	; 1
 3a0:	50 e0       	ldi	r21, 0x00	; 0
 3a2:	65 e2       	ldi	r22, 0x25	; 37
 3a4:	70 e0       	ldi	r23, 0x00	; 0
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
 3ae:	08 c0       	rjmp	.+16     	; 0x3c0 <blinke+0xf6>
	}
	else
	{
		outputSet(0, &PORTB, BLINKE_LED);
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	50 e0       	ldi	r21, 0x00	; 0
 3b4:	65 e2       	ldi	r22, 0x25	; 37
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
	}
	
	if (actual > delay * 2)
 3c0:	cc 0c       	add	r12, r12
 3c2:	dd 1c       	adc	r13, r13
 3c4:	ee 1c       	adc	r14, r14
 3c6:	ff 1c       	adc	r15, r15
 3c8:	c8 14       	cp	r12, r8
 3ca:	d9 04       	cpc	r13, r9
 3cc:	ea 04       	cpc	r14, r10
 3ce:	fb 04       	cpc	r15, r11
 3d0:	44 f4       	brge	.+16     	; 0x3e2 <blinke+0x118>
	actual = 0;
 3d2:	10 92 54 07 	sts	0x0754, r1	; 0x800754 <actual.1781>
 3d6:	10 92 55 07 	sts	0x0755, r1	; 0x800755 <actual.1781+0x1>
 3da:	10 92 56 07 	sts	0x0756, r1	; 0x800756 <actual.1781+0x2>
 3de:	10 92 57 07 	sts	0x0757, r1	; 0x800757 <actual.1781+0x3>
	//counter ++;
	actual ++;
 3e2:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <actual.1781>
 3e6:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <actual.1781+0x1>
 3ea:	a0 91 56 07 	lds	r26, 0x0756	; 0x800756 <actual.1781+0x2>
 3ee:	b0 91 57 07 	lds	r27, 0x0757	; 0x800757 <actual.1781+0x3>
 3f2:	01 96       	adiw	r24, 0x01	; 1
 3f4:	a1 1d       	adc	r26, r1
 3f6:	b1 1d       	adc	r27, r1
 3f8:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <actual.1781>
 3fc:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <actual.1781+0x1>
 400:	a0 93 56 07 	sts	0x0756, r26	; 0x800756 <actual.1781+0x2>
 404:	b0 93 57 07 	sts	0x0757, r27	; 0x800757 <actual.1781+0x3>
	waitTime ++;
 408:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <waitTime.1783>
 40c:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <waitTime.1783+0x1>
 410:	a0 91 5a 07 	lds	r26, 0x075A	; 0x80075a <waitTime.1783+0x2>
 414:	b0 91 5b 07 	lds	r27, 0x075B	; 0x80075b <waitTime.1783+0x3>
 418:	01 96       	adiw	r24, 0x01	; 1
 41a:	a1 1d       	adc	r26, r1
 41c:	b1 1d       	adc	r27, r1
 41e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <waitTime.1783>
 422:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <waitTime.1783+0x1>
 426:	a0 93 5a 07 	sts	0x075A, r26	; 0x80075a <waitTime.1783+0x2>
 42a:	b0 93 5b 07 	sts	0x075B, r27	; 0x80075b <waitTime.1783+0x3>
	
	letzterTaster = dieserTaster;
 42e:	d0 93 5d 07 	sts	0x075D, r29	; 0x80075d <letzterTaster.1785+0x1>
 432:	c0 93 5c 07 	sts	0x075C, r28	; 0x80075c <letzterTaster.1785>
	return;
}
 436:	df 91       	pop	r29
 438:	cf 91       	pop	r28
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	9f 90       	pop	r9
 448:	8f 90       	pop	r8
 44a:	08 95       	ret

0000044c <sammelLED>:


void sammelLED ()
{
 44c:	cf 92       	push	r12
 44e:	df 92       	push	r13
 450:	ef 92       	push	r14
 452:	ff 92       	push	r15
 454:	cf 93       	push	r28
 456:	df 93       	push	r29
	static long counterSammel = 0;
	const long delayCount = 3;
	static int stateSammel = 0;
	static int tempSammel;
	
	if (delaySammelLed >= delayCount)
 458:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <delaySammelLed.1794>
 45c:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <delaySammelLed.1794+0x1>
 460:	a0 91 52 07 	lds	r26, 0x0752	; 0x800752 <delaySammelLed.1794+0x2>
 464:	b0 91 53 07 	lds	r27, 0x0753	; 0x800753 <delaySammelLed.1794+0x3>
 468:	03 97       	sbiw	r24, 0x03	; 3
 46a:	a1 05       	cpc	r26, r1
 46c:	b1 05       	cpc	r27, r1
 46e:	c4 f1       	brlt	.+112    	; 0x4e0 <sammelLED+0x94>
	{
		delaySammelLed = 0;
 470:	10 92 50 07 	sts	0x0750, r1	; 0x800750 <delaySammelLed.1794>
 474:	10 92 51 07 	sts	0x0751, r1	; 0x800751 <delaySammelLed.1794+0x1>
 478:	10 92 52 07 	sts	0x0752, r1	; 0x800752 <delaySammelLed.1794+0x2>
 47c:	10 92 53 07 	sts	0x0753, r1	; 0x800753 <delaySammelLed.1794+0x3>

		data [stateSammel][counterSammel] = taster(SAMMEL_TASTER, &PINB);
 480:	c0 91 4e 07 	lds	r28, 0x074E	; 0x80074e <stateSammel.1797>
 484:	d0 91 4f 07 	lds	r29, 0x074F	; 0x80074f <stateSammel.1797+0x1>
 488:	c0 90 4a 07 	lds	r12, 0x074A	; 0x80074a <counterSammel.1795>
 48c:	d0 90 4b 07 	lds	r13, 0x074B	; 0x80074b <counterSammel.1795+0x1>
 490:	e0 90 4c 07 	lds	r14, 0x074C	; 0x80074c <counterSammel.1795+0x2>
 494:	f0 90 4d 07 	lds	r15, 0x074D	; 0x80074d <counterSammel.1795+0x3>
 498:	63 e2       	ldi	r22, 0x23	; 35
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	0e 94 53 00 	call	0xa6	; 0xa6 <taster>
 4a4:	20 e9       	ldi	r18, 0x90	; 144
 4a6:	31 e0       	ldi	r19, 0x01	; 1
 4a8:	c2 9f       	mul	r28, r18
 4aa:	f0 01       	movw	r30, r0
 4ac:	c3 9f       	mul	r28, r19
 4ae:	f0 0d       	add	r31, r0
 4b0:	d2 9f       	mul	r29, r18
 4b2:	f0 0d       	add	r31, r0
 4b4:	11 24       	eor	r1, r1
 4b6:	ec 0d       	add	r30, r12
 4b8:	fd 1d       	adc	r31, r13
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	e6 5f       	subi	r30, 0xF6	; 246
 4c0:	fe 4f       	sbci	r31, 0xFE	; 254
 4c2:	91 83       	std	Z+1, r25	; 0x01
 4c4:	80 83       	st	Z, r24
		counterSammel ++;
 4c6:	8f ef       	ldi	r24, 0xFF	; 255
 4c8:	c8 1a       	sub	r12, r24
 4ca:	d8 0a       	sbc	r13, r24
 4cc:	e8 0a       	sbc	r14, r24
 4ce:	f8 0a       	sbc	r15, r24
 4d0:	c0 92 4a 07 	sts	0x074A, r12	; 0x80074a <counterSammel.1795>
 4d4:	d0 92 4b 07 	sts	0x074B, r13	; 0x80074b <counterSammel.1795+0x1>
 4d8:	e0 92 4c 07 	sts	0x074C, r14	; 0x80074c <counterSammel.1795+0x2>
 4dc:	f0 92 4d 07 	sts	0x074D, r15	; 0x80074d <counterSammel.1795+0x3>
	}
	
	if (stateSammel)
 4e0:	80 91 4e 07 	lds	r24, 0x074E	; 0x80074e <stateSammel.1797>
 4e4:	90 91 4f 07 	lds	r25, 0x074F	; 0x80074f <stateSammel.1797+0x1>
 4e8:	89 2b       	or	r24, r25
 4ea:	09 f1       	breq	.+66     	; 0x52e <sammelLED+0xe2>
	tempSammel = data [0] [counterSammel];
 4ec:	c0 90 4a 07 	lds	r12, 0x074A	; 0x80074a <counterSammel.1795>
 4f0:	d0 90 4b 07 	lds	r13, 0x074B	; 0x80074b <counterSammel.1795+0x1>
 4f4:	e0 90 4c 07 	lds	r14, 0x074C	; 0x80074c <counterSammel.1795+0x2>
 4f8:	f0 90 4d 07 	lds	r15, 0x074D	; 0x80074d <counterSammel.1795+0x3>
 4fc:	f6 01       	movw	r30, r12
 4fe:	ee 0f       	add	r30, r30
 500:	ff 1f       	adc	r31, r31
 502:	e6 5f       	subi	r30, 0xF6	; 246
 504:	fe 4f       	sbci	r31, 0xFE	; 254
 506:	80 81       	ld	r24, Z
 508:	91 81       	ldd	r25, Z+1	; 0x01
 50a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 50e:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	
	else
	tempSammel = data [1] [counterSammel];
	
	outputSet(tempSammel, &PORTB, SAMMEL_LED);
 512:	43 e0       	ldi	r20, 0x03	; 3
 514:	50 e0       	ldi	r21, 0x00	; 0
 516:	65 e2       	ldi	r22, 0x25	; 37
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
	//outputSet(temp, &PORTD, 6);

	if (counterSammel == 399)
 51e:	8f e8       	ldi	r24, 0x8F	; 143
 520:	c8 16       	cp	r12, r24
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	d8 06       	cpc	r13, r24
 526:	e1 04       	cpc	r14, r1
 528:	f1 04       	cpc	r15, r1
 52a:	19 f5       	brne	.+70     	; 0x572 <sammelLED+0x126>
 52c:	45 c0       	rjmp	.+138    	; 0x5b8 <sammelLED+0x16c>
	
	if (stateSammel)
	tempSammel = data [0] [counterSammel];
	
	else
	tempSammel = data [1] [counterSammel];
 52e:	c0 90 4a 07 	lds	r12, 0x074A	; 0x80074a <counterSammel.1795>
 532:	d0 90 4b 07 	lds	r13, 0x074B	; 0x80074b <counterSammel.1795+0x1>
 536:	e0 90 4c 07 	lds	r14, 0x074C	; 0x80074c <counterSammel.1795+0x2>
 53a:	f0 90 4d 07 	lds	r15, 0x074D	; 0x80074d <counterSammel.1795+0x3>
 53e:	f6 01       	movw	r30, r12
 540:	e0 57       	subi	r30, 0x70	; 112
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	ee 0f       	add	r30, r30
 546:	ff 1f       	adc	r31, r31
 548:	e6 5f       	subi	r30, 0xF6	; 246
 54a:	fe 4f       	sbci	r31, 0xFE	; 254
 54c:	80 81       	ld	r24, Z
 54e:	91 81       	ldd	r25, Z+1	; 0x01
 550:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__data_end+0x1>
 554:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end>
	
	outputSet(tempSammel, &PORTB, SAMMEL_LED);
 558:	43 e0       	ldi	r20, 0x03	; 3
 55a:	50 e0       	ldi	r21, 0x00	; 0
 55c:	65 e2       	ldi	r22, 0x25	; 37
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	0e 94 62 00 	call	0xc4	; 0xc4 <outputSet>
	//outputSet(temp, &PORTD, 6);

	if (counterSammel == 399)
 564:	8f e8       	ldi	r24, 0x8F	; 143
 566:	c8 16       	cp	r12, r24
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	d8 06       	cpc	r13, r24
 56c:	e1 04       	cpc	r14, r1
 56e:	f1 04       	cpc	r15, r1
 570:	a1 f0       	breq	.+40     	; 0x59a <sammelLED+0x14e>
		else
		stateSammel = 0;
	}
	
	
	delaySammelLed ++;
 572:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <delaySammelLed.1794>
 576:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <delaySammelLed.1794+0x1>
 57a:	a0 91 52 07 	lds	r26, 0x0752	; 0x800752 <delaySammelLed.1794+0x2>
 57e:	b0 91 53 07 	lds	r27, 0x0753	; 0x800753 <delaySammelLed.1794+0x3>
 582:	01 96       	adiw	r24, 0x01	; 1
 584:	a1 1d       	adc	r26, r1
 586:	b1 1d       	adc	r27, r1
 588:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <delaySammelLed.1794>
 58c:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <delaySammelLed.1794+0x1>
 590:	a0 93 52 07 	sts	0x0752, r26	; 0x800752 <delaySammelLed.1794+0x2>
 594:	b0 93 53 07 	sts	0x0753, r27	; 0x800753 <delaySammelLed.1794+0x3>
	
	return;
 598:	1c c0       	rjmp	.+56     	; 0x5d2 <sammelLED+0x186>
	outputSet(tempSammel, &PORTB, SAMMEL_LED);
	//outputSet(temp, &PORTD, 6);

	if (counterSammel == 399)
	{
		counterSammel = 0;
 59a:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <counterSammel.1795>
 59e:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <counterSammel.1795+0x1>
 5a2:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <counterSammel.1795+0x2>
 5a6:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <counterSammel.1795+0x3>
		if (!stateSammel)
		stateSammel = 1;
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <stateSammel.1797+0x1>
 5b2:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <stateSammel.1797>
 5b6:	dd cf       	rjmp	.-70     	; 0x572 <sammelLED+0x126>
	outputSet(tempSammel, &PORTB, SAMMEL_LED);
	//outputSet(temp, &PORTD, 6);

	if (counterSammel == 399)
	{
		counterSammel = 0;
 5b8:	10 92 4a 07 	sts	0x074A, r1	; 0x80074a <counterSammel.1795>
 5bc:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <counterSammel.1795+0x1>
 5c0:	10 92 4c 07 	sts	0x074C, r1	; 0x80074c <counterSammel.1795+0x2>
 5c4:	10 92 4d 07 	sts	0x074D, r1	; 0x80074d <counterSammel.1795+0x3>
		if (!stateSammel)
		stateSammel = 1;
		else
		stateSammel = 0;
 5c8:	10 92 4f 07 	sts	0x074F, r1	; 0x80074f <stateSammel.1797+0x1>
 5cc:	10 92 4e 07 	sts	0x074E, r1	; 0x80074e <stateSammel.1797>
 5d0:	d0 cf       	rjmp	.-96     	; 0x572 <sammelLED+0x126>
	
	
	delaySammelLed ++;
	
	return;
}
 5d2:	df 91       	pop	r29
 5d4:	cf 91       	pop	r28
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	08 95       	ret

000005e0 <main>:
{
	long counter = 0;


	//INIT - 1 OUT 0 IN
	DDRB = DDRB = 0;
 5e0:	14 b8       	out	0x04, r1	; 4
 5e2:	14 b8       	out	0x04, r1	; 4
	DDRD |= (1<<TOGGLE_LED);
 5e4:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1<<DELAY_LED);
 5e6:	57 9a       	sbi	0x0a, 7	; 10
	DDRB |= (1<<BLINKE_LED);
 5e8:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= (1<<SAMMEL_LED);
 5ea:	23 9a       	sbi	0x04, 3	; 4
	PORTB = ~DDRB;
 5ec:	84 b1       	in	r24, 0x04	; 4
 5ee:	80 95       	com	r24
 5f0:	85 b9       	out	0x05, r24	; 5
	PORTD = ~DDRD;
 5f2:	8a b1       	in	r24, 0x0a	; 10
 5f4:	80 95       	com	r24
 5f6:	8b b9       	out	0x0b, r24	; 11

//int letzterTaster = 0;

int main(void)
{
	long counter = 0;
 5f8:	c1 2c       	mov	r12, r1
 5fa:	d1 2c       	mov	r13, r1
 5fc:	76 01       	movw	r14, r12
	PORTB = ~DDRB;
	PORTD = ~DDRD;

	while (1)
	{
		sammelLED();
 5fe:	0e 94 26 02 	call	0x44c	; 0x44c <sammelLED>
		//elekWuerfwel();
		counter = warteLED(counter);
 602:	c7 01       	movw	r24, r14
 604:	b6 01       	movw	r22, r12
 606:	0e 94 7e 00 	call	0xfc	; 0xfc <warteLED>
 60a:	6b 01       	movw	r12, r22
 60c:	7c 01       	movw	r14, r24
		blinke();
 60e:	0e 94 65 01 	call	0x2ca	; 0x2ca <blinke>
		anAus();
 612:	0e 94 32 01 	call	0x264	; 0x264 <anAus>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 616:	8f e9       	ldi	r24, 0x9F	; 159
 618:	9f e0       	ldi	r25, 0x0F	; 15
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <main+0x3a>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <main+0x40>
 620:	00 00       	nop
 622:	ed cf       	rjmp	.-38     	; 0x5fe <main+0x1e>

00000624 <_exit>:
 624:	f8 94       	cli

00000626 <__stop_program>:
 626:	ff cf       	rjmp	.-2      	; 0x626 <__stop_program>
